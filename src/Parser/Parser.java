//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    1,    3,    3,    3,    3,    5,    5,
    6,    6,    7,    7,    7,   10,   10,   11,   11,   11,
    9,    9,   14,   14,   14,   14,   17,   18,   18,   15,
   15,   15,   21,   21,   23,   23,   23,   25,   25,   26,
   26,   26,   26,   26,   30,   30,   30,   30,   32,   32,
   34,   32,   35,   32,   32,   32,   36,   36,   37,   37,
   37,   37,   39,   40,   40,   40,   28,   28,   28,   28,
   28,   28,    8,    8,   42,   42,   42,   42,   42,   43,
   44,   44,   51,   45,   45,   50,   55,   50,   50,   54,
   54,   53,   46,   46,   46,   47,   47,   61,   48,   64,
   48,   48,   62,   67,   60,   60,   71,   63,   63,   68,
   68,   66,   66,   66,   66,   70,   70,   70,    2,    2,
    4,    4,    4,    4,    4,    4,   12,   12,   12,   12,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   19,   19,   19,   19,   20,   20,   22,   24,   24,
   27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
   31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
   38,   41,   41,   41,   41,   49,   49,   49,   49,   52,
   52,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   56,   57,   57,   57,   57,   57,   57,   58,   58,   58,
   58,   58,   58,   58,   58,   59,   59,   59,   59,   65,
   65,   65,   69,   69,   69,   69,   69,   69,   72,   72,
   72,   72,   72,   72,   73,   73,   73,   73,   73,   74,
   74,   74,   74,   75,   75,   75,   75,   75,   75,   75,
   75,
};
final static short yylen[] = {                            2,
    2,    1,    3,    1,    2,    2,    1,    1,    2,    1,
    2,    1,    2,    3,    1,    1,    1,    1,    3,    1,
   10,    1,    3,    1,    0,    1,    1,    2,    1,    2,
    1,    1,    3,    1,    1,    3,    1,    5,    1,    1,
    3,    3,    4,    1,    5,    5,    1,    1,    1,    1,
    0,    3,    0,    3,    1,    1,    4,    1,    3,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    1,    0,    4,    1,    6,    0,    6,    1,    6,
    1,    1,    5,    4,    1,    6,    1,    0,    3,    0,
    5,    1,    1,    0,    9,    1,    0,    9,    1,    5,
    1,    3,    1,    2,    1,    5,    4,    1,    1,    1,
    2,    1,    1,    2,    2,    3,    2,    2,    3,    1,
    3,    3,    9,    9,    9,    9,    9,    9,    9,    9,
   10,    5,    2,    2,    2,    2,    2,    1,    2,    2,
    2,    2,    2,    4,    4,    5,    4,    4,    3,    3,
    3,    3,    3,    4,    4,    3,    2,    2,    2,    2,
    4,    5,    2,    2,    2,    3,    3,    3,    4,    2,
    3,    4,    4,    4,    4,    5,    5,    5,    5,    5,
    5,    9,    9,    9,    9,    9,    9,    4,    4,    4,
    4,    3,    3,    3,    3,    5,    5,    5,    5,    9,
   10,    2,    7,    7,    7,    7,    7,    8,    7,    7,
    7,    7,    7,    8,    4,    4,    4,    4,    5,    1,
    3,    2,    1,    4,    4,    4,    4,    3,    3,    3,
    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  123,    0,  120,    2,    4,    0,    0,
    0,    0,    0,   16,    0,   17,    0,   98,    0,    0,
    0,    0,    0,    0,   10,   12,    0,    0,    0,   15,
   20,   22,   73,   74,   75,   76,   77,   78,   79,   82,
   85,   95,   97,    0,  102,    1,  124,    0,    0,    0,
    0,    0,    0,   49,   50,    0,    0,    0,    0,    0,
    0,    0,    0,   44,   47,   48,   56,   58,    0,    0,
    0,    0,    0,   39,  180,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   80,    0,    0,
  212,  126,    0,    9,    0,   11,   13,    0,   18,    0,
  128,    0,    0,    0,    3,    0,  230,    0,    0,  115,
  131,  129,    0,    0,  178,    0,    0,    0,   51,   53,
  167,  169,    0,    0,    0,    0,    0,    0,   26,   29,
    0,    0,  177,    0,    0,    0,    0,    0,    0,    0,
   68,   67,   72,   69,   70,   71,    0,    0,  181,    0,
    0,    0,    0,  204,    0,  203,    0,    0,    0,  176,
   64,   65,   66,    0,    0,    0,    0,    0,   62,    0,
    0,   99,    0,  106,    0,  202,    0,    0,   14,  132,
   19,    0,  100,  114,    0,    0,    0,    0,    0,  179,
   81,    0,  166,    0,   52,   54,  146,  143,  147,   28,
    0,    0,  145,  161,    0,  162,    0,    0,    0,    0,
    0,    0,    0,  159,    0,    0,    0,   84,    0,  199,
  200,    0,   94,    0,    0,    0,  173,    0,    0,    0,
  175,    0,    0,    0,    0,  198,    0,    0,    0,    0,
  118,    0,  231,  112,    0,  171,   57,  164,  165,   43,
    0,    0,    0,    0,    0,    0,    0,  184,   91,    0,
    0,  185,    0,  183,    0,  182,    0,  157,    0,  155,
  154,   93,    0,    0,    0,    0,  208,    0,  207,    0,
  206,    0,    0,    0,    0,  103,    0,    0,    0,    0,
    0,    0,    0,  101,    0,  109,    0,    0,    0,   45,
   46,    0,    0,  188,  189,    0,  190,    0,  187,  186,
  156,   38,    0,    0,    0,    0,    0,   96,    0,    0,
    0,    0,    0,    0,  240,    0,  239,  238,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  142,    0,    0,
   86,   88,    0,    0,    0,    0,    0,    0,  172,    0,
    0,    0,    0,    0,    0,  117,  236,    0,  235,  234,
    0,    0,    0,    0,    0,    0,    0,    0,  111,    0,
    0,    0,    0,   31,   32,   34,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  116,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  210,  150,    0,    0,   35,    0,   37,   30,
  133,    0,    0,    0,  138,  140,    0,  139,  137,  136,
  135,  134,  214,  215,  217,    0,    0,  216,  213,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  153,    0,   33,  151,    0,    0,    0,   90,  141,   21,
  218,    0,  211,    0,    0,    0,    0,    0,    0,    0,
  225,  228,    0,  227,  226,   36,    0,    0,    0,    0,
  105,  220,  221,  223,    0,    0,  222,  219,  229,  110,
    0,    0,    0,    0,    0,  224,    0,  194,  195,  197,
  196,  193,  192,  108,
};
final static short yydgoto[] = {                          5,
    6,    7,  372,    8,   23,   24,   25,   26,   27,   28,
   29,   30,   31,  126,  373,   32,  127,  128,  129,  130,
  374,  375,  406,  376,   72,   73,  409,  148,   74,   63,
   64,   65,   66,  195,  196,   67,  166,   68,  167,  168,
  169,   33,   34,   35,   36,   37,   38,   39,   40,   75,
  150,   41,  138,  258,  308,   76,  259,   42,   43,  172,
   85,   44,  294,  242,   45,  109,  390,  368,  174,  240,
  458,  296,  369,  110,  241,
};
final static short yysindex[] = {                       -55,
  499,  354,  434,    0,    0,    0,    0,    0,  -22,   -3,
  -31,   18,  -28,    0,  903,    0,  -27,    0,  822,  -13,
 -212,  -37,  499,  499,    0,    0,   86, -161,  505,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -20,    0,    0,    0,   58,  562, -151,
  130,  165,  172,    0,    0,  828,   38, -103,  355,  355,
  273,  489,   73,    0,    0,    0,    0,    0,  629,  428,
  854,   74,  875,    0,    0,    0,  194,    4,  289,   79,
  273,  534,  -21,  153,  522,  260,  879,    0,  386,  364,
    0,    0,  428,    0,  690,    0,    0,  407,    0,  519,
    0,  -78,  330,  207,    0,  429,    0,  656,  365,    0,
    0,    0,  513,  153,    0,  125,  903,  599,    0,    0,
    0,    0,  251,  300,  132,  477,  298,    0,    0,    0,
  177,  799,    0,  481,  498,  683,  428,  415,  421,  -16,
    0,    0,    0,    0,    0,    0,  875,  903,    0,  -75,
  903,  511,   68,    0,  516,    0,  273,  560,  564,    0,
    0,    0,    0,  395,  153,  568,  205,    0,    0,  577,
  536,    0,  492,    0,  567,    0,  110,  583,    0,    0,
    0,  711,    0,    0,   25,  571,  358,   73,   62,    0,
    0,  442,    0,   40,    0,    0,    0,    0,    0,    0,
  579,  300,    0,    0,   73,    0,   73,  355,  355,  457,
  261,  486,  553,    0,   26,  717,  526,    0,  563,    0,
    0,  598,    0,  109,  584,  610,    0,   69,  616,  395,
    0,  623,  411,  -90,  413,    0,  -41, -164,  745,  558,
    0,  576,    0,    0,  332,    0,    0,    0,    0,    0,
 -132,  648,  652,  657,  592,  593,  650,    0,    0,  666,
   87,    0,  684,    0,  685,    0,  712,    0,  586,    0,
    0,    0,   64, -132, -132, -132,    0,  698,    0,  663,
    0,  332,  332,  286,  332,    0,   -7,  702,  704,   22,
 -164,  506,  615,    0,  649,    0,  728,  664,  533,    0,
    0,  428,  428,    0,    0,  731,    0,  400,    0,    0,
    0,    0, -108,  671,  673,  678,  681,    0,  550,  749,
  752,  294,  763,  768,    0,  775,    0,    0,    3,  777,
  788,  332,  552,  -89,  555,    1,  461,    0,  723,  725,
    0,    0,  461,  237,  461,  461,  461,  461,    0,    1,
    1,    1,  595,    1,    1,    0,    0,  802,    0,    0,
  809,  332,  332,  328,  332,  600,  -92,  815,    0,  -22,
  173,  612,  754,    0,    0,    0, -102,  618,  758,  382,
  764,  772,  778,  783,  784,  841,  843,  845,    1,  853,
  860,  864,    0,    1,  869,  870,  340,  872,  873,  903,
  896,  903,    0,    0,  475,  883,    0,  149,    0,    0,
    0,  771,  428,  894,    0,    0,  -65,    0,    0,    0,
    0,    0,    0,    0,    0,  897,    1,    0,    0,  904,
    1,    1,    1,  699,    1,    1,  739,  818,  779,  823,
    0,  964,    0,    0,  785,  837,  840,    0,    0,    0,
    0,  907,    0,  911,  912,  919,    1,  921,  922,  923,
    0,    0,   71,    0,    0,    0,  719,  -91,  721,  722,
    0,    0,    0,    0,  931,    1,    0,    0,    0,    0,
  932,  933,   98,  934,  935,    0,  936,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,  997,  998,    0,    0,    0,    0,    0,    0,  -26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  999,    6,    7,    0,    0,   89,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1000,    0,    0,
    0,    0, 1061,    0,    0,    0,    0,    0,    0,    0,
  962,    0, 1158,    0,    0,    0,    0,    0,    0,    0,
    0,  -67,    0,    0,    0,    0,    0,    0,    0,  962,
  962,    0,  963,  963,    0,    0,  -18,    0,    0,    0,
    0,    0,    8,    0,   10,    0,    0,    0,    0,  204,
    0,    0,    0,    0,    0,  -82,    0,  -76,    0,    0,
    0,    0,    0,   63,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  468,    0,    0,
    0,    0,    0, 1129, 1136,    0,  403,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   24,    0,  117,    0,    0,    0,
    0,    0,    0,    0,  123,    0,    0,  910,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  556,    0,    0,
    0,    0,    0,    0,    0,  -68,    0, 1163,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  147,    0,    0, 1170,    0, 1204,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  366,    0,
    0,   47,    0,    0,    0,    0,    0,    0,    0,   84,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  469,    0,    0,    0,    0,    0,    0,    0,    0,
  409,    0,    0,    0,    0,    0,    0,    0,  408,    0,
    0,    0,    0,    0,    0,    0,    0,  140,    0,  103,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  181,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -14,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  950,    0,    0,    0,    0,  224,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  244,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  274,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  952,    0,    0,    0,    0,    0,    0,
    0,  -39,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
 1010,    0,  438,    0,  989,  -19,   31,   66,    0,   -6,
  987,    0,    0,   19,  333,    0,    0,  -33,    0,    0,
  644,    0,    0,    0,  957,  -10,    0,  -71,    0,  -34,
    0,  416,    0,    0,    0,    0,  -12,    0,    0,  -30,
    0, 1001,    0,    0,    0,    0,    0,    0,    0,  867,
    0,    0,  -69,  284,    0,    0,    0,    0,    0,    0,
    0,  345,    0,    0,    0,  -32,    0,  917,    0, -169,
    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1476;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         62,
  139,  151,   51,   93,   82,    7,    8,    5,   71,    6,
   59,   81,   84,   58,  343,   60,  287,   18,  165,  152,
  413,   50,  164,  205,  214,   59,  113,   90,   58,  108,
   60,  103,   18,  483,  284,  364,   61,  104,   59,  103,
  367,   58,  233,   60,  155,  116,  201,   70,  113,  137,
  137,  325,  173,   94,  125,   83,  232,   78,   79,  450,
  147,  357,  154,  205,   91,  108,  211,    3,  131,    4,
  132,  170,  295,  125,  125,  216,   62,  118,  188,  329,
  250,  205,  131,  243,  132,  152,  201,   92,  130,   96,
  198,   70,  286,  203,   98,   99,  205,  207,  158,  159,
   49,  189,  247,   61,  201,  111,  192,  194,  222,  278,
  241,  480,   91,  131,  134,  132,  137,  125,  157,  135,
  125,  313,  124,  334,  174,   94,  221,  277,  130,  215,
    7,    8,    5,  227,    6,   14,  231,  217,  234,  209,
  219,   16,  174,   59,   97,  307,  130,   49,  205,  273,
  125,  108,  228,   50,  119,  120,  491,   25,   96,   14,
  412,   59,  239,   61,  401,   16,  274,  131,  252,  132,
   51,  201,  482,   96,   25,  224,  402,  180,  181,  209,
  191,   61,  105,  191,  283,  363,   69,  144,  112,  444,
  449,  131,  233,  132,   83,  125,  164,  209,  113,  280,
    1,    2,   96,  127,  144,  269,  232,  113,  145,  144,
  146,  114,  405,  130,   59,  286,  152,   58,   59,   60,
  191,   58,  239,   60,   52,   53,   54,   55,   80,   83,
   69,  404,  339,  340,  152,  161,  162,  163,  191,   52,
   53,   54,   55,  127,  298,   14,   89,   57,  230,  286,
  103,   16,   52,   53,   54,   55,  103,  366,  103,  286,
  241,  127,   57,  153,  209,   56,  314,  315,  316,  317,
    7,    8,    5,  239,    6,   57,   20,   77,  286,  205,
  205,  267,  137,  137,  205,  205,  205,  205,  205,  205,
  205,  205,  205,  117,   21,  249,  205,  205,  205,  205,
  205,  205,  201,  201,   96,  191,  344,  201,  201,  201,
  201,  201,  201,  201,  201,  201,  124,  246,   61,  201,
  201,  201,  201,  201,  201,   71,  479,   59,  127,  149,
   58,   14,   60,   71,  123,   59,  151,   16,   58,  174,
   60,  202,  446,  447,  130,  130,   14,  156,  237,  130,
  306,  352,   16,  130,  130,  130,  130,  130,   59,  380,
  408,  490,  130,   51,  130,  130,  130,   71,  148,   59,
  216,   71,   58,   59,   60,  468,   58,   14,   60,   71,
  190,   59,   49,   16,   58,  261,   60,  199,  200,  437,
  439,  440,  137,  137,  442,  209,  209,  433,  149,   58,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  161,
  162,  163,  209,  209,  209,  209,  209,  209,  141,  142,
  143,   20,  176,  160,  160,  137,  175,  463,   52,   53,
   54,   55,  204,   53,   54,   55,  191,  191,   22,   21,
   48,  191,  191,  191,  191,  191,  191,  191,  191,  191,
   50,   57,  182,  191,  191,  191,  191,  191,  191,  127,
  127,  161,  162,  163,  127,  158,  158,   20,  127,  127,
  127,  127,  127,   20,  121,  122,    3,  127,    4,  127,
  127,  127,  248,  183,  131,   21,  132,  184,  160,  187,
  160,   21,  370,   10,  262,  264,  266,   11,  237,  148,
   20,  371,   12,   13,   14,   15,  416,  197,   24,   23,
   16,   27,   17,   18,   19,  441,   59,  201,   21,   58,
  208,   60,  255,  256,  260,   24,   23,   92,  123,  149,
  158,  131,  158,  132,  145,  144,  146,  209,   20,  212,
   14,   52,   53,   54,   55,  213,   16,  133,  102,   52,
   53,   54,   55,  123,   59,  123,   21,   58,   47,   60,
  322,   20,  102,  101,   57,   14,  270,   14,  131,  220,
  132,   16,   57,   16,  223,   20,  131,  179,  132,   21,
  107,  288,  289,   52,   53,   54,   55,   52,   53,   54,
   55,  342,  160,   21,  107,   52,   53,   54,   55,   18,
  225,   20,  397,  271,  226,  131,   57,  132,  229,    1,
   57,   53,   54,   55,   18,   20,  235,  232,   57,   21,
  107,  160,   61,  253,  254,  236,  312,  160,  131,  244,
  132,  326,  245,  238,  330,  331,  251,  370,   10,  193,
   59,  275,   11,   58,  171,   60,  371,   12,   13,   14,
   15,  161,  162,  163,   20,   16,  272,   17,   18,   19,
  233,  255,  256,  158,   92,   92,   92,  276,   20,  158,
   87,   87,  238,  358,  279,  379,  381,  382,  383,  384,
  385,  281,  292,   86,   87,  282,   21,  285,   11,    9,
   10,  299,  300,   12,   11,   20,   15,  301,  293,   12,
   13,   14,   15,   17,   18,   19,  319,   16,  304,   17,
   18,   19,  417,   21,  302,  303,  370,   10,  255,  256,
  257,   11,   20,   27,  305,  371,   12,   13,   14,   15,
  140,   53,   54,   55,   16,   27,   17,   18,   19,  333,
   21,   27,  309,  310,  141,  142,  143,  255,  256,  263,
   20,  136,  311,   57,    9,   10,  318,  268,   59,   11,
  327,   58,  328,   60,   12,   13,   14,   15,  238,   53,
   54,   55,   16,  335,   17,   18,   19,   86,   87,  461,
  332,  131,   11,  132,   20,  336,  337,   12,  338,  341,
   15,   86,   87,  345,  106,  346,   11,   17,   18,   19,
  347,   12,  291,  348,   15,  349,  350,  210,  106,  351,
   20,   17,   18,   19,  255,  256,  265,   86,   87,  464,
  354,  131,   11,  132,   20,  355,  362,   12,   21,  365,
   15,   86,   87,  356,  106,  359,   11,   17,   18,   19,
   59,   12,   21,   58,   15,   60,  360,  377,  237,  378,
  389,   17,   18,   19,   52,   53,   54,   55,  462,   59,
  393,   20,   58,  465,   60,  131,  394,  132,  400,   59,
   86,   87,   58,  403,   60,   11,  371,   57,  411,   21,
   12,  414,  415,   15,   86,   87,  115,  237,  418,   11,
   17,   18,   19,  445,   12,   59,  419,   15,   58,  423,
   60,  424,  420,  425,   17,   18,   19,  421,  422,  467,
  427,  185,   87,  145,  144,  146,   11,  131,  428,  132,
   59,   12,  429,   58,   15,   60,  431,  432,  186,  435,
  436,   17,   18,   19,  145,  144,  146,   59,   86,   87,
   58,  443,   60,   11,   59,  177,  178,   58,   12,   60,
   60,   15,  448,   63,  457,  451,   13,   14,   17,   18,
   19,  469,  453,   16,  470,  471,   86,   87,   60,  472,
  473,   11,   52,   53,   54,   55,   12,  474,  476,   15,
  477,  478,  481,  237,  484,  485,   17,   18,   19,  486,
  488,  489,  492,  493,  494,   57,  119,  122,  125,  121,
   86,   87,   25,   61,  466,   11,  131,  104,  132,  107,
   12,   46,   95,   15,  100,  410,  218,  290,    0,   88,
   17,   18,   19,  145,  144,  146,   86,   87,    0,    0,
    0,   11,    0,    0,    0,    0,   12,    0,    0,   15,
   86,   87,    0,    0,    0,   11,   17,   18,   19,    0,
   12,    0,    0,   15,  206,   53,   54,   55,    0,    0,
   17,   18,   19,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   52,   53,   54,   55,   86,   87,    0,
    0,    0,   11,   52,   53,   54,   55,   12,    0,    0,
   15,    0,    0,    0,    0,    0,   57,   17,   18,    0,
    0,   55,   55,   55,    0,   55,   57,   55,    0,  140,
   53,   54,   55,    0,    0,    0,    0,    0,   55,   55,
   55,   55,   55,  141,  142,  143,    0,    0,    0,    0,
    0,    0,   57,    0,   52,   53,   54,   55,    0,    0,
    0,    0,    0,    0,  141,  142,  143,   56,    0,    0,
    0,   52,   53,   54,   55,    0,    0,   57,   52,   53,
   54,   55,    0,    0,  438,   60,   63,   63,   63,  168,
  168,  168,    0,  168,   57,  168,  170,  170,  170,    0,
  170,   57,  170,   55,    0,   55,  168,  168,  168,  168,
  168,    0,    0,  170,  170,  170,  170,  170,   40,    0,
   40,  297,   40,  163,    0,  163,    0,  163,    0,    0,
   41,    0,   41,    0,   41,   40,   40,   40,   40,   40,
  163,  163,  163,  163,  163,    0,    0,   41,   41,   41,
   41,   41,    0,  141,  142,  143,    0,    0,  320,  321,
  323,  324,    0,    0,   42,    0,   42,    0,   42,    0,
    0,  168,    0,  168,    0,    0,    0,    0,  170,    0,
  170,   42,   42,   42,   42,   42,  386,  387,  388,    0,
  391,  392,    0,    0,    0,    0,    0,    0,  353,    0,
   40,    0,   40,    0,    0,  163,    0,  163,  361,    0,
    0,    0,   41,    0,   41,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  426,    0,    0,    0,    0,
  430,    0,    0,    0,    0,    0,   55,    0,  395,  396,
  398,  399,   55,    0,    0,    0,   42,  407,   42,    0,
   55,   55,   55,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  452,    0,    0,    0,  454,  455,  456,
    0,  459,  460,  434,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  475,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  168,    0,    0,    0,    0,    0,
  168,  170,  487,    0,    0,    0,    0,  170,  168,  168,
  168,    0,    0,    0,    0,  170,  170,  170,    0,    0,
    0,    0,    0,   40,    0,    0,    0,    0,  163,   40,
    0,    0,    0,    0,  163,   41,    0,   40,   40,   40,
    0,   41,  163,  163,  163,    0,    0,    0,    0,   41,
   41,   41,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   42,
    0,    0,    0,    0,    0,   42,    0,    0,    0,    0,
    0,    0,    0,   42,   42,   42,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         10,
   70,   73,    9,   23,   15,    0,    0,    0,   40,    0,
   42,   40,   40,   45,  123,   47,   58,   44,   40,   59,
  123,   44,   44,    0,   41,   42,   43,   41,   45,   49,
   47,   58,   59,  125,  125,  125,   40,   58,   42,   58,
   40,   45,  125,   47,   41,   56,    0,  123,  125,   69,
   70,   59,   85,   23,   61,  123,  125,   40,   41,  125,
   71,   59,   59,   40,  277,   85,  136,  123,   43,  125,
   45,   84,  242,   80,   81,  147,   87,   40,  113,   58,
   41,   58,   43,   59,   45,  125,   40,  125,    0,   24,
  124,  123,  257,  127,  256,  257,  131,  132,   80,   81,
  123,  114,   41,   41,   58,  257,  117,  118,   41,   41,
  125,   41,  277,   43,   42,   45,  136,  124,   40,   47,
  127,   58,   44,  293,   41,   95,   59,   59,   40,  140,
  125,  125,  125,  164,  125,  268,  167,  148,  171,    0,
  151,  274,   59,   41,   59,   59,   58,  123,  125,   41,
  157,  171,  165,   44,  258,  259,   59,   41,   93,  268,
  263,   59,  182,   41,  257,  274,   58,   43,  202,   45,
  177,  125,  264,  108,   58,  157,  269,  256,  257,   40,
    0,   59,  125,   59,  275,  275,  262,   41,   59,   41,
  256,   43,  275,   45,  262,  202,   44,   58,  275,  230,
  256,  257,  137,    0,   58,  216,  275,   43,   60,   61,
   62,   40,   40,  125,   42,  257,  256,   45,   42,   47,
   40,   45,  242,   47,  256,  257,  258,  259,  257,  257,
  262,   59,  302,  303,   41,  257,  258,  259,   58,  256,
  257,  258,  259,   40,  251,  268,  260,  279,   44,  257,
  277,  274,  256,  257,  258,  259,  277,  257,  277,  257,
  275,   58,  279,  260,  125,  269,  273,  274,  275,  276,
  265,  265,  265,  293,  265,  279,   40,  260,  257,  256,
  257,  256,  302,  303,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  256,   58,  256,  273,  274,  275,  276,
  277,  278,  256,  257,  239,  125,  313,  261,  262,  263,
  264,  265,  266,  267,  268,  269,   44,  256,  256,  273,
  274,  275,  276,  277,  278,   40,  256,   42,  125,  256,
   45,  268,   47,   40,  256,   42,  408,  274,   45,  256,
   47,   44,  412,  413,  256,  257,  268,   59,  125,  261,
  264,   58,  274,  265,  266,  267,  268,  269,  256,  123,
  371,  264,  274,  370,  276,  277,  278,   40,  125,   42,
  442,   40,   45,   42,   47,  445,   45,  268,   47,   40,
  256,   42,  123,  274,   45,  125,   47,  256,  257,  400,
  401,  402,  412,  413,  405,  256,  257,   58,  125,   45,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  257,
  258,  259,  273,  274,  275,  276,  277,  278,  270,  271,
  272,   40,   59,   58,   59,  445,   41,  438,  256,  257,
  258,  259,  256,  257,  258,  259,  256,  257,    1,   58,
    3,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   44,  279,  123,  273,  274,  275,  276,  277,  278,  256,
  257,  257,  258,  259,  261,   58,   59,   40,  265,  266,
  267,  268,  269,   40,   59,   60,  123,  274,  125,  276,
  277,  278,   41,  277,   43,   58,   45,   59,  123,  125,
  125,   58,  256,  257,  211,  212,  213,  261,  275,  256,
   40,  265,  266,  267,  268,  269,  125,  257,   41,   41,
  274,   44,  276,  277,  278,   41,   42,   41,   58,   45,
   40,   47,  262,  263,  264,   58,   58,  125,  256,  256,
  123,   43,  125,   45,   60,   61,   62,   40,   40,  125,
  268,  256,  257,  258,  259,  125,  274,   59,   44,  256,
  257,  258,  259,  256,   42,  256,   58,   45,  125,   47,
  275,   40,   44,   59,  279,  268,   41,  268,   43,   59,
   45,  274,  279,  274,   59,   40,   43,   59,   45,   58,
   59,  237,  238,  256,  257,  258,  259,  256,  257,  258,
  259,  308,   59,   58,   59,  256,  257,  258,  259,   44,
   41,   40,  275,   41,   41,   43,  279,   45,   41,  256,
  279,  257,  258,  259,   59,   40,  125,   41,  279,   58,
   59,  256,   40,  208,  209,   59,   41,  262,   43,   59,
   45,  287,  275,   58,  290,  291,   58,  256,  257,   41,
   42,   58,  261,   45,  123,   47,  265,  266,  267,  268,
  269,  257,  258,  259,   40,  274,   59,  276,  277,  278,
  125,  262,  263,  256,  262,  263,  264,   58,   40,  262,
  262,  263,   58,  329,   59,  343,  344,  345,  346,  347,
  348,   59,  125,  256,  257,  275,   58,  275,  261,  256,
  257,   44,   41,  266,  261,   40,  269,   41,  123,  266,
  267,  268,  269,  276,  277,  278,   44,  274,   59,  276,
  277,  278,  380,   58,  123,  123,  256,  257,  262,  263,
  264,  261,   40,  256,   59,  265,  266,  267,  268,  269,
  256,  257,  258,  259,  274,  268,  276,  277,  278,  125,
   58,  274,   59,   59,  270,  271,  272,  262,  263,  264,
   40,  123,   41,  279,  256,  257,   59,   41,   42,  261,
   59,   45,   59,   47,  266,  267,  268,  269,   58,  257,
  258,  259,  274,  125,  276,  277,  278,  256,  257,   41,
  275,   43,  261,   45,   40,   58,  123,  266,  256,   59,
  269,  256,  257,  123,  273,  123,  261,  276,  277,  278,
  123,  266,   58,  123,  269,  256,   58,  125,  273,   58,
   40,  276,  277,  278,  262,  263,  264,  256,  257,   41,
   58,   43,  261,   45,   40,   58,  275,  266,   58,  275,
  269,  256,  257,   59,  273,   59,  261,  276,  277,  278,
   42,  266,   58,   45,  269,   47,   59,  125,  273,  125,
  256,  276,  277,  278,  256,  257,  258,  259,   41,   42,
   59,   40,   45,   41,   47,   43,   58,   45,  269,   42,
  256,  257,   45,   59,   47,  261,  265,  279,  125,   58,
  266,  264,  125,  269,  256,  257,   59,  273,  125,  261,
  276,  277,  278,  123,  266,   42,  125,  269,   45,   59,
   47,   59,  125,   59,  276,  277,  278,  125,  125,  125,
   58,  256,  257,   60,   61,   62,  261,   43,   59,   45,
   42,  266,   59,   45,  269,   47,   58,   58,  273,   58,
   58,  276,  277,  278,   60,   61,   62,   42,  256,  257,
   45,   59,   47,  261,   42,  256,  257,   45,  266,   47,
   41,  269,   59,   44,  256,   59,  267,  268,  276,  277,
  278,  125,   59,  274,  125,   59,  256,  257,   59,   59,
   59,  261,  256,  257,  258,  259,  266,   59,   58,  269,
   59,   59,  264,  273,  264,  264,  276,  277,  278,   59,
   59,   59,   59,   59,   59,  279,    0,    0,    0,    0,
  256,  257,   41,   41,   41,  261,   43,   58,   45,   58,
  266,    2,   24,  269,   28,  372,  150,  273,   -1,   19,
  276,  277,  278,   60,   61,   62,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,  269,
  256,  257,   -1,   -1,   -1,  261,  276,  277,  278,   -1,
  266,   -1,   -1,  269,  256,  257,  258,  259,   -1,   -1,
  276,  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  258,  259,  256,  257,   -1,
   -1,   -1,  261,  256,  257,  258,  259,  266,   -1,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  279,  276,  277,   -1,
   -1,   41,   42,   43,   -1,   45,  279,   47,   -1,  256,
  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   58,   59,
   60,   61,   62,  270,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,  279,   -1,  256,  257,  258,  259,   -1,   -1,
   -1,   -1,   -1,   -1,  270,  271,  272,  269,   -1,   -1,
   -1,  256,  257,  258,  259,   -1,   -1,  279,  256,  257,
  258,  259,   -1,   -1,  269,  256,  257,  258,  259,   41,
   42,   43,   -1,   45,  279,   47,   41,   42,   43,   -1,
   45,  279,   47,  123,   -1,  125,   58,   59,   60,   61,
   62,   -1,   -1,   58,   59,   60,   61,   62,   41,   -1,
   43,  245,   45,   41,   -1,   43,   -1,   45,   -1,   -1,
   41,   -1,   43,   -1,   45,   58,   59,   60,   61,   62,
   58,   59,   60,   61,   62,   -1,   -1,   58,   59,   60,
   61,   62,   -1,  270,  271,  272,   -1,   -1,  282,  283,
  284,  285,   -1,   -1,   41,   -1,   43,   -1,   45,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,  123,   -1,
  125,   58,   59,   60,   61,   62,  350,  351,  352,   -1,
  354,  355,   -1,   -1,   -1,   -1,   -1,   -1,  322,   -1,
  123,   -1,  125,   -1,   -1,  123,   -1,  125,  332,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  389,   -1,   -1,   -1,   -1,
  394,   -1,   -1,   -1,   -1,   -1,  256,   -1,  362,  363,
  364,  365,  262,   -1,   -1,   -1,  123,  371,  125,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  427,   -1,   -1,   -1,  431,  432,  433,
   -1,  435,  436,  397,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  457,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,  256,  476,   -1,   -1,   -1,   -1,  262,  270,  271,
  272,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,   -1,
   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  256,  262,
   -1,   -1,   -1,   -1,  262,  256,   -1,  270,  271,  272,
   -1,  262,  270,  271,  272,   -1,   -1,   -1,   -1,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"programa : ID conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno",
"cuerpo_funcion : retorno",
"cuerpo_funcion : error_bloque_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$1 :",
"factor : '-' CTE_INT $$1",
"$$2 :",
"factor : '-' CTE_DBL $$2",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$3 :",
"seleccion : IF condicion $$3 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$4 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$4 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : OUT '(' ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$5 :",
"expresion_dountil : DO $$5 cuerpo_dountil",
"$$6 :",
"expresion_dountil : etiqueta ':' DO $$6 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$7 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$7 ':' asignacion_do_until ';'",
"cuerpo_dountil : error_cuerpo_dountil",
"$$8 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$8 ':' asignacion_do_until ';'",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : '(' ID ASSIGN expresion ')'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion error",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_bloque_funcion : error",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : '(' ')' ';'",
"error_mensaje_pantalla : OUT ')' ';'",
"error_mensaje_pantalla : OUT '(' ';'",
"error_mensaje_pantalla : OUT '(' ')'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion error asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_asignacion_do_until : ID ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ID expresion ')'",
"error_asignacion_do_until : '(' ID ASSIGN ')'",
"error_asignacion_do_until : '(' ID ASSIGN expresion error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 457 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
public Parser(AnalizadorLexico analizadorLexico)
{
  this.analizadorLexico = analizadorLexico;
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 972 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 14:
//#line 37 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");}
break;
case 16:
//#line 41 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 17:
//#line 42 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 18:
//#line 45 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);}
break;
case 19:
//#line 46 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);}
break;
case 21:
//#line 50 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");}
break;
case 28:
//#line 63 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);}
break;
case 31:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 33:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 38:
//#line 82 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 40:
//#line 86 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 41:
//#line 87 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 42:
//#line 89 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 45:
//#line 95 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 46:
//#line 97 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 49:
//#line 103 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 50:
//#line 105 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 51:
//#line 107 "gramatica.y"
{verificarRango();}
break;
case 52:
//#line 107 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 53:
//#line 109 "gramatica.y"
{verificarRango();}
break;
case 54:
//#line 109 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 55:
//#line 111 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 57:
//#line 117 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 64:
//#line 130 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 65:
//#line 132 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 66:
//#line 133 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 67:
//#line 136 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 68:
//#line 137 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 69:
//#line 138 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 70:
//#line 139 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 71:
//#line 140 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 72:
//#line 141 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 80:
//#line 155 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 81:
//#line 158 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 83:
//#line 164 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 86:
//#line 171 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 87:
//#line 173 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 90:
//#line 181 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 93:
//#line 190 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 94:
//#line 191 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla vacio");}
break;
case 96:
//#line 195 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 98:
//#line 199 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 100:
//#line 200 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 104:
//#line 207 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 105:
//#line 210 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														System.out.println("ENTRO");
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 107:
//#line 220 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 108:
//#line 223 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
															if (Main.polaca.existeBreak()){ /*Hay un Break*/
																Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
															Main.polaca.addElementPolaca(Main.polaca.desapilar());
															Main.polaca.addElementPolaca("BF");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 110:
//#line 234 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 112:
//#line 238 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 114:
//#line 243 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 116:
//#line 251 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 117:
//#line 255 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 119:
//#line 264 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 120:
//#line 265 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 121:
//#line 268 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 122:
//#line 269 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 123:
//#line 270 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 124:
//#line 271 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 125:
//#line 272 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 126:
//#line 273 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 127:
//#line 277 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 128:
//#line 278 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 129:
//#line 279 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 130:
//#line 280 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 131:
//#line 284 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 132:
//#line 285 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 133:
//#line 289 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 134:
//#line 290 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 135:
//#line 291 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 136:
//#line 292 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 137:
//#line 293 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 138:
//#line 294 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 139:
//#line 295 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 140:
//#line 296 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el cuerpo de la funcion");}
break;
case 141:
//#line 297 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de cierre del cuerpo de la funcion");}
break;
case 142:
//#line 300 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 143:
//#line 301 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 144:
//#line 302 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 145:
//#line 303 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 146:
//#line 306 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 147:
//#line 307 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 148:
//#line 310 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 149:
//#line 314 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 150:
//#line 315 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 151:
//#line 319 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 152:
//#line 320 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 153:
//#line 321 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 154:
//#line 325 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 155:
//#line 326 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 156:
//#line 327 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 157:
//#line 328 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 158:
//#line 329 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 159:
//#line 330 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 160:
//#line 331 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 161:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 162:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 163:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 164:
//#line 337 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 165:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 166:
//#line 339 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 167:
//#line 342 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 168:
//#line 343 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 169:
//#line 344 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 170:
//#line 345 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 171:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 172:
//#line 351 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 173:
//#line 352 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 174:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 175:
//#line 354 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 176:
//#line 357 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 177:
//#line 358 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 178:
//#line 359 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 179:
//#line 360 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 180:
//#line 363 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 181:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el cuerpo de la seleccion");}
break;
case 182:
//#line 367 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 183:
//#line 368 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 184:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 185:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 186:
//#line 371 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 187:
//#line 372 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 188:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 189:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 190:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 191:
//#line 376 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 192:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 193:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 194:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 195:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 196:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 197:
//#line 384 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 198:
//#line 387 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 199:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 200:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 201:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 202:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 203:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 204:
//#line 393 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 205:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 206:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 207:
//#line 398 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 208:
//#line 399 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 209:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 210:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 211:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 212:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 213:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 214:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 215:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 216:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 217:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 218:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 219:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 220:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 221:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 222:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 223:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 224:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until con etiqueta");}
break;
case 225:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 226:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador a la izquierda de la asignacion del do_until");}
break;
case 227:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el '=:' en la asignacion del do_until");}
break;
case 228:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion en la asignacion del do_until");}
break;
case 229:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 230:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 231:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 232:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 233:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 234:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 235:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 236:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 237:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 238:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 239:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 240:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 241:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1867 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
