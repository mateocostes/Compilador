//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.*;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   34,   34,   34,   34,
   36,   36,   36,   36,   36,   36,   36,   36,   38,   38,
   40,   40,   40,   40,   42,   43,   43,   43,   43,   43,
   32,   32,   32,   32,   32,   32,    7,    7,    7,    7,
   45,   45,   45,   45,   45,   53,   46,   49,   49,   56,
   50,   50,   55,   60,   55,   55,   59,   59,   58,   51,
   51,   48,   48,   64,   64,   68,   52,   70,   52,   52,
   47,   73,   67,   67,   75,   69,   69,   72,   72,   77,
   77,    3,    3,    5,    5,    5,    5,    5,    5,   12,
   12,   12,   12,   12,   13,   13,   16,   16,   20,   20,
   20,   20,   20,   23,   23,   23,   23,   24,   24,   26,
   26,   28,   28,   31,   31,   31,   31,   33,   33,   33,
   33,   33,   33,   33,   35,   35,   35,   37,   37,   37,
   37,   39,   39,   39,   41,   44,   44,   44,   44,   54,
   54,   54,   54,   54,   54,   57,   57,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   61,   61,   61,   62,
   62,   62,   62,   62,   62,   63,   63,   63,   63,   63,
   63,   63,   65,   65,   66,   66,   66,   66,   71,   71,
   71,   74,   74,   74,   74,   74,   76,   76,   76,   76,
   76,   78,   78,   78,   78,   79,   79,   79,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    2,    2,    1,    1,    4,    1,    4,    1,
    3,    1,    0,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    2,    4,
    1,    1,    1,    1,    1,    0,    3,    4,    1,    0,
    4,    1,    6,    0,    6,    1,    6,    1,    1,    5,
    1,    3,    1,    4,    1,    0,    3,    0,    5,    1,
    1,    0,    7,    1,    0,    7,    1,    5,    1,    3,
    1,    1,    1,    3,    1,    1,    2,    2,    2,    2,
    2,    3,    1,    2,    3,    3,    2,    2,    6,    6,
    6,    6,    6,    5,    2,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    1,    4,    4,    5,
    4,    4,    3,    3,    3,    3,    3,    2,    3,    2,
    3,    4,    4,    3,    4,    5,    2,    2,    2,    3,
    3,    3,    4,    2,    3,    2,    3,    4,    4,    4,
    4,    5,    5,    5,    5,    5,    5,    3,    4,    9,
    9,    9,    9,    9,    9,    4,    4,    4,    4,    4,
    1,    2,    1,    2,    3,    4,    3,    3,    2,    2,
    2,    7,    7,    7,    7,    7,    7,    7,    7,    7,
    7,    2,    3,    3,    4,    2,    2,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  126,    0,  123,    3,    5,    0,    0,
    0,    0,    0,    0,   15,    0,    0,   16,    0,    0,
   86,    0,    0,    0,    0,    0,    0,    0,    0,   14,
   19,   22,  213,   60,   77,   78,    0,   81,   82,   83,
   84,   85,   89,   92,  101,  103,  110,    0,  127,    0,
  137,    0,    0,    0,    0,   51,   52,    0,    0,    0,
    0,    0,    0,    0,    0,   46,   49,   50,   56,   58,
  212,    0,    0,    0,    0,    0,    0,   42,  186,   96,
    0,    0,  138,   20,    0,   79,    0,  214,    0,  219,
    0,    0,    0,  220,  124,    6,    7,   12,    0,   17,
  134,    0,  131,    0,  221,    0,    2,    4,  135,  132,
    0,    0,  182,    0,    0,    0,   53,   54,  168,  170,
   66,   67,   68,    0,    0,    0,    0,    0,   64,    0,
    0,  181,    0,    0,    0,    0,   11,    0,    0,    0,
    0,   72,   71,   76,   73,   74,   75,    0,    0,  187,
    0,    0,    0,    0,    0,    0,  180,  111,    0,    0,
    0,  102,  105,    0,    0,  107,  114,   87,    0,   13,
  136,   18,  108,    0,  183,   88,    0,  174,    0,   69,
   70,  177,  175,   59,    0,  179,  165,    0,  166,    0,
  169,   47,  171,   48,    0,    0,   10,    0,    0,    0,
    0,  198,   98,    0,  163,    0,    0,    0,   91,    0,
  207,  208,    0,  210,    0,    0,    0,    0,   21,    0,
   25,    0,    0,   29,   32,   80,    0,    0,    0,    0,
    0,    0,  206,    0,  172,  173,   57,    0,    0,  190,
    0,    0,  191,    0,    0,  199,    0,  189,    0,  188,
    0,  161,    0,  159,  158,  100,  148,  145,    0,  149,
   31,    0,    0,  147,    0,  217,    0,  215,    0,    0,
    0,    0,    0,    0,  109,  117,    0,  194,  195,    0,
  196,    0,    0,    0,  193,  192,  160,   41,    0,    0,
    0,    0,  216,  104,    0,    0,    0,    0,    0,    0,
    0,    0,  176,   93,   95,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  112,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  144,    0,    0,    0,    0,    0,  119,  121,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   97,    0,    0,    0,  142,    0,   35,   37,   23,
  143,  141,  140,  139,    0,    0,    0,    0,    0,  223,
  232,  224,  226,  113,  225,  222,    0,    0,    0,  115,
    0,    0,    0,    0,    0,    0,  151,  153,    0,    0,
   38,    0,   40,    0,  150,   34,    0,    0,    0,  234,
    0,  233,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  156,    0,   36,  154,   33,   24,  235,
    0,  228,  229,  231,  116,  230,  227,  202,  203,  205,
  204,  201,  200,   39,  118,
};
final static short yydgoto[] = {                          5,
    6,   48,    7,  355,    8,   25,  137,  138,   27,   28,
   29,   30,   31,  219,  156,   32,  220,  356,  397,  221,
  222,  223,  224,  225,  357,  358,  390,  359,   76,   77,
  393,  149,   78,   65,   66,   67,   68,   69,   70,  126,
   34,  127,  128,  129,   35,   36,   37,   38,   39,   40,
   41,   42,   92,   43,   79,  151,   44,  139,  202,  282,
   80,  203,   45,  162,   46,  163,  166,   91,  275,  234,
   47,  335,  341,  167,  406,  276,  336,  337,  338,
};
final static short yysindex[] = {                       290,
  624,    0,  578,    0,    0,    0,    0,    0,  -11,  348,
  -10,   24,  -36,  -42,    0, 1089,  304,    0,  193, -204,
    0, -167, -172,  103,  624,  624,   66,  -44,   77,    0,
    0,    0,    0,    0,    0,    0,  -22,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   82,    0,  159,
    0, -124,  245,  263,  275,    0,    0, 1073,  -29,  250,
  -37,  -37,  426,  152,  431,    0,    0,    0,    0,    0,
    0,  263,  720,  984, 1039,   68,  554,    0,    0,    0,
  299,   -2,    0,    0,  157,    0,   96,    0,   62,    0,
  750,  998,  302,    0,    0,    0,    0,    0,  312,    0,
    0,  137,    0,  256,    0,  114,    0,    0,    0,    0,
    8,  263,    0,  111, 1089, 1012,    0,    0,    0,    0,
    0,    0,    0,  286,  381,  -20,  523,    0,    0, 1105,
 1113,    0,  -19,  352,  348,  774,    0,  984,  -87,  234,
  630,    0,    0,    0,    0,    0,    0,  554, 1089,    0,
 -111, 1089,  321,   44,  335,   39,    0,    0,  339,  394,
  361,    0,    0,  801,  836,    0,    0,    0,  355,    0,
    0,    0,    0,  431,    0,    0,  462,    0,   13,    0,
    0,    0,    0,    0,  381,    0,    0,  431,    0,  431,
    0,    0,    0,    0,  199,  -84,    0,  300,  317,  368,
  262,    0,    0,  338,    0,   14, 1024,  492,    0,  551,
    0,    0,  415,    0,  220, -176,   40,  303,    0,  461,
    0,   43,    0,    0,    0,    0,  499,   67,  441,  294,
  654,  344,    0,  864,    0,    0,    0,  506,  502,    0,
  513,  -32,    0,  984,  984,    0,  518,    0,  520,    0,
  580,    0,  579,    0,    0,    0,    0,    0,   54,    0,
    0,  570, -176,    0,  571,    0,  573,    0,  548,  548,
  459,  548,  888,  912,    0,    0,  377,    0,    0,  575,
    0,  350,  510,  512,    0,    0,    0,    0,   71,  -65,
  -65,  598,    0,    0,  585,  586,  494,  587,  588,  372,
  687,  373,    0,    0,    0, -105,  385,  -80,  531,  532,
  533,  401,   95,   95,   95,    0,   95,   95,  548,  548,
  536,  548,  926,  984,  599,  601,  432,  601,  601,  601,
    0, 1081, 1089,   41,  602,  603,    0,    0,  604,  606,
   95,  607,  608,  610,  611,  540,  612,  616,  948,  535,
  553,    0,  -12,  544,  411,    0,  -63,    0,    0,    0,
    0,    0,    0,    0, 1129,  117,  117,   89,  638,    0,
    0,    0,    0,    0,    0,    0,   95,   95,   95,    0,
   95,   95,  416, -103,  417,  422,    0,    0,  679,  628,
    0,   79,    0,  565,    0,    0,  601,  263,  117,    0,
   -4,    0,  632,  636,  637,   95,  643,  645,  648,  652,
   38,  655,  660,    0, 1259,    0,    0,    0,    0,    0,
  663,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   23,  713,    0,    0,    0,    0,    0,    0,  -24,
  109,    0,    0,    0,    0,    0,    0,    0,    0,  962,
    0,    0,    0,  723,    6,    9,  297,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  730,
    0,    0,    0,  143, 1335,    0,    0,    0,    0,    0,
    0,    0,   19,    0, 1357,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -58,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  690,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  498,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  168,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  684,    0,    0,
    0,    0,    0,    0,  -16,    0,    0,  -77,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  691,    0,    0,    0,   69,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1368,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   29,    0,    0, 1379,    0, 1390,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  860,
    0,    0,  191,    0,    0,    0,  124,    0,    0,    0,
    0,    0,  -27,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   45,    0,    0,
    0,  363,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1219,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  132,    0,    0,    0,  219,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  254,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  148,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   86,   91,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -57,
    0,  -31,    0,    0,    0,    0,    0,  125,  133,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   -8,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  685,    0,    0,   74,    0,    0,    4,  -75,    0,    1,
  707,    0,    0,    0,    0,    0,  519, -283,    0,    0,
    0, -140,    0,    0,  382,    0,    0,    0, 1201,    3,
    0,  -74,    0,  -15,    0,  227,    0,   -1,    0,  -49,
    0,    0,  364,    0,  650,    0,  657,    0,    0,    0,
    0,    0,    0,    0,  595,    0,    0,  -73,  347,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1128,    0,    0,    0,    0, -267,    0,    0,
};
final static int YYTABLESIZE=1662;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         33,
  140,   33,  152,   82,   26,    8,   26,   60,    9,   53,
  116,   74,   64,   27,  101,  165,   30,  324,   85,   17,
  184,  411,  122,   33,   33,   60,  281,  157,   26,   26,
   27,   52,   52,  111,   17,  106,  421,  201,  155,  161,
  242,  111,  326,  361,  362,  363,  364,   99,   71,   61,
  155,   90,   60,  237,   62,  130,  130,  131,  131,   63,
  114,  396,  196,   75,   90,   61,  369,  152,   60,  178,
   62,   33,   33,  207,   24,  258,   50,  148,  217,  215,
  368,  264,  216,  216,  213,   61,  263,  178,  231,   33,
   33,   15,   93,  157,  289,  174,  431,   18,   96,   97,
  401,  160,  212,   61,   94,  125,  124,  267,  211,   63,
  228,  290,  387,  419,  188,  190,  155,  177,  179,  417,
  104,  130,  292,  131,   98,  266,  237,   63,  308,  400,
    8,  236,  109,    9,   33,  103,   33,   64,  146,  145,
  147,  197,  184,  206,  237,    1,   74,    1,  211,  236,
   73,  208,  334,  130,  210,  131,  218,  323,  274,  130,
  410,  131,   33,   33,   28,  238,  211,  185,  197,  176,
  283,  284,  146,  120,  198,  199,  200,  198,  199,  241,
  104,   28,  184,  238,   99,   99,   99,   15,   26,  146,
  209,  120,  395,   18,  130,  170,  131,  301,  152,  130,
  184,  131,   15,   90,    3,   26,    4,  185,   18,  253,
  132,   99,  100,   83,   84,  157,  218,  218,  218,   55,
   56,   57,  218,   81,  157,  185,  115,   95,   30,   33,
  209,  280,   33,  211,  197,  183,  191,   55,   56,   57,
   30,   59,   33,   33,   51,   51,   30,  155,  209,  350,
  351,  420,  111,  197,  105,   15,   15,  154,  218,   59,
  111,   18,   18,  218,   55,   56,   57,  184,  236,  251,
    8,   33,   33,    9,   63,  384,  218,  197,    1,   72,
   55,   56,   57,  108,  178,   73,   59,  119,  120,  309,
  310,  311,  185,  197,  215,  215,  133,  332,  215,   33,
   61,  430,   59,  110,  197,  111,   15,   15,  327,  333,
   15,  197,   18,   18,   63,  209,   18,  152,  121,  122,
  123,   33,   33,  150,   33,   33,   33,   33,   33,   26,
   26,   26,   26,   26,  366,  367,  133,    1,   15,  153,
  207,  237,  169,  218,   18,  332,  236,   33,  142,  143,
  144,  332,  158,   53,  133,   52,  392,  333,  204,  192,
  194,   87,   86,  333,  211,  211,  175,  399,  211,  211,
  211,  211,  211,  211,  211,  211,  211,  211,  197,  211,
  238,  211,  211,  211,  211,  211,  211,   63,  120,   61,
  173,  415,   60,  214,   62,   33,   60,  226,  184,  184,
   26,  229,  184,  184,  184,  184,  184,  184,  184,  184,
  184,  184,    3,  233,    4,  184,  184,  184,  184,  184,
  184,  133,  244,  185,  185,  124,  246,  185,  185,  185,
  185,  185,  185,  185,  185,  185,  185,  125,  124,  245,
  185,  185,  185,  185,  185,  185,  209,  209,   88,   89,
  209,  209,  209,  209,  209,  209,  209,  209,  209,  209,
  198,  199,  239,  209,  209,  209,  209,  209,  209,  125,
  124,   22,  133,  256,  218,  218,  257,  134,  218,  218,
  218,  218,  218,  218,  218,  218,  218,  218,  182,   23,
  186,  218,  218,  218,  218,  218,  218,  130,   75,  268,
   61,  262,  235,   60,  130,   62,  131,  117,  118,  197,
  197,  171,  172,  197,  197,  197,  197,  197,  197,  197,
  197,  197,  197,  198,  199,  247,  197,  197,  197,  197,
  197,  197,  254,   75,  130,   61,  131,  130,   60,  265,
   62,  240,  243,  180,  181,    1,    2,  248,  238,  277,
  250,  315,  133,  133,  360,  130,  133,  133,  260,  261,
  278,  133,  133,  133,  133,  133,  185,  124,  269,  133,
  133,  279,  133,  133,  133,   75,  285,   61,  286,   75,
   60,   61,   62,  389,   60,   61,   62,   75,   60,   61,
   62,  255,   60,  130,   62,  131,  130,  379,  131,  198,
  199,  249,  388,   54,   55,   56,   57,  193,   55,   56,
   57,  198,  199,  146,  145,  147,   58,   22,  272,  288,
  287,  130,  130,  131,   94,   94,   59,  291,  305,  293,
   59,  294,  303,  304,  306,   23,  307,  121,  122,  123,
   22,  312,  313,  314,  317,  318,  319,  322,  325,  227,
  121,  122,  123,  328,  329,  330,  331,  352,   23,  385,
  370,  371,  372,   22,  373,  375,  376,  377,  378,  381,
  205,   61,  111,  382,   60,  354,   62,  386,  402,  409,
  412,   23,  121,  122,  123,  413,  416,  353,   10,  418,
  422,   11,   12,   22,  423,  424,  354,   13,   14,   15,
   16,  426,   49,  427,   17,   18,  428,   19,   20,   21,
  429,   23,  125,  432,   72,   55,   56,   57,  433,  414,
   61,  435,  128,   60,   62,   62,   22,   65,   65,  129,
   63,   28,  107,  297,  102,  259,  394,   59,  146,  145,
  147,  168,   62,  159,   23,  209,    0,    0,    0,   72,
   55,   56,   57,  130,  130,    0,    0,  130,  130,   22,
    0,    0,  130,  130,  130,  130,  130,    0,    0,    0,
  130,  130,   59,  130,  130,  130,    0,   23,  271,  121,
  122,  123,    0,    0,    0,    0,    0,    0,    0,   22,
    0,   72,   55,   56,   57,   72,   55,   56,   57,   72,
   55,   56,   57,   72,   55,   56,   57,   23,    0,    0,
  346,  321,    0,   22,   59,    0,    0,    0,   59,    0,
    0,    0,   59,  142,  143,  144,   59,    0,    0,    0,
    0,   23,    0,    9,   10,    0,    0,   11,   12,    0,
   22,    0,  136,   13,   14,   15,   16,    0,    0,    0,
   17,   18,    0,   19,   20,   21,  353,   10,   23,    0,
   11,   12,    0,    0,    0,  354,   13,   14,   15,   16,
    0,    0,  164,   17,   18,   22,   19,   20,   21,    9,
   10,    0,    0,   11,   12,   72,   55,   56,   57,   13,
   14,   15,   16,   23,    0,    0,   17,   18,  195,   19,
   20,   21,    0,   22,    0,    0,    0,    0,   59,    0,
  135,    0,    0,   11,   12,    0,    0,  164,  164,   13,
    0,   23,   16,    0,    0,  230,   17,   22,  270,   19,
   20,   21,    0,    0,  141,   55,   56,   57,    0,   62,
   65,   65,   65,  135,    0,   23,   11,   12,  142,  143,
  144,   22,   13,    0,    0,   16,    0,   59,    0,   17,
  232,  320,   19,   20,   21,   22,    0,    0,    0,   23,
    0,    0,    0,    0,    0,    0,  135,    0,    0,   11,
   12,    0,  164,   23,  164,   13,  273,   22,   16,    0,
    0,    0,   17,    0,    0,   19,   20,   21,    0,    0,
    0,  106,    0,    0,    0,   23,  135,    0,    0,   11,
   12,    0,  300,    0,    0,   13,    0,    0,   16,  106,
    0,    0,   17,   22,    0,   19,   20,   21,    0,    0,
  135,    0,    0,   11,   12,    0,  302,   22,    0,   13,
    0,   23,   16,    0,    0,    0,   17,    0,  349,   19,
   20,   21,  178,   61,    0,   23,   60,  135,   62,    0,
   11,   12,    0,    0,  252,   61,   13,    0,   60,   16,
   62,    0,  383,   17,    0,    0,   19,   20,   21,    0,
   61,    0,    0,   60,  106,   62,    0,    0,    0,    0,
    0,    0,  135,    0,    0,   11,   12,    0,  146,  145,
  147,   13,    0,    0,   16,    0,    0,    0,   17,    0,
    0,   19,   20,   21,   61,  164,  164,   60,    0,   62,
  135,  164,   61,   11,   12,   60,    0,   62,  164,   13,
   61,  113,   16,   60,    0,   62,   17,    0,    0,   19,
   20,   21,    0,    0,  135,    0,   61,   11,   12,   60,
    0,   62,    0,   13,   61,    0,   16,   60,    0,   62,
   17,    0,    0,   19,   20,   21,    0,    0,  135,    0,
   61,   11,   12,   60,    0,   62,    0,   13,    0,    0,
   16,    0,  135,    0,   17,   11,   12,   19,   20,   21,
    0,   13,    0,    0,   16,    0,    0,    0,   17,    0,
    0,   19,   20,   21,  135,    0,    0,   11,   12,    0,
    0,    0,    0,   13,    0,    0,   16,    0,  106,    0,
   17,  106,  106,   19,   20,   21,    0,  106,    0,    0,
  106,    0,    0,    0,  106,    0,    0,  106,  106,  106,
  135,    0,    0,   11,   12,    0,    0,    0,    0,   13,
    0,    0,   16,    0,  135,    0,   17,   11,   12,   19,
   20,   21,    0,   13,    0,    0,   16,   72,   55,   56,
   57,    0,    0,   19,   20,    0,  162,  162,    0,   72,
   55,   56,   57,    0,    0,    0,    0,    0,    0,    0,
   59,    0,    0,    0,  141,   55,   56,   57,    0,  434,
    0,  130,   59,  131,    0,    0,    0,    0,  142,  143,
  144,    0,    0,    0,    0,    0,    0,   59,  146,  145,
  147,    0,    0,    0,    0,    0,    0,    0,  112,   55,
   56,   57,    0,    0,    0,    0,   72,   55,   56,   57,
    0,  162,    0,  162,   72,   55,   56,   57,    0,  365,
    0,   59,    0,    0,    0,    0,    0,    0,    0,   59,
  187,   55,   56,   57,    0,    0,    0,   59,  189,   55,
   56,   57,    0,    0,    0,   55,   55,   55,    0,   55,
    0,   55,    0,   59,  398,   55,   56,   57,    0,    0,
    0,   59,   55,   55,   55,   55,   55,   43,    0,   43,
    0,   43,    0,    0,    0,    0,    0,   59,  167,    0,
  167,    0,  167,    0,   43,   43,   43,   43,   43,   44,
    0,   44,    0,   44,    0,  167,  167,  167,  167,  167,
   45,    0,   45,    0,   45,    0,   44,   44,   44,   44,
   44,  339,  340,    0,  342,  343,    0,   45,   45,   45,
   45,   45,    0,    0,    0,    0,    0,   55,    0,   55,
    0,    0,    0,    0,    0,    0,    0,    0,  374,  295,
  296,  298,  299,    0,  162,  162,    0,    0,    0,   43,
  162,   43,    0,    0,    0,    0,    0,  162,    0,    0,
  167,    0,  167,    0,    0,    0,    0,  316,    0,    0,
    0,   44,    0,   44,  403,  404,  405,    0,  407,  408,
    0,    0,   45,    0,   45,    0,    0,    0,    0,  344,
  345,  347,  348,    0,    0,    0,    0,    0,  142,  143,
  144,    0,    0,  425,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  380,    0,    0,    0,
    0,    0,    0,    0,  391,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   55,   55,    0,    0,    0,    0,   55,    0,    0,    0,
    0,    0,    0,   55,   55,   55,   55,    0,    0,    0,
    0,    0,   43,   43,    0,    0,    0,    0,   43,    0,
    0,    0,    0,  167,  167,   43,   43,   43,   43,  167,
    0,    0,    0,    0,   44,   44,  167,  167,  167,  167,
   44,    0,    0,    0,    0,   45,   45,   44,   44,   44,
   44,   45,    0,    0,    0,    0,    0,    0,   45,   45,
   45,   45,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
   74,    3,   77,   40,    1,    0,    3,   45,    0,    9,
   40,  123,   10,   41,   59,   91,   44,  123,   16,   44,
   41,  125,    0,   25,   26,   45,   59,   59,   25,   26,
   58,   44,   44,   58,   59,   58,   41,  125,   41,   89,
  125,   58,  123,  327,  328,  329,  330,  125,   59,   42,
   59,  256,   45,   41,   47,   43,   43,   45,   45,   41,
   58,  125,  136,   40,  123,   42,  334,  125,   45,   41,
   47,   73,   74,  148,    1,  216,    3,   75,   40,  256,
   40,  222,   44,   44,   41,   41,   44,   59,  164,   91,
   92,  268,  260,  125,   41,  111,   59,  274,   25,   26,
  368,   40,   59,   59,  277,   44,   45,   41,    0,   41,
  160,   58,  125,  397,  130,  131,  125,  115,  116,   41,
   44,   43,  263,   45,   59,   59,   41,   59,   58,   41,
  125,   41,  257,  125,  136,   59,  138,  135,   60,   61,
   62,  138,    0,  141,   59,  123,  123,  125,   40,   59,
  262,  149,   58,   43,  152,   45,  156,  263,  234,   43,
  264,   45,  164,  165,   41,   41,   58,    0,  165,   59,
  244,  245,   41,   41,  262,  263,  264,  262,  263,  264,
   44,   58,   40,   59,  262,  263,  264,  268,   41,   58,
    0,   59,  256,  274,   43,   59,   45,  273,  256,   43,
   58,   45,  268,  262,  123,   58,  125,   40,  274,  207,
   59,  256,  257,  256,  257,   59,  216,  217,    0,  257,
  258,  259,  222,  260,  256,   58,  256,  125,  256,  231,
   40,  264,  234,  125,  231,  256,  256,  257,  258,  259,
  268,  279,  244,  245,  257,  257,  274,  256,   58,  323,
  324,  256,  277,    0,  277,  268,  268,  260,   40,  279,
  277,  274,  274,  263,  257,  258,  259,  125,  256,  256,
  265,  273,  274,  265,  256,  349,   58,  274,  256,  256,
  257,  258,  259,  125,  256,  262,  279,   61,   62,  289,
  290,  291,  125,   40,  256,  256,    0,  257,  256,  301,
  256,  264,  279,   59,  301,   43,  268,  268,  308,  269,
  268,   58,  274,  274,   40,  125,  274,  392,  257,  258,
  259,  323,  324,  256,  326,  327,  328,  329,  330,  326,
  327,  328,  329,  330,  332,  333,   40,  256,  268,   41,
  415,  256,   41,  125,  274,  257,  256,  349,  270,  271,
  272,  257,  257,  353,   58,   44,  354,  269,  125,  133,
  134,   58,   59,  269,  256,  257,  256,  365,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  125,   59,
  256,  273,  274,  275,  276,  277,  278,   40,  256,   42,
  277,  389,   45,   59,   47,  397,   45,   59,  256,  257,
  397,   41,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  123,   59,  125,  273,  274,  275,  276,  277,
  278,  125,  123,  256,  257,   45,   59,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,   44,   45,  123,
  273,  274,  275,  276,  277,  278,  256,  257,  256,  257,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  262,  263,  264,  273,  274,  275,  276,  277,  278,   44,
   45,   40,   42,   59,  256,  257,  257,   47,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  125,   58,
  127,  273,  274,  275,  276,  277,  278,    0,   40,   59,
   42,   41,   41,   45,   43,   47,   45,  258,  259,  256,
  257,  256,  257,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  262,  263,  264,  273,  274,  275,  276,
  277,  278,   41,   40,   43,   42,   45,   40,   45,   41,
   47,  195,  196,  258,  259,  256,  257,  201,  185,   44,
  204,   58,  256,  257,  123,   58,  260,  261,  256,  257,
   59,  265,  266,  267,  268,  269,   44,   45,  275,  273,
  274,   59,  276,  277,  278,   40,   59,   42,   59,   40,
   45,   42,   47,   40,   45,   42,   47,   40,   45,   42,
   47,   41,   45,   43,   47,   45,   43,   58,   45,  262,
  263,  264,   59,  256,  257,  258,  259,  256,  257,  258,
  259,  262,  263,   60,   61,   62,  269,   40,  275,   41,
   41,   43,  125,   45,  262,  263,  279,   58,  282,   59,
  279,   59,  256,   59,  125,   58,  125,  257,  258,  259,
   40,   44,   58,   58,   58,   58,  275,  275,  264,  256,
  257,  258,  259,  123,  123,  123,  256,   59,   58,  125,
   59,   59,   59,   40,   59,   59,   59,   58,   58,   58,
   41,   42,   43,   58,   45,  265,   47,  125,   41,  264,
  264,   58,  257,  258,  259,  264,   59,  256,  257,  125,
   59,  260,  261,   40,   59,   59,  265,  266,  267,  268,
  269,   59,  125,   59,  273,  274,   59,  276,  277,  278,
   59,   58,    0,   59,  256,  257,  258,  259,   59,   41,
   42,   59,    0,   45,   41,   47,   40,   44,   45,    0,
   41,   41,   48,  275,   28,  217,  355,  279,   60,   61,
   62,   92,   59,   87,   58,  151,   -1,   -1,   -1,  256,
  257,  258,  259,  256,  257,   -1,   -1,  260,  261,   40,
   -1,   -1,  265,  266,  267,  268,  269,   -1,   -1,   -1,
  273,  274,  279,  276,  277,  278,   -1,   58,  125,  257,
  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   40,
   -1,  256,  257,  258,  259,  256,  257,  258,  259,  256,
  257,  258,  259,  256,  257,  258,  259,   58,   -1,   -1,
  275,  125,   -1,   40,  279,   -1,   -1,   -1,  279,   -1,
   -1,   -1,  279,  270,  271,  272,  279,   -1,   -1,   -1,
   -1,   58,   -1,  256,  257,   -1,   -1,  260,  261,   -1,
   40,   -1,  123,  266,  267,  268,  269,   -1,   -1,   -1,
  273,  274,   -1,  276,  277,  278,  256,  257,   58,   -1,
  260,  261,   -1,   -1,   -1,  265,  266,  267,  268,  269,
   -1,   -1,  123,  273,  274,   40,  276,  277,  278,  256,
  257,   -1,   -1,  260,  261,  256,  257,  258,  259,  266,
  267,  268,  269,   58,   -1,   -1,  273,  274,  125,  276,
  277,  278,   -1,   40,   -1,   -1,   -1,   -1,  279,   -1,
  257,   -1,   -1,  260,  261,   -1,   -1,   58,   59,  266,
   -1,   58,  269,   -1,   -1,  125,  273,   40,  275,  276,
  277,  278,   -1,   -1,  256,  257,  258,  259,   -1,  256,
  257,  258,  259,  257,   -1,   58,  260,  261,  270,  271,
  272,   40,  266,   -1,   -1,  269,   -1,  279,   -1,  273,
  125,  275,  276,  277,  278,   40,   -1,   -1,   -1,   58,
   -1,   -1,   -1,   -1,   -1,   -1,  257,   -1,   -1,  260,
  261,   -1,  123,   58,  125,  266,  123,   40,  269,   -1,
   -1,   -1,  273,   -1,   -1,  276,  277,  278,   -1,   -1,
   -1,   40,   -1,   -1,   -1,   58,  257,   -1,   -1,  260,
  261,   -1,  125,   -1,   -1,  266,   -1,   -1,  269,   58,
   -1,   -1,  273,   40,   -1,  276,  277,  278,   -1,   -1,
  257,   -1,   -1,  260,  261,   -1,  125,   40,   -1,  266,
   -1,   58,  269,   -1,   -1,   -1,  273,   -1,  123,  276,
  277,  278,   41,   42,   -1,   58,   45,  257,   47,   -1,
  260,  261,   -1,   -1,   41,   42,  266,   -1,   45,  269,
   47,   -1,  125,  273,   -1,   -1,  276,  277,  278,   -1,
   42,   -1,   -1,   45,  123,   47,   -1,   -1,   -1,   -1,
   -1,   -1,  257,   -1,   -1,  260,  261,   -1,   60,   61,
   62,  266,   -1,   -1,  269,   -1,   -1,   -1,  273,   -1,
   -1,  276,  277,  278,   42,  256,  257,   45,   -1,   47,
  257,  262,   42,  260,  261,   45,   -1,   47,  269,  266,
   42,   59,  269,   45,   -1,   47,  273,   -1,   -1,  276,
  277,  278,   -1,   -1,  257,   -1,   42,  260,  261,   45,
   -1,   47,   -1,  266,   42,   -1,  269,   45,   -1,   47,
  273,   -1,   -1,  276,  277,  278,   -1,   -1,  257,   -1,
   42,  260,  261,   45,   -1,   47,   -1,  266,   -1,   -1,
  269,   -1,  257,   -1,  273,  260,  261,  276,  277,  278,
   -1,  266,   -1,   -1,  269,   -1,   -1,   -1,  273,   -1,
   -1,  276,  277,  278,  257,   -1,   -1,  260,  261,   -1,
   -1,   -1,   -1,  266,   -1,   -1,  269,   -1,  257,   -1,
  273,  260,  261,  276,  277,  278,   -1,  266,   -1,   -1,
  269,   -1,   -1,   -1,  273,   -1,   -1,  276,  277,  278,
  257,   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,  266,
   -1,   -1,  269,   -1,  257,   -1,  273,  260,  261,  276,
  277,  278,   -1,  266,   -1,   -1,  269,  256,  257,  258,
  259,   -1,   -1,  276,  277,   -1,   58,   59,   -1,  256,
  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  279,   -1,   -1,   -1,  256,  257,  258,  259,   -1,   41,
   -1,   43,  279,   45,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,  279,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  258,  259,   -1,   -1,   -1,   -1,  256,  257,  258,  259,
   -1,  123,   -1,  125,  256,  257,  258,  259,   -1,  269,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  256,  257,  258,  259,   -1,   -1,   -1,  279,  256,  257,
  258,  259,   -1,   -1,   -1,   41,   42,   43,   -1,   45,
   -1,   47,   -1,  279,  256,  257,  258,  259,   -1,   -1,
   -1,  279,   58,   59,   60,   61,   62,   41,   -1,   43,
   -1,   45,   -1,   -1,   -1,   -1,   -1,  279,   41,   -1,
   43,   -1,   45,   -1,   58,   59,   60,   61,   62,   41,
   -1,   43,   -1,   45,   -1,   58,   59,   60,   61,   62,
   41,   -1,   43,   -1,   45,   -1,   58,   59,   60,   61,
   62,  314,  315,   -1,  317,  318,   -1,   58,   59,   60,
   61,   62,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  341,  269,
  270,  271,  272,   -1,  256,  257,   -1,   -1,   -1,  123,
  262,  125,   -1,   -1,   -1,   -1,   -1,  269,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,  297,   -1,   -1,
   -1,  123,   -1,  125,  377,  378,  379,   -1,  381,  382,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,  319,
  320,  321,  322,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,   -1,   -1,  406,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  346,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  354,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,  256,  257,  269,  270,  271,  272,  262,
   -1,   -1,   -1,   -1,  256,  257,  269,  270,  271,  272,
  262,   -1,   -1,   -1,   -1,  256,  257,  269,  270,  271,
  272,  262,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : error_expresion",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"factor : '-' CTE_INT",
"factor : '-' CTE_DBL",
"factor : ID",
"factor : invocacion",
"factor : TOF64 '(' expresion ')'",
"factor : error_factor",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"parametro_real : '-' CTE_INT",
"parametro_real : '-' CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable : BREAK ';'",
"ejecutable : BREAK ':' etiqueta ';'",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : expresion_dountil",
"$$4 :",
"ejecutable_defer : DEFER $$4 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$5 :",
"seleccion : IF condicion $$5 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$6 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$6 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$7 :",
"expresion_dountil : DO $$7 cuerpo_dountil",
"$$8 :",
"expresion_dountil : etiqueta ':' DO $$8 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$9 :",
"cuerpo_dountil : '{' ejecutables '}' UNTIL condicion $$9 cuerpo_asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$10 :",
"cuerpo_dountil_etiqueta : '{' ejecutables '}' UNTIL condicion $$10 cuerpo_asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"cuerpo_asignacion_do_until : ':' '(' asignacion_do_until ')' ';'",
"cuerpo_asignacion_do_until : error_cuerpo_asignacion_do_until",
"asignacion_do_until : ID ASSIGN expresion",
"asignacion_do_until : error_asignacion_do_until",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_declarativa : tipo ';'",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_retorno_expresion : expresion",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_termino : '*' factor",
"error_termino : termino '*' error",
"error_termino : '/' factor",
"error_termino : termino '/' error",
"error_factor : TOF64 error expresion ')'",
"error_factor : TOF64 '(' expresion error",
"error_factor : TOF64 '(' ')'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_asignacion : ID error",
"error_asignacion : ID ASSIGN error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : invocacion",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : DO error",
"error_dountil : ':' DO",
"error_dountil : etiqueta DO",
"error_cuerpo_dountil : ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : ':' asignacion_do_until ')'",
"error_cuerpo_asignacion_do_until : ':' '(' ')'",
"error_cuerpo_asignacion_do_until : ':' '(' asignacion_do_until error",
"error_asignacion_do_until : ASSIGN expresion",
"error_asignacion_do_until : ID expresion",
"error_asignacion_do_until : ID ASSIGN error",
};

//#line 592 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;
public static String nombre_funcion_invocacion = "";
public static ArrayList<String> parametros_declaracion_funcion;
public static boolean contiene_break = false;
public static Stack<Boolean> esta_do_until = new Stack<>();
public static Stack<Boolean> esta_do_until_etiqueta = new Stack<>();
public static Stack<String> etiqueta_actual = new Stack<>();

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
	this.parametros_declaracion_funcion = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
		int nro = Integer.parseInt(lexema); //SOLO SE PERMITEN NUMEROS POSITIVOS
		analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
		Main.polaca.addElementPolaca(nro);
		Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
		Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
		Main.polaca.addElementPolaca(flotante);
	}
	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}

public String ambitoReal(String nombre, String ambito){
	String lexema = nombre + "." + ambito;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	int posicion = lexema.lastIndexOf('.');
	while ((clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) && (posicion != -1)){
		lexema = lexema.substring(0, posicion);
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
		posicion = lexema.lastIndexOf('.');
	}
	return lexema;
}


public void agregarInformacionBreak(String etiqueta, int posicion){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(etiqueta + "." + this.ambito);
	String pos = String.valueOf(posicion);
	if (clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
		String atributo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "posiciones break");
		if (atributo.equals("-1")){
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", pos);
		}
		else
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", atributo + "." + pos);
	}
}

public void actualizarPolacaBreaks(){
	String etiqueta = this.etiqueta_actual.pop();
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(etiqueta + "." + this.ambito);
	if (clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
		String atributo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "posiciones break");
		if (!atributo.equals("-1")){
			int valor = -1;
			int pos = atributo.indexOf(".");
			while (pos != -1){
				valor = Integer.parseInt(atributo.substring(0, pos));
				Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, valor);
				atributo = atributo.substring(pos+1, atributo.length());
				pos = atributo.indexOf(".");
			}
			valor = Integer.parseInt(atributo);
			Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, valor);
		}
	}
}
					
					

	
	
					
					
					
//#line 1079 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 13:
//#line 41 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													if(lista_de_variables!=null){
														for(String lexema : lista_de_variables) /* por cada variable declarada*/
															incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
														lista_de_variables.clear();
													}}
break;
case 15:
//#line 53 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 57 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 60 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 67 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;
								Main.polaca.addElementPolaca(this.nombre_funcion + "." + this.ambito);
								Main.polaca.addElementPolaca("#FUN");}
break;
case 23:
//#line 74 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																	for (int i = 1; i <= parametros_declaracion_funcion.size(); i++)
																		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "parametro_" + i, this.parametros_declaracion_funcion.get(i-1));
																}
																this.parametros_declaracion_funcion.clear();
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 99 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);
								this.parametros_declaracion_funcion.add(ambitoReal(nombreParam, ambito_actual));}
break;
case 33:
//#line 110 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												Main.polaca.addElementPolaca("#RET");
												if (this.existeDefer){
													this.existeDefer = false;
													Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 34:
//#line 115 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.polaca.addElementPolaca("#RET");
									Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");
									if (this.existeDefer){
										this.existeDefer = false;
										Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 36:
//#line 124 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 41:
//#line 134 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 44:
//#line 139 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 141 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 47:
//#line 146 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 48:
//#line 148 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 51:
//#line 154 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 52:
//#line 159 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 53:
//#line 164 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									actualizarRango();}
break;
case 54:
//#line 166 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									actualizarRango();}
break;
case 55:
//#line 168 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 57:
//#line 175 "gramatica.y"
{Main.polaca.addElementPolaca("#TOF64");}
break;
case 59:
//#line 180 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
															Main.polaca.addElementPolaca("#CALL");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la funcion " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 66:
//#line 205 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 67:
//#line 211 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 68:
//#line 217 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 69:
//#line 223 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 70:
//#line 226 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 71:
//#line 231 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 72:
//#line 232 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 73:
//#line 233 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 74:
//#line 234 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 75:
//#line 235 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 76:
//#line 236 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 79:
//#line 241 "gramatica.y"
{if (!esta_do_until.isEmpty()){
										contiene_break = true;
										Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca("");
										Main.polaca.addElementPolaca("#BI");
										Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");
									}
									else
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede declarar un Break fuera de un do-until");}
break;
case 80:
//#line 250 "gramatica.y"
{if (!esta_do_until_etiqueta.isEmpty()){
													String nombre_etiqueta = val_peek(1).sval;
													/*if (etiqueta_actual.equals(nombre_etiqueta))*/
														/*contiene_break = true;*/
													/*Main.polaca.apilar(Main.polaca.getSize());*/
													agregarInformacionBreak(nombre_etiqueta, Main.polaca.getSize());
													Main.polaca.addElementPolaca("");
													Main.polaca.addElementPolaca("#BI");
													if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
														Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");
												}
												else
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede declarar un Break con Etiqueta fuera de un do-until con etiqueta");}
break;
case 86:
//#line 273 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.addElementPolaca("#DEFER");}
break;
case 87:
//#line 275 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer"); 
											Main.polaca.addElementPolaca("#FINDEFER");}
break;
case 88:
//#line 279 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 90:
//#line 288 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("#BF");}
break;
case 93:
//#line 295 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 94:
//#line 298 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("#BI");
																Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 97:
//#line 307 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 100:
//#line 317 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.polaca.addElementPolaca("#OUT");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", "cadena");}}
break;
case 102:
//#line 327 "gramatica.y"
{String id = val_peek(1).sval;
														Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
														Main.polaca.addElementPolaca("#DISCARD");
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
														if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
															Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");
														}
														else{
														if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
															Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
														}
														this.cantidad_parametros_reales = 0;}
break;
case 104:
//#line 342 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 106:
//#line 346 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
						Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
						esta_do_until.push(true);}
break;
case 108:
//#line 349 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_etiqueta + "." + this.ambito);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", "-1");
										esta_do_until_etiqueta.push(true);
										etiqueta_actual.push(nombre_etiqueta);}
break;
case 112:
//#line 364 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("#BT");
																				esta_do_until.pop();}
break;
case 113:
//#line 368 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (contiene_break){ /*Hay un Break*/
													contiene_break = false;
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 115:
//#line 379 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("#BT");
																								esta_do_until_etiqueta.pop();}
break;
case 116:
//#line 383 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												actualizarPolacaBreaks();
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 120:
//#line 397 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion en la sentencia do-until");
												String id = val_peek(2).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 122:
//#line 409 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 123:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 124:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 125:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 126:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 127:
//#line 416 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 128:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 129:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 130:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 131:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 132:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 133:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 134:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable en la declaracion");}
break;
case 135:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 136:
//#line 431 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 137:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 138:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 139:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 140:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 141:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 142:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 143:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 144:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 145:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 146:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 147:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 148:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 149:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 150:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 151:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 152:
//#line 461 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 153:
//#line 462 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 154:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion de retorno");}
break;
case 155:
//#line 467 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion de retorno");}
break;
case 156:
//#line 468 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio en la expresion de retorno");}
break;
case 157:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura y cierre de la expresion de retorno");}
break;
case 158:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 159:
//#line 474 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 160:
//#line 475 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 161:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 162:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 163:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 164:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 165:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 166:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 167:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 168:
//#line 487 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 169:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 170:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 171:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 172:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion en la conversion tof64");}
break;
case 173:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion en la conversion tof64");}
break;
case 174:
//#line 495 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion en la conversion tof64");}
break;
case 175:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 176:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 177:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 178:
//#line 503 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 179:
//#line 504 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 180:
//#line 507 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 181:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 182:
//#line 509 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 183:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 184:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, solo se define el identificador de la asignacion");}
break;
case 185:
//#line 512 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se reconoce la expresion");}
break;
case 186:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 187:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 188:
//#line 519 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 189:
//#line 520 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 190:
//#line 521 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 191:
//#line 522 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 192:
//#line 523 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 193:
//#line 524 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 194:
//#line 525 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 195:
//#line 526 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 196:
//#line 527 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 197:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 198:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 199:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 200:
//#line 533 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 201:
//#line 534 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 202:
//#line 535 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 203:
//#line 536 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 204:
//#line 537 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 205:
//#line 538 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 206:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 207:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 208:
//#line 543 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 209:
//#line 544 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 210:
//#line 545 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 211:
//#line 546 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 212:
//#line 547 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 213:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el discard antes de la invocacion a la funcion");}
break;
case 214:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 215:
//#line 554 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 216:
//#line 555 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 217:
//#line 556 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 218:
//#line 557 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 219:
//#line 561 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la sentencia do_until");}
break;
case 220:
//#line 562 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta de la sentencia do_until");}
break;
case 221:
//#line 563 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ':' en la sentencia do_until");}
break;
case 222:
//#line 567 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 223:
//#line 568 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 224:
//#line 569 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 225:
//#line 570 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 226:
//#line 571 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 227:
//#line 574 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 228:
//#line 575 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 229:
//#line 576 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 230:
//#line 577 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 231:
//#line 578 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 232:
//#line 581 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 233:
//#line 582 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 234:
//#line 583 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 235:
//#line 584 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 236:
//#line 587 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar en la sentencia do-until");}
break;
case 237:
//#line 588 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion en la sentencia do-until");}
break;
case 238:
//#line 589 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar en la sentencia do-until");}
break;
//#line 2100 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
