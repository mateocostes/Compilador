//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   30,   34,   34,   34,
   34,   36,   36,   38,   36,   39,   36,   36,   36,   40,
   40,   41,   41,   41,   41,   43,   44,   44,   44,   32,
   32,   32,   32,   32,   32,    7,    7,   46,   46,   46,
   46,   46,   53,   47,   48,   48,   56,   49,   49,   55,
   60,   55,   55,   59,   59,   58,   50,   50,   65,   51,
   51,   64,   64,   69,   52,   72,   52,   52,   70,   76,
   68,   68,   79,   71,   71,   75,   75,   74,   74,   74,
   74,   78,   78,   78,    3,    3,    5,    5,    5,    5,
    5,    5,   12,   12,   12,   12,   13,   13,   16,   16,
   20,   20,   20,   20,   20,   23,   23,   23,   23,   24,
   24,   26,   26,   28,   28,   31,   31,   31,   33,   33,
   33,   33,   33,   33,   33,   35,   35,   35,   35,   35,
   35,   37,   37,   37,   37,   42,   45,   45,   45,   45,
   54,   54,   54,   54,   57,   57,   61,   61,   61,   61,
   61,   61,   61,   61,   61,   61,   62,   62,   62,   62,
   62,   62,   63,   63,   63,   63,   63,   63,   63,   66,
   67,   67,   67,   67,   73,   73,   73,   77,   77,   77,
   77,   77,   80,   80,   80,   80,   80,   81,   81,   81,
   81,   82,   82,   82,   82,   83,   83,   83,   83,   83,
   83,   83,   83,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    4,    1,    5,    5,    1,
    1,    1,    1,    0,    3,    0,    3,    1,    1,    4,
    1,    3,    1,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    0,    3,    4,    1,    0,    4,    1,    6,
    0,    6,    1,    6,    1,    1,    5,    1,    0,    4,
    1,    4,    1,    0,    3,    0,    5,    1,    1,    0,
    7,    1,    0,    7,    1,    5,    1,    3,    1,    2,
    1,    5,    4,    1,    1,    1,    3,    1,    1,    2,
    2,    2,    2,    2,    3,    1,    3,    3,    2,    2,
    6,    6,    6,    6,    6,    5,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    4,    4,
    5,    4,    4,    3,    3,    3,    3,    3,    4,    4,
    3,    2,    2,    2,    2,    4,    5,    2,    2,    2,
    3,    3,    3,    4,    2,    3,    4,    4,    4,    4,
    5,    5,    5,    5,    5,    5,    9,    9,    9,    9,
    9,    9,    4,    4,    4,    4,    4,    1,    2,    2,
    3,    4,    3,    3,    9,   10,    2,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    7,    2,    3,    3,
    3,    1,    3,    2,    1,    4,    4,    4,    4,    3,
    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  129,    0,  126,    3,    5,    0,    0,
    0,    0,    0,    0,   15,    0,   16,    0,  104,   83,
    0,    0,    0,    0,    0,    0,    0,    0,   14,   19,
   22,   76,   77,   78,   79,   80,   81,   82,   86,   89,
   98,  101,    0,  108,    0,  130,    0,  139,    0,    0,
    0,    0,    0,   52,   53,    0,    0,    0,    0,    0,
    0,    0,   47,   50,   51,   59,   61,  209,    0,    0,
    0,    0,    0,   42,  185,   93,    0,    0,  140,   20,
    0,  210,   99,    0,    0,    0,  217,  127,    6,    7,
   12,    0,   17,    0,  134,    0,    0,    0,    2,    4,
    0,    0,    0,  232,   11,    0,    0,  121,  137,  135,
    0,    0,  183,    0,    0,    0,   54,   56,  172,  174,
    0,    0,  182,    0,    0,    0,    0,    0,    0,    0,
   71,   70,   75,   72,   73,   74,    0,    0,  186,    0,
    0,    0,    0,    0,    0,  181,    0,    0,  105,    0,
  112,   84,    0,   13,  138,   18,    0,  106,  120,    0,
    0,   10,    0,    0,   67,   68,   69,    0,    0,    0,
    0,   65,  184,   85,    0,  171,    0,   55,   57,  166,
    0,  167,    0,    0,    0,    0,    0,    0,    0,  164,
    0,    0,    0,   88,    0,  204,  205,    0,  207,    0,
    0,    0,    0,   21,    0,   25,    0,    0,   29,   32,
    0,    0,  100,  103,    0,    0,    0,  203,    0,    0,
    0,    0,  124,    0,  233,  118,    0,  178,  176,   60,
    0,  180,  169,  170,   46,    0,    0,    0,    0,    0,
  189,   95,    0,    0,  190,    0,  188,    0,  187,    0,
  162,    0,  160,  159,   97,  150,  147,    0,  151,   31,
    0,    0,  149,    0,    0,    0,    0,    0,    0,    0,
  109,    0,    0,    0,    0,    0,    0,    0,  107,    0,
  115,    0,    0,   48,   49,    0,    0,  193,  194,    0,
  195,    0,  192,  191,  161,   41,    0,    0,    0,    0,
    0,  213,    0,  211,    0,    0,    0,    0,    0,  242,
    0,  241,  240,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   90,   92,    0,    0,    0,    0,
    0,  212,  102,    0,    0,    0,  110,    0,    0,  123,
  238,    0,  237,  236,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  117,  177,    0,    0,    0,    0,    0,
    0,    0,  146,    0,    0,    0,    0,    0,    0,  122,
    0,    0,    0,    0,    0,    0,    0,    0,  228,  215,
    0,    0,    0,    0,    0,    0,  144,    0,   35,   37,
   23,  145,  143,  142,  141,  219,  220,  222,  111,  221,
  218,    0,    0,    0,    0,  113,    0,    0,  230,    0,
  229,    0,    0,    0,   94,  153,  155,    0,    0,   38,
    0,   40,    0,  152,   34,    0,  216,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  158,    0,
   36,  156,   33,   24,  224,  225,  227,  114,  226,  223,
  116,    0,    0,    0,    0,    0,   39,  199,  200,  202,
  201,  198,  197,
};
final static short yydgoto[] = {                          5,
    6,   45,    7,  386,    8,   24,  105,  127,   26,   27,
   28,   29,   30,  204,  145,   31,  205,  387,  426,  206,
  207,  208,  209,  210,  388,  389,  419,  390,   72,   73,
  422,  138,   74,   62,   63,   64,   65,  178,  179,   66,
  169,   67,  170,  171,  172,   32,   33,   34,   35,   36,
   37,   38,   85,   39,   75,  140,   40,  128,  241,  292,
   76,  242,   41,  213,  147,   42,  214,  149,   84,   43,
  279,  224,   44,  107,  353,  367,  151,  222,  431,  281,
  354,  108,  223,
};
final static short yysindex[] = {                       243,
  316,    0,  382,    0,    0,    0,    0,    0,   37,  766,
  -16,  -20,  -31, -129,    0,  869,    0,  -32,    0,    0,
 -204, -183,  -27,  316,  316,   59,  158,   60,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -50,    0,  -56,    0,   63,    0,  457,  -77,
  156,  163,  204,    0,    0,  905,   -2,  273,  348,  348,
  475,  111,    0,    0,    0,    0,    0,    0,  627,  786,
  938,   54,  958,    0,    0,    0,  214,   -7,    0,    0,
  559,    0,    0,  529,  147,  295,    0,    0,    0,    0,
    0,  298,    0,  113,    0,  172,  222,   74,    0,    0,
  249,  766,  343,    0,    0,  662,  285,    0,    0,    0,
 1038,  309,    0,  107,  869,  830,    0,    0,    0,    0,
  809,  989,    0,  377,  402,  685,  786,  351,  364,  865,
    0,    0,    0,    0,    0,    0,  958,  869,    0,  -68,
  869,  414,   55,  439,  -25,    0,  206,  558,    0,  392,
    0,    0,  485,    0,    0,    0,  699,    0,    0,   11,
  486,    0,  290,  111,    0,    0,    0,  299,    4,  338,
    0,    0,    0,    0,  332,    0,   34,    0,    0,    0,
  111,    0,  111,  348,  348,  416,  -88,  465,  478,    0,
    5,  879,  625,    0,  631,    0,    0,  502,    0,  267,
 -190,   56,  195,    0,  533,    0,   81,    0,    0,    0,
  269,  534,    0,    0,  311,  -93,  314,    0,  -41, -203,
  713,  466,    0,  589,    0,    0,  162,    0,    0,    0,
  299,    0,    0,    0,    0,  562,  571,  476,  477,  554,
    0,    0,  565,  -29,    0,  577,    0,  581,    0,  600,
    0,  632,    0,    0,    0,    0,    0,  121,    0,    0,
  586, -190,    0,  604,   92,  587,  162,  162,   40,  162,
    0,  -38,  595,  596,  -40, -203,  387,  613,    0,  532,
    0,  605,  637,    0,    0,  786,  786,    0,    0,  610,
    0,  241,    0,    0,    0,    0,  -42, -107, -107,  638,
  628,    0,  635,    0,  626,  633,   50,  646,  647,    0,
  636,    0,    0,   43,  648,  652,  162,  411,  -86,  415,
   66,  440,  590,  591,    0,    0,  -90,  598,  599,  601,
  463,    0,    0,   66,   66,   66,    0,   66,   66,    0,
    0,  672,    0,    0,  674,  162,  162,   75,  162,  766,
   -5,  677,  678,    0,    0,  -71,  484,  432,  354,  432,
  432,  432,    0,  690,  692,  693,   66,  695,  696,    0,
   66,  698,  703,  280,  704,  705,   32,  723,    0,    0,
  736,  786,  706,  -34,  322,  501,    0,   46,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  711,   66,   66,   66,    0,   66,   66,    0,  731,
    0,  772,  650,  653,    0,    0,    0,  488,  714,    0,
  739,    0,  654,    0,    0,  432,    0,  718,  724,  728,
   66,  729,  732,  733,  539,  -67,  540,  545,    0, 1057,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  734,  737,   24,  738,  757,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   31,  817,    0,    0,    0,    0,    0,    0,  -30,
  123,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  820,   12,   13,  245,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  821,    0,    0,    0,
    0,    0, 1032,    0,    0,    0,    0,    0,    0,    0,
    0, 1131,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -64,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  286,    0,    0,    0,    0,    0,    0,
    0,  -47,  -85,    0,    0,  -84,    0,    0,    0,    0,
    0,   58,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1054, 1109,    0,  363,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  781,    0,  782,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -76,    0,    0, 1142,    0,    0,    0,    0,    0,    0,
 1017,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1182,    0, 1210,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  512,    0,    0,  170,    0,    0,
    0,  127,    0,    0,    0,    0,    0,   72,    0,    0,
  118,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -15,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  278,    0,    0,    0,    0,    0,    0,
    0, 1082,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  128,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    1,    0,    0,    0,    0,    0,    0,  193,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  307,
    0,    0,  218,    0,    0,    0,    0,    0,    0,    0,
  -72,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -62,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
    0,    0,    0,    0,    0,    0,    0,    0,   48,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   83,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,
};
final static short yygindex[] = {                         0,
  780,    0,    0,  140,    0,    0,   -1,  -13,    0,   -6,
  801,    0,    0,    0,    0,    0,  630, -214,    0,    0,
    0, -150,    0,    0,  443,    0,    0,    0, 1088,   -9,
    0,  -69,    0,  284,    0,  449,    0,    0,    0,    0,
  -75,    0,    0,  -82,    0,  748,    0, 1094,    0,    0,
    0,    0,    0,    0,  697,    0,    0,  -65,  -78,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  389,
    0,    0,    0,   -8, 1149,    0,    0, -123,    0,    0,
    0,    0,    0,
};
final static int YYTABLESIZE=1580;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         25,
   61,   25,   51,  141,  129,  231,   81,   98,   78,   50,
  109,    8,    9,   17,  202,  327,  272,  314,  201,   71,
  310,   59,   25,   25,   58,  179,   60,  109,   17,  291,
  125,  269,  358,  144,  377,  106,  244,  116,  348,  235,
  119,   62,   68,  179,  230,  231,  114,  121,  234,  122,
  257,  382,  243,  271,   70,   86,  263,  454,   87,   62,
  187,  137,  239,  231,  231,  200,    3,  192,    4,  225,
  106,  212,  409,   87,  235,  150,  121,   15,  122,   71,
   50,   59,  461,   17,   58,  228,   60,  232,   49,   71,
  416,   59,   61,   87,   58,  198,   60,   88,   64,  201,
  280,  341,   70,   96,  162,  175,  177,  336,  245,  247,
  249,  300,   27,  197,   71,   30,   59,   91,   95,   58,
  191,   60,  208,  351,  262,  162,   79,   80,  193,   27,
  231,  195,  303,   49,  106,  265,    8,    9,  203,  216,
   23,  157,   47,  221,  392,  393,  394,  395,  283,  121,
  302,  122,  124,    1,  319,    1,   96,  125,   64,   49,
   15,  297,  208,   89,   90,  174,   17,   28,  148,  206,
  425,  154,  154,  238,  239,  243,   64,   15,  298,  109,
  208,  268,  252,   17,   28,  148,   21,  100,  347,  235,
  119,  381,  196,   69,  203,  203,  453,   87,  234,    1,
  203,   71,  243,   59,   22,  111,   58,  157,   60,  206,
  221,  444,  239,  326,  110,  271,  271,  214,  271,  162,
  323,  324,   48,   82,   83,   15,   97,  206,   77,  109,
  200,   17,  196,   15,  290,   52,   53,   54,   55,   17,
  179,   69,   15,  112,  136,  211,  109,  208,   17,  168,
  196,  350,  143,  115,  142,  203,   62,  214,   57,  229,
  250,  231,  231,   16,  221,  231,  231,  231,  231,  231,
  231,  231,  231,  231,  231,  214,    8,    9,  231,  231,
  231,  231,  231,  231,  136,  133,    1,  460,  350,  234,
  328,  329,  330,   48,  206,   52,   53,   54,   55,  271,
   16,  424,  136,  154,   15,   52,   53,   54,   55,  139,
   17,  200,  168,   64,  307,  413,  414,  196,   57,   71,
  359,   59,  350,   15,   58,  133,   60,   30,   57,   17,
   52,   53,   54,   55,   16,  153,  200,  405,  157,   30,
   61,   50,  214,  133,  157,   30,  436,   26,   15,  374,
  158,  141,  168,   57,   17,   21,   25,   25,   25,   25,
   25,  418,  173,   59,   26,    3,   58,    4,   60,  136,
  192,   49,  233,   22,  121,  421,  122,   51,  208,  208,
  417,  231,  208,  208,  208,  208,  208,  208,  208,  208,
  208,  208,   58,   21,  164,  208,  208,  208,  208,  208,
  208,  159,  101,  102,  181,  183,   11,   12,  440,  163,
  133,   22,   13,   92,   93,   16,  184,   52,   53,   54,
   55,   21,   18,   19,   25,  206,  206,  155,  156,  206,
  206,  206,  206,  206,  206,  206,  206,  206,  206,   22,
   57,  185,  206,  206,  206,  206,  206,  206,  196,  196,
  259,  260,  196,  196,  196,  196,  196,  196,  196,  196,
  196,  196,  165,  166,  167,  196,  196,  196,  196,  196,
  196,   21,  196,  214,  214,  188,  391,  214,  214,  214,
  214,  214,  214,  214,  214,  214,  214,   96,  189,   22,
  214,  214,  214,  214,  214,  214,   21,  199,    1,    2,
  136,  136,  238,  239,  136,  136,   46,  119,  120,  136,
  136,  136,  136,  136,   22,  104,  217,  121,  136,  122,
  136,  136,  136,  256,  264,  165,  166,  167,  439,   59,
  117,  118,   58,  123,   60,   52,   53,   54,   55,   91,
   91,  133,  133,  218,  226,  133,  133,  135,  134,  136,
  133,  133,  133,  133,  133,  165,  166,  167,   57,  133,
  255,  133,  133,  133,  227,  165,  166,  167,   21,  165,
  165,    9,   10,  261,  266,   11,   12,   52,   53,   54,
   55,   13,   14,   15,   16,  267,   22,  104,  270,   17,
  277,   18,   19,   20,  165,  166,  167,   21,  286,  287,
   57,  121,  284,  122,   53,   54,   55,  273,  274,  384,
   10,  285,  288,   11,   12,   22,  104,  146,  385,   13,
   14,   15,   16,  289,   96,   96,   96,   17,   21,   18,
   19,   20,  236,  237,  165,  293,  165,    9,   10,  294,
  295,   11,   12,  299,  301,  304,  220,   13,   14,   15,
   16,  148,   21,  312,  313,   17,  320,   18,   19,   20,
  311,  317,  321,  315,  316,  253,   21,  121,  325,  122,
  220,  254,  296,  121,  121,  122,  122,  238,  239,  240,
  322,  331,  215,  334,   22,  346,  332,  384,   10,  349,
  335,   11,   12,  333,  340,  355,  385,   13,   14,   15,
   16,   21,  342,  338,  339,   17,  343,   18,   19,   20,
  344,  278,  101,  102,  356,  357,   11,   12,  363,   22,
  360,  361,   13,  362,   21,   16,  238,  239,  246,  103,
  370,  371,   18,   19,   20,  379,  380,  318,   21,  238,
  239,  248,   22,  130,   53,   54,   55,  383,  396,  126,
  397,  398,   21,  400,  401,  403,  220,  131,  132,  133,
  404,  407,  408,  411,  415,  385,   57,  165,  165,  427,
  276,  434,  441,  165,  437,   21,  445,  438,  443,  442,
  165,  121,  446,  122,  101,  102,  447,  449,   11,   12,
  450,  451,  458,   22,   13,  459,  462,   16,  135,  134,
  136,  103,  452,  455,   18,   19,   20,   59,  456,  186,
   58,   21,   60,  101,  102,  463,  128,   11,   12,  131,
  132,   28,   64,   13,   99,   21,   16,   94,  423,   22,
  103,  258,  152,   18,   19,   20,  194,    0,    0,    0,
    0,    0,    0,   22,  101,  102,    0,    0,   11,   12,
   59,    0,    0,   58,   13,   60,    0,   16,  412,    0,
    0,  219,    0,    0,   18,   19,   20,    0,  101,  102,
  176,   59,   11,   12,   58,    0,   60,    0,   13,    0,
    0,   16,  101,  102,    0,  219,   11,   12,   18,   19,
   20,    0,   13,    0,    0,   16,  435,    0,    0,    0,
    0,    0,   18,   19,   20,  190,   59,  111,    0,   58,
   59,   60,    0,   58,    0,   60,    0,  160,  102,  251,
   59,   11,   12,   58,    0,   60,    0,   13,    0,    0,
   16,    0,    0,    0,  161,    0,    0,   18,   19,   20,
  101,  102,    0,    0,   11,   12,   59,    0,    0,   58,
   13,   60,    0,   16,  101,  102,    0,    0,   11,   12,
   18,   19,   20,  113,   13,    0,    0,   16,  101,  102,
    0,  219,   11,   12,   18,   19,   20,    0,   13,   59,
    0,   16,   58,    0,   60,  275,    0,    0,   18,   19,
   20,  101,  102,    0,    0,   11,   12,  135,  134,  136,
  121,   13,  122,    0,   16,    0,    0,    0,  131,  132,
  133,   18,   19,   20,    0,    0,    0,  135,  134,  136,
    0,   52,   53,   54,   55,    0,    0,  101,  102,    0,
   59,   11,   12,   58,   56,   60,    0,   13,    0,    0,
   16,  101,  102,    0,   57,   11,   12,   18,   19,   20,
    0,   13,    0,    0,   16,    0,    0,   63,    0,    0,
   66,   18,   19,   20,  180,   53,   54,   55,    0,    0,
    0,    0,   58,   58,   58,   63,   58,    0,   58,   59,
    0,    0,   58,    0,   60,   52,   53,   54,   55,   58,
   58,   58,   58,   58,  173,  173,  173,  457,  173,  121,
  173,  122,    0,    0,    0,    0,    0,    0,   57,    0,
    0,  173,  173,  173,  173,  173,  135,  134,  136,    0,
   52,   53,   54,   55,   52,   53,   54,   55,    0,    0,
    0,    0,    0,    0,   52,   53,   54,   55,    0,  163,
  163,    0,    0,   57,    0,    0,    0,   57,    0,  175,
  175,  175,    0,  175,   58,  175,   58,   57,    0,    0,
   52,   53,   54,   55,    0,    0,  175,  175,  175,  175,
  175,   43,    0,   43,    0,   43,  173,    0,  173,    0,
    0,    0,  168,   57,  168,    0,  168,    0,   43,   43,
   43,   43,   43,  130,   53,   54,   55,    0,    0,  168,
  168,  168,  168,  168,  163,    0,  163,  131,  132,  133,
    0,    0,    0,    0,    0,    0,   57,    0,    0,    0,
    0,    0,   44,    0,   44,    0,   44,  131,  132,  133,
    0,  175,    0,  175,    0,    0,    0,    0,    0,   44,
   44,   44,   44,   44,  182,   53,   54,   55,    0,    0,
   45,    0,   45,   43,   45,   43,    0,    0,    0,    0,
    0,    0,    0,    0,  168,    0,  168,   45,   45,   45,
   45,   45,   63,   66,   66,   66,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   58,   58,    0,
    0,    0,    0,   58,   53,   54,   55,    0,    0,    0,
   58,   58,   58,   58,   44,    0,   44,    0,    0,  173,
  173,    0,    0,    0,  282,  173,    0,    0,    0,    0,
    0,    0,  173,  173,  173,  173,  131,  132,  133,    0,
    0,    0,   45,    0,   45,    0,    0,  163,  163,    0,
    0,    0,    0,  163,    0,    0,    0,    0,    0,    0,
  163,    0,    0,    0,  305,  306,  308,  309,    0,    0,
    0,    0,    0,    0,  175,  175,    0,    0,    0,    0,
  175,    0,    0,    0,    0,    0,    0,  175,  175,  175,
  175,    0,    0,    0,    0,    0,   43,   43,    0,    0,
    0,    0,   43,    0,  337,    0,    0,  168,  168,   43,
   43,   43,   43,  168,  345,    0,    0,    0,    0,    0,
  168,  168,  168,  168,  352,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  352,  352,  352,
    0,  352,  352,  372,  373,  375,  376,   44,   44,    0,
    0,    0,    0,   44,  378,    0,    0,    0,    0,    0,
   44,   44,   44,   44,    0,    0,    0,    0,    0,    0,
  352,  406,    0,    0,  352,   45,   45,    0,    0,    0,
  410,   45,  420,    0,    0,    0,    0,    0,   45,   45,
   45,   45,  364,  365,  366,    0,  368,  369,    0,    0,
    0,    0,    0,    0,    0,    0,  352,  352,  352,    0,
  352,  352,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  399,    0,    0,    0,  402,
    0,    0,    0,    0,  352,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  428,  429,  430,    0,  432,  433,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  448,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
   10,    3,    9,   73,   70,    0,   16,   58,   40,   44,
   58,    0,    0,   44,   40,   58,   58,   58,   44,   40,
   59,   42,   24,   25,   45,   41,   47,   58,   59,   59,
    0,  125,  123,   41,   40,   49,  125,   40,  125,  125,
  125,   41,   59,   59,   41,   40,   56,   43,  125,   45,
  201,  123,  125,  257,  123,  260,  207,  125,  123,   59,
  126,   71,  125,   58,   59,  256,  123,  137,  125,   59,
   84,  147,   41,  277,   41,   84,   43,  268,   45,   40,
   44,   42,   59,  274,   45,  168,   47,  170,  123,   40,
  125,   42,  102,  277,   45,   41,   47,  125,   41,   44,
  224,   59,  123,   44,  106,  115,  116,   58,  187,  188,
  189,  262,   41,   59,   40,   44,   42,   59,   59,   45,
  130,   47,    0,   58,   44,  127,  256,  257,  138,   58,
  125,  141,   41,  123,  148,  211,  125,  125,  145,  148,
    1,   59,    3,  157,  359,  360,  361,  362,  231,   43,
   59,   45,   42,  123,  278,  125,   44,   47,   41,  123,
  268,   41,   40,   24,   25,   59,  274,   41,   41,    0,
  125,   59,  125,  262,  263,  264,   59,  268,   58,  257,
   58,  275,  192,  274,   58,   58,   40,  125,  275,  275,
  275,  263,    0,  262,  201,  202,  264,  262,  275,  256,
  207,   40,  275,   42,   58,   43,   45,  125,   47,   40,
  224,  426,  275,  292,   59,  257,  257,    0,  257,  221,
  286,  287,  257,  256,  257,  268,  277,   58,  260,  277,
  256,  274,   40,  268,  264,  256,  257,  258,  259,  274,
  256,  262,  268,   40,    0,   40,  277,  125,  274,   44,
   58,  257,  260,  256,   41,  262,  256,   40,  279,  256,
  256,  256,  257,  269,  278,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,   58,  265,  265,  273,  274,
  275,  276,  277,  278,   40,    0,  256,  264,  257,  256,
  297,  298,  299,  257,  125,  256,  257,  258,  259,  257,
  269,  256,   58,  256,  268,  256,  257,  258,  259,  256,
  274,  256,   44,  256,  275,  381,  382,  125,  279,   40,
  327,   42,  257,  268,   45,   40,   47,  256,  279,  274,
  256,  257,  258,  259,  269,   41,  256,   58,  256,  268,
  350,   44,  125,   58,  123,  274,  412,   41,  268,  275,
  277,  421,   44,  279,  274,   40,  358,  359,  360,  361,
  362,   40,  256,   42,   58,  123,   45,  125,   47,  125,
  440,  123,   41,   58,   43,  385,   45,  384,  256,  257,
   59,   44,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,   45,   40,  111,  273,  274,  275,  276,  277,
  278,   59,  256,  257,  121,  122,  260,  261,  418,  125,
  125,   58,  266,  256,  257,  269,   40,  256,  257,  258,
  259,   40,  276,  277,  426,  256,  257,  256,  257,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   58,
  279,   40,  273,  274,  275,  276,  277,  278,  256,  257,
  256,  257,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  257,  258,  259,  273,  274,  275,  276,  277,
  278,   40,   59,  256,  257,  125,  123,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  125,  125,   58,
  273,  274,  275,  276,  277,  278,   40,   59,  256,  257,
  256,  257,  262,  263,  260,  261,  125,   59,   60,  265,
  266,  267,  268,  269,   58,   59,  125,   43,  274,   45,
  276,  277,  278,  257,  256,  257,  258,  259,   41,   42,
  258,  259,   45,   59,   47,  256,  257,  258,  259,  262,
  263,  256,  257,   59,   59,  260,  261,   60,   61,   62,
  265,  266,  267,  268,  269,  257,  258,  259,  279,  274,
   59,  276,  277,  278,  275,  257,  258,  259,   40,   58,
   59,  256,  257,   41,   41,  260,  261,  256,  257,  258,
  259,  266,  267,  268,  269,  275,   58,   59,  275,  274,
  125,  276,  277,  278,  257,  258,  259,   40,  123,  123,
  279,   43,   41,   45,  257,  258,  259,  219,  220,  256,
  257,   41,   59,  260,  261,   58,   59,   59,  265,  266,
  267,  268,  269,   59,  262,  263,  264,  274,   40,  276,
  277,  278,  184,  185,  123,   59,  125,  256,  257,   59,
   41,  260,  261,   58,   41,   59,   58,  266,  267,  268,
  269,  123,   40,   59,   59,  274,  125,  276,  277,  278,
  272,  275,   58,  275,  276,   41,   40,   43,   59,   45,
   58,   41,   41,   43,   43,   45,   45,  262,  263,  264,
   44,   44,  125,   58,   58,  275,   59,  256,  257,  275,
   58,  260,  261,   59,   59,  256,  265,  266,  267,  268,
  269,   40,  314,   58,   58,  274,   59,  276,  277,  278,
   59,  123,  256,  257,  125,  125,  260,  261,  256,   58,
  123,  123,  266,  123,   40,  269,  262,  263,  264,  273,
   59,   58,  276,  277,  278,   59,   59,  125,   40,  262,
  263,  264,   58,  256,  257,  258,  259,  264,   59,  123,
   59,   59,   40,   59,   59,   58,   58,  270,  271,  272,
   58,   58,   58,   41,   59,  265,  279,  256,  257,   59,
   58,   41,   59,  262,  125,   40,   59,  125,  125,   41,
  269,   43,   59,   45,  256,  257,   59,   59,  260,  261,
   59,   59,   59,   58,  266,   59,   59,  269,   60,   61,
   62,  273,  264,  264,  276,  277,  278,   42,  264,  125,
   45,   40,   47,  256,  257,   59,    0,  260,  261,    0,
    0,   41,   41,  266,   45,   40,  269,   27,  386,   58,
  273,  202,   85,  276,  277,  278,  140,   -1,   -1,   -1,
   -1,   -1,   -1,   58,  256,  257,   -1,   -1,  260,  261,
   42,   -1,   -1,   45,  266,   47,   -1,  269,  123,   -1,
   -1,  273,   -1,   -1,  276,  277,  278,   -1,  256,  257,
   41,   42,  260,  261,   45,   -1,   47,   -1,  266,   -1,
   -1,  269,  256,  257,   -1,  273,  260,  261,  276,  277,
  278,   -1,  266,   -1,   -1,  269,  125,   -1,   -1,   -1,
   -1,   -1,  276,  277,  278,   41,   42,   43,   -1,   45,
   42,   47,   -1,   45,   -1,   47,   -1,  256,  257,   41,
   42,  260,  261,   45,   -1,   47,   -1,  266,   -1,   -1,
  269,   -1,   -1,   -1,  273,   -1,   -1,  276,  277,  278,
  256,  257,   -1,   -1,  260,  261,   42,   -1,   -1,   45,
  266,   47,   -1,  269,  256,  257,   -1,   -1,  260,  261,
  276,  277,  278,   59,  266,   -1,   -1,  269,  256,  257,
   -1,  273,  260,  261,  276,  277,  278,   -1,  266,   42,
   -1,  269,   45,   -1,   47,  273,   -1,   -1,  276,  277,
  278,  256,  257,   -1,   -1,  260,  261,   60,   61,   62,
   43,  266,   45,   -1,  269,   -1,   -1,   -1,  270,  271,
  272,  276,  277,  278,   -1,   -1,   -1,   60,   61,   62,
   -1,  256,  257,  258,  259,   -1,   -1,  256,  257,   -1,
   42,  260,  261,   45,  269,   47,   -1,  266,   -1,   -1,
  269,  256,  257,   -1,  279,  260,  261,  276,  277,  278,
   -1,  266,   -1,   -1,  269,   -1,   -1,   41,   -1,   -1,
   44,  276,  277,  278,  256,  257,  258,  259,   -1,   -1,
   -1,   -1,   41,   42,   43,   59,   45,   -1,   47,   42,
   -1,   -1,   45,   -1,   47,  256,  257,  258,  259,   58,
   59,   60,   61,   62,   41,   42,   43,   41,   45,   43,
   47,   45,   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,
   -1,   58,   59,   60,   61,   62,   60,   61,   62,   -1,
  256,  257,  258,  259,  256,  257,  258,  259,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,  258,  259,   -1,   58,
   59,   -1,   -1,  279,   -1,   -1,   -1,  279,   -1,   41,
   42,   43,   -1,   45,  123,   47,  125,  279,   -1,   -1,
  256,  257,  258,  259,   -1,   -1,   58,   59,   60,   61,
   62,   41,   -1,   43,   -1,   45,  123,   -1,  125,   -1,
   -1,   -1,   41,  279,   43,   -1,   45,   -1,   58,   59,
   60,   61,   62,  256,  257,  258,  259,   -1,   -1,   58,
   59,   60,   61,   62,  123,   -1,  125,  270,  271,  272,
   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,   -1,
   -1,   -1,   41,   -1,   43,   -1,   45,  270,  271,  272,
   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   58,
   59,   60,   61,   62,  256,  257,  258,  259,   -1,   -1,
   41,   -1,   43,  123,   45,  125,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,   -1,  125,   58,   59,   60,
   61,   62,  256,  257,  258,  259,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,  262,  257,  258,  259,   -1,   -1,   -1,
  269,  270,  271,  272,  123,   -1,  125,   -1,   -1,  256,
  257,   -1,   -1,   -1,  227,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,  271,  272,  270,  271,  272,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  269,   -1,   -1,   -1,  267,  268,  269,  270,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,
  262,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,  262,   -1,  307,   -1,   -1,  256,  257,  269,
  270,  271,  272,  262,  317,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,  321,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  334,  335,  336,
   -1,  338,  339,  346,  347,  348,  349,  256,  257,   -1,
   -1,   -1,   -1,  262,  351,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
  367,  374,   -1,   -1,  371,  256,  257,   -1,   -1,   -1,
  377,  262,  385,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,  334,  335,  336,   -1,  338,  339,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  403,  404,  405,   -1,
  407,  408,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  367,   -1,   -1,   -1,  371,
   -1,   -1,   -1,   -1,  431,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  403,  404,  405,   -1,  407,  408,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  431,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$4 :",
"factor : '-' CTE_INT $$4",
"$$5 :",
"factor : '-' CTE_DBL $$5",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"$$6 :",
"ejecutable_defer : DEFER $$6 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$7 :",
"seleccion : IF condicion $$7 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$8 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$8 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"$$9 :",
"invocacion_discard : DISCARD ID $$9 parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$10 :",
"expresion_dountil : DO $$10 cuerpo_dountil",
"$$11 :",
"expresion_dountil : etiqueta ':' DO $$11 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$12 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$12 asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$13 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$13 asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : ':' '(' asignacion ')' ';'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_asignacion_do_until : asignacion ';'",
"error_asignacion_do_until : ':' asignacion ')'",
"error_asignacion_do_until : ':' '(' ')'",
"error_asignacion_do_until : ':' '(' asignacion",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 557 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
	  Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
	  Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
	}
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}
					
					

	
	
					
					
					
//#line 1023 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
												Main.polaca.addElementPolaca("JBD");}}
break;
case 13:
//#line 43 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													for(String lexema : lista_de_variables) /* por cada variable declarada*/
														incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
													lista_de_variables.clear();}
break;
case 15:
//#line 53 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 57 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 60 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 67 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;}
break;
case 23:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "nombre de funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 93 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);}
break;
case 33:
//#line 103 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												if (this.existeDefer){
													this.existeDefer = false;
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
													Main.polaca.addElementPolaca("JBD");}}
break;
case 34:
//#line 109 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");
									if (this.existeDefer){
										this.existeDefer = false;
										Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
										Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
										Main.polaca.addElementPolaca("JBD");}}
break;
case 36:
//#line 119 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 41:
//#line 129 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 44:
//#line 134 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 136 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 48:
//#line 142 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 49:
//#line 144 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 52:
//#line 150 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 53:
//#line 155 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 54:
//#line 160 "gramatica.y"
{actualizarRango();}
break;
case 55:
//#line 160 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									String cte = yyval.sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 56:
//#line 165 "gramatica.y"
{actualizarRango();}
break;
case 57:
//#line 165 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									String cte = yyval.sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 58:
//#line 170 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 60:
//#line 179 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(id);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 67:
//#line 203 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 68:
//#line 209 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 69:
//#line 210 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 70:
//#line 213 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 71:
//#line 214 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 72:
//#line 215 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 73:
//#line 216 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 74:
//#line 217 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 75:
//#line 218 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 83:
//#line 232 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.apilar(Main.polaca.getSize() + 2); /*Se apila para marcar el inicio del defer*/
								Main.polaca.apilar(Main.polaca.getSize()); /*Se apila para continuar la ejecutacion y luego ir al defer*/
								Main.polaca.addElementPolaca(""); 
								Main.polaca.addElementPolaca("JED");}
break;
case 84:
//#line 237 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer");
											Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
											Main.polaca.apilar(Main.polaca.getSize());
											Main.polaca.addElementPolaca(""); 
											Main.polaca.addElementPolaca("JS");}
break;
case 85:
//#line 244 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(id);
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 87:
//#line 253 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 90:
//#line 260 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 91:
//#line 262 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 94:
//#line 270 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 97:
//#line 279 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "cadena");}}
break;
case 99:
//#line 288 "gramatica.y"
{String id = val_peek(1).sval;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 102:
//#line 295 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 104:
//#line 299 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 106:
//#line 300 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);}
break;
case 110:
//#line 310 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 111:
//#line 313 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("BF");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 113:
//#line 322 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 114:
//#line 325 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("BF");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 118:
//#line 339 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 120:
//#line 344 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 122:
//#line 352 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");
																					String nombre_etiqueta = val_peek(1).sval;
																					if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																						Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");}
break;
case 123:
//#line 360 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");
																		String nombre_etiqueta = val_peek(1).sval;
																		if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");}
break;
case 125:
//#line 372 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 126:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 127:
//#line 376 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 128:
//#line 377 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 129:
//#line 378 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 130:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 131:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 132:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 133:
//#line 385 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 134:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 135:
//#line 387 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 136:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 137:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 138:
//#line 393 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 139:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 140:
//#line 398 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 141:
//#line 401 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 142:
//#line 402 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 143:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 144:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 145:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 146:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 147:
//#line 409 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 148:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 149:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 150:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 151:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 152:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 153:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 154:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 155:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 156:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion");}
break;
case 157:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion");}
break;
case 158:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio");}
break;
case 159:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 160:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 161:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 162:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 163:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 164:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 165:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 166:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 167:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 168:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 169:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion");}
break;
case 170:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion");}
break;
case 171:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion");}
break;
case 172:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 173:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 174:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 175:
//#line 454 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 176:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 177:
//#line 460 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 178:
//#line 461 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 179:
//#line 462 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 180:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 181:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 182:
//#line 467 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 183:
//#line 468 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 184:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 185:
//#line 472 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 186:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 187:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 188:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 189:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 190:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 191:
//#line 480 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 192:
//#line 481 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 193:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 194:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 195:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 196:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 197:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 198:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 199:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 200:
//#line 491 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 201:
//#line 492 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 202:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 203:
//#line 496 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 204:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 205:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 206:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 207:
//#line 500 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 208:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 209:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 210:
//#line 505 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 211:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 212:
//#line 509 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 213:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 214:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 215:
//#line 514 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el do en la sentencia do_until");}
break;
case 216:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 217:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 218:
//#line 520 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 219:
//#line 521 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 220:
//#line 522 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 221:
//#line 523 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 222:
//#line 524 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 223:
//#line 527 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 224:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 225:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 226:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 227:
//#line 531 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 228:
//#line 534 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 229:
//#line 535 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 230:
//#line 536 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 231:
//#line 537 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 232:
//#line 540 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 233:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia ejecutable");}
break;
case 234:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 235:
//#line 543 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 236:
//#line 546 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia");}
break;
case 237:
//#line 547 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 238:
//#line 548 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 239:
//#line 549 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 240:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break antes del ':'");}
break;
case 241:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 242:
//#line 552 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 243:
//#line 553 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
//#line 2012 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
