//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    6,
    6,    7,    7,    8,    8,    8,   11,   11,   12,   12,
   12,   17,   10,   10,   15,   15,   15,   15,   19,   20,
   20,   16,   16,   16,   23,   23,   25,   25,   25,   27,
   27,   28,   28,   28,   28,   28,   32,   32,   32,   32,
   34,   34,   36,   34,   37,   34,   34,   34,   38,   38,
   39,   39,   39,   39,   41,   42,   42,   42,   30,   30,
   30,   30,   30,   30,    9,    9,   44,   44,   44,   44,
   44,   45,   46,   46,   53,   47,   47,   52,   57,   52,
   52,   56,   56,   55,   48,   48,   49,   49,   63,   50,
   66,   50,   50,   64,   69,   62,   62,   73,   65,   65,
   70,   70,   68,   68,   68,   68,   72,   72,   72,    3,
    3,    5,    5,    5,    5,    5,    5,   13,   13,   13,
   13,   14,   14,   18,   18,   18,   18,   18,   18,   18,
   21,   21,   21,   21,   22,   22,   24,   24,   26,   26,
   29,   29,   29,   31,   31,   31,   31,   31,   31,   31,
   33,   33,   33,   33,   33,   33,   35,   35,   35,   35,
   40,   43,   43,   43,   43,   51,   51,   51,   51,   54,
   54,   58,   58,   58,   58,   58,   58,   58,   58,   58,
   58,   59,   59,   59,   59,   59,   59,   60,   60,   60,
   60,   60,   61,   61,   61,   61,   67,   67,   67,   71,
   71,   71,   71,   71,   71,   74,   74,   74,   74,   74,
   74,   75,   75,   75,   76,   76,   76,   76,   77,   77,
   77,   77,   77,   77,   77,   77,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    1,    2,    3,    1,    1,    1,    1,    3,
    1,    0,   10,    1,    3,    1,    0,    1,    1,    2,
    1,    3,    2,    1,    3,    1,    1,    3,    1,    5,
    1,    1,    3,    3,    4,    1,    5,    5,    1,    1,
    1,    1,    0,    3,    0,    3,    1,    1,    4,    1,
    3,    1,    0,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    2,    4,    1,    0,    4,    1,    6,    0,    6,
    1,    6,    1,    1,    5,    1,    6,    1,    0,    3,
    0,    5,    1,    1,    0,    9,    1,    0,    9,    1,
    3,    1,    3,    1,    2,    1,    5,    4,    1,    1,
    1,    2,    1,    1,    2,    2,    3,    2,    2,    3,
    1,    3,    3,    8,    8,    8,    8,    8,    8,    8,
    5,    2,    2,    2,    2,    2,    2,    1,    2,    2,
    2,    2,    2,    4,    4,    5,    4,    4,    3,    3,
    3,    3,    3,    4,    4,    3,    2,    2,    2,    2,
    4,    5,    2,    2,    2,    3,    3,    3,    4,    2,
    3,    4,    4,    4,    4,    5,    5,    5,    5,    5,
    5,    9,    9,    9,    9,    9,    9,    4,    4,    4,
    4,    4,    5,    5,    5,    5,    9,   10,    2,    7,
    7,    7,    7,    7,    8,    7,    7,    7,    7,    7,
    8,    2,    2,    2,    1,    3,    2,    1,    4,    4,
    4,    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  124,    0,  121,    3,    5,    0,    0,
    0,    0,    0,   17,    0,   18,    0,   99,    0,    0,
    0,    0,    0,    0,   11,   13,    0,    0,    0,   16,
   21,   24,   75,   76,   77,   78,   79,   80,   81,   84,
   87,   96,   98,    0,  103,    0,  125,    0,    0,    0,
    0,    0,    0,   51,   52,    0,    0,    0,    0,    0,
    0,    0,    0,   46,   49,   50,   58,   60,    0,    0,
    0,    0,    0,   41,  180,   91,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   82,    0,  209,  127,
    0,   10,    0,   12,   14,    0,   19,    0,  129,    0,
    0,    0,    2,    4,    0,  225,    0,    0,  116,  132,
  130,    0,    0,  178,    0,    0,    0,   53,   55,  167,
  169,    0,    0,    0,    0,    0,    0,   28,   31,    0,
    0,  177,    0,    0,    0,    0,    0,    0,    0,   70,
   69,   74,   71,   72,   73,    0,    0,  181,    0,    0,
    0,    0,    0,    0,    0,    0,  176,   66,   67,   68,
    0,    0,    0,    0,    0,   64,    0,    0,  100,    0,
  107,    0,    0,    0,   15,  133,   20,    0,  101,  115,
    0,    0,    0,    0,    0,  179,   83,    0,  166,    0,
   54,   56,  145,  142,  146,   30,    0,    0,  144,  161,
    0,  162,    0,    0,    0,    0,    0,    0,    0,  159,
    0,    0,    0,   86,    0,  199,  200,    0,  202,    0,
    0,    0,  173,    0,    0,    0,  175,    0,    0,    0,
    0,  198,    0,    0,    0,    0,  119,    0,  226,  113,
    0,  171,   59,  164,  165,   45,    0,    0,    0,    0,
    0,    0,    0,  184,   93,    0,    0,  185,    0,  183,
    0,  182,    0,  157,    0,  155,  154,   95,    0,    0,
    0,    0,  205,    0,  204,    0,  203,    0,    0,    0,
    0,  104,    0,    0,    0,    0,    0,    0,    0,  102,
    0,  110,    0,    0,    0,   47,   48,    0,    0,  188,
  189,    0,  190,    0,  187,  186,  156,   40,    0,    0,
    0,    0,    0,   97,    0,    0,    0,    0,    0,    0,
  235,    0,  234,  233,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  141,    0,    0,   88,   90,    0,    0,
    0,    0,    0,    0,  172,    0,    0,    0,    0,    0,
    0,  118,  231,    0,  230,  229,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  112,    0,  148,    0,  134,
    0,   34,   36,    0,    0,  139,   22,  140,  138,  137,
  136,  135,    0,    0,    0,    0,    0,    0,    0,  117,
    0,    0,    0,    0,    0,    0,  223,    0,  222,  207,
  150,    0,    0,   37,    0,   39,    0,  147,   33,    0,
    0,    0,    0,  211,  212,  214,    0,    0,  213,  210,
    0,    0,    0,    0,    0,    0,    0,  111,  153,    0,
   35,  151,   32,    0,    0,    0,   92,   23,  215,    0,
  208,    0,    0,    0,    0,    0,    0,    0,   38,    0,
    0,    0,    0,  106,  217,  218,  220,    0,    0,  219,
  216,    0,    0,    0,    0,    0,  221,    0,  194,  195,
  197,  196,  193,  192,  109,
};
final static short yydgoto[] = {                          5,
    6,   46,    7,  369,    8,   23,   24,   25,   26,   27,
   28,   29,   30,   31,  125,  370,  413,   32,  126,  127,
  128,  129,  371,  372,  403,  373,   72,   73,  406,  147,
   74,   63,   64,   65,   66,  191,  192,   67,  163,   68,
  164,  165,  166,   33,   34,   35,   36,   37,   38,   39,
   40,   75,  149,   41,  137,  254,  304,   76,  255,   42,
   43,  169,   84,   44,  290,  238,   45,  108,  387,  365,
  171,  236,  446,  292,  366,  109,  237,
};
final static short yysindex[] = {                       340,
  257,    0,  370,    0,    0,    0,    0,    0,  159,  -11,
   -7,  -27,  -20,    0,  823,    0,   -3,    0,  705, -178,
 -182,   23,  257,  257,    0,    0,   39,  129,  375,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -49,    0,  -51,    0,   26,  480,  -71,
  137,  144,  179,    0,    0,  813,   18,  215,  271,  271,
  219,  333,  107,    0,    0,    0,    0,    0,  426,  674,
  761,   51,  876,    0,    0,    0,  288,  -26,  -30,  219,
  451,  132,  507,  396,  214,  817,    0,  315,    0,    0,
  674,    0,  642,    0,    0,  295,    0,  447,    0,  260,
  243,  135,    0,    0,  334,    0,  541,  296,    0,    0,
    0,  302,  507,    0,  433,  823,  688,    0,    0,    0,
    0,  172,  -77,  265,  391,  241,    0,    0,    0,  633,
  923,    0,  406,  409,  576,  674,  342,  360,  503,    0,
    0,    0,    0,    0,    0,  876,  823,    0,  -84,  823,
  394,   79,  431,  219,  463,  470,    0,    0,    0,    0,
 -140,  507,  491,  542,    0,    0,  502,  449,    0,  422,
    0,  516,   46,  531,    0,    0,    0,  570,    0,    0,
   21,  525,  312,  107,   50,    0,    0,  623,    0,   30,
    0,    0,    0,    0,    0,    0,  537,  -77,    0,    0,
  107,    0,  107,  271,  271,  278,  -46,  316,  328,    0,
   80,  697,  643,    0,  676,    0,    0,  548,    0,   45,
  550,  551,    0,  109,  553, -140,    0,  559,  350,  -81,
  354,    0,  -37, -164,  600,  505,    0,  512,    0,    0,
  310,    0,    0,    0,    0,    0, -146,  588,  592,  601,
  522,  526,  582,    0,    0,  591,  -43,    0,  595,    0,
  596,    0,  610,    0,  768,    0,    0,    0,  152, -146,
 -146, -146,    0,  597,    0,  616,    0,  310,  310,   52,
  310,    0,  -35,  602,  604,    7, -164,  395,  518,    0,
  554,    0,  618,  558,  434,    0,    0,  674,  674,    0,
    0,  635,    0,  274,    0,    0,    0,    0,  -91,  573,
  584,  585,  605,    0,  467,  666,  673,  -17,  682,  685,
    0,  675,    0,    0,   -4,  689,  692,  310,  472,  -80,
  477,  -34,  337,    0,  629,  630,    0,    0,  337,  203,
  337,  337,  337,  337,    0,  -34,  -34,  -34,  511,  -34,
  -34,    0,    0,  711,    0,    0,  713,  310,  310,  298,
  310,  817,    2,  731,  718,    0,  166,    0,  515,    0,
  -63,    0,    0, -101,  519,    0,    0,    0,    0,    0,
    0,    0,  727,  733,  734,  -34,  746,  757,  765,    0,
  -34,  747,  762,  306,  767,  770,    0,  788,    0,    0,
    0,  441,  775,    0,  128,    0,  710,    0,    0,  627,
  674,  779,  337,    0,    0,    0,  781,  -34,    0,    0,
  782,  -34,  -34,  -34,  593,  -34,  -34,    0,    0,  952,
    0,    0,    0,  651,  719,  725,    0,    0,    0,  792,
    0,  804,  808,  812,  -34,  816,  820,  821,    0,  611,
  -72,  617,  621,    0,    0,    0,    0,  827,  -34,    0,
    0,  828,  835,  -40,  836,  838,    0,  841,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   11,  882,    0,    0,    0,    0,    0,    0,   10,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  901,    4,    5,    0,    0,   56,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  902,    0,    0,
    0,    0,  942,    0,    0,    0,    0,    0,    0,    0,
  865,    0, 1001,    0,    0,    0,    0,    0,    0,    0,
    0,   -2,    0,    0,    0,    0,    0,    0,  865,  865,
    0,  872,  872,    0,    0,  -41,    0,    0,    0,    0,
    8,    0,   12,    0,    0,    0,    0,  174,    0,    0,
    0,    0,    0,    0,  -76,    0,  -75,    0,    0,    0,
    0,    0,   63,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  403,    0,    0,    0,
    0,    0,  964,  994,    0,  236,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   83,    0,    0,    0,    0,    0,    0,
    0,  116,    0,    0,  771,    0,    0,    0,    0,    0,
    0,    0,    0,  468,    0,    0,    0,    0,    0,    0,
    0,  -74,    0, 1050,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   85,    0,    0,
 1077,    0, 1082,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  990,    0,    0,   27,    0,    0,
    0,    0,    0,    0,    0,    1,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  112,    0,    0,
    0,    0,    0,    0,    0,    0,  338,    0,    0,    0,
    0,    0,    0,    0, 1026,    0,    0,    0,    0,    0,
    0,    0,    0,  106,    0,   42,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  140,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -73,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  853,    0,
    0,    0,    0,  -66,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  855,    0,    0,
    0,    0,  -44,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  857,    0,    0,    0,    0,  102,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  877,    0,    0,  157,    0,  894,  -23,   34,  481,    0,
    9,  896,    0,    0,   31,  280,    0,    0,    0,  -39,
    0,    0,  556,    0,    0,    0,  909,   -8,    0,  -70,
    0,   35,    0,  378,    0,    0,    0,    0,   -6,    0,
    0,  -59,    0,  903,    0,  945,    0,    0,    0,    0,
    0,  777,    0,    0,  -69,  249,    0,    0,    0,    0,
    0,    0,    0,  870,    0,    0,    0,   16,    0,  892,
    0, -174,    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1404;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         91,
  138,   62,  150,    8,    9,  363,   81,    6,  102,  154,
  120,    7,   78,  123,  153,  303,  104,   51,  472,   80,
  283,  411,   71,  321,   59,  107,  201,   58,   61,   60,
   59,  339,   71,   58,   59,   60,   83,   58,   70,   60,
  348,  174,  397,  280,  360,  136,  136,  115,  228,  114,
  227,  236,  464,   19,  353,  131,   92,  117,  232,  174,
  107,  409,  146,  291,  325,  207,  201,  104,   19,  124,
  246,    3,  130,    4,  131,  212,  167,   62,  257,  239,
  149,   88,   61,  194,  201,  269,  199,  124,  124,   50,
  243,   71,  282,   59,   89,  131,   58,   95,   60,  170,
   61,  223,  270,   63,  227,  206,  185,  188,  190,  155,
  156,  136,   89,  131,  330,   70,  158,  159,  160,  218,
   85,   14,  130,   27,  131,  143,   92,   16,    8,    9,
  211,  124,    6,    1,  124,    1,    7,  217,  213,  191,
   27,  215,  143,   49,  107,  206,  184,   90,  133,  274,
  104,  201,   25,  134,  235,  224,   63,   22,  248,   48,
  152,  410,  124,  206,  201,  203,  276,  273,  432,   25,
  130,  162,  131,  128,   63,  161,   14,   69,  122,  191,
  131,   51,   16,  230,  220,  110,  112,  144,  143,  145,
   14,  463,  408,  279,  359,  111,   16,  191,  228,  114,
  227,  236,   50,  265,    1,  402,  124,   59,  232,  309,
   58,  149,   60,  128,  235,  251,  252,  256,  113,  282,
  302,  282,  362,  471,  401,  122,  152,  101,  335,  336,
  206,  128,   77,  152,   15,  104,   79,   14,   52,   53,
   54,   55,   20,   16,   52,   53,   54,   55,   52,   53,
   54,   55,  282,   82,   69,  294,  174,   56,  362,   85,
   21,   57,  123,  282,  191,  235,    1,   57,    8,    9,
   15,   57,    6,  116,  136,  136,    7,  310,  311,  312,
  313,   49,  201,  201,  198,  245,  104,  201,  201,  201,
  201,  201,  201,  201,  201,  201,   20,   61,  128,  201,
  201,  201,  201,  201,  201,  242,  148,   52,   53,   54,
   55,  131,  131,   14,   21,   58,  131,  340,   63,   16,
  131,  131,  131,  131,  131,  377,  318,  368,  151,  131,
   57,  131,  131,  131,  150,  263,   49,   71,   50,   59,
  435,  436,   58,   59,   60,   71,   58,   59,   60,   71,
   58,   59,   60,   62,   58,  172,   60,  152,  405,  212,
   94,  206,  206,  424,  451,  178,  206,  206,  206,  206,
  206,  206,  206,  206,  206,  130,   20,  131,  206,  206,
  206,  206,  206,  206,   96,   97,  136,  136,  158,  159,
  160,  132,  180,  430,   21,  191,  191,  140,  141,  142,
  191,  191,  191,  191,  191,  191,  191,  191,  191,   20,
  136,  179,  191,  191,  191,  191,  191,  191,  100,   14,
  183,   52,   53,   54,   55,   16,   14,   21,  193,  128,
  128,  197,   16,   99,  128,   20,  120,  121,  128,  128,
  128,  128,  128,   26,   57,  204,   29,  128,  205,  128,
  128,  128,  216,   21,  106,  258,  260,  262,    9,   10,
   26,  368,    3,   11,    4,   20,  208,  367,   12,   13,
   14,   15,  118,  119,  122,  130,   16,  131,   17,   18,
   19,  429,   59,   21,  209,   58,   14,   60,   20,  219,
  100,  187,   16,  130,   47,  131,  122,   94,   94,   94,
  144,  143,  145,  221,   94,  175,   21,  106,   14,  157,
  222,   19,    9,   10,   16,  176,  177,   11,  168,   20,
  195,  196,   12,   13,   14,   15,   19,   53,   54,   55,
   16,  225,   17,   18,   19,  251,  252,   21,  106,  251,
  252,  253,  228,  210,   59,  112,  231,   58,  135,   60,
  161,   20,  338,   52,   53,   54,   55,   20,   53,   54,
   55,   52,   53,   54,   55,   52,   53,   54,   55,  234,
   61,   94,  394,  229,  232,  234,   57,  251,  252,  259,
   20,  249,  250,  240,   57,  226,  241,   94,   57,  251,
  252,  261,    9,   10,  247,    1,    2,   11,   21,   89,
   89,  367,   12,   13,   14,   15,  268,  271,  272,   20,
   16,  275,   17,   18,   19,   20,   94,  277,  376,  378,
  379,  380,  381,  382,  278,    9,   10,  234,  281,  288,
   11,  295,  296,   21,  289,   12,   13,   14,   15,   20,
  300,  297,  329,   16,  298,   17,   18,   19,  299,  301,
  307,   85,   86,  305,  306,  314,   11,  287,   29,  315,
  323,   12,  324,  244,   15,  130,   20,  131,  105,  328,
   29,   17,   18,   19,   59,  332,   29,   58,  331,   60,
  333,   85,   86,  266,   21,  130,   11,  131,  186,  334,
   20,   12,  438,  337,   15,  341,  139,   53,   54,   55,
  206,   17,   18,   19,   85,   86,  342,  343,   21,   11,
  140,  141,  142,   20,   12,   94,  267,   15,  130,   57,
  131,  105,  345,  346,   17,   18,   19,  344,  189,   59,
  347,   21,   58,  352,   60,   85,   86,  264,   59,  350,
   11,   58,  351,   60,   20,   12,  358,  355,   15,  434,
  356,  361,  105,  374,  375,   17,   18,   19,   52,   53,
   54,   55,   21,  158,  159,  160,  386,   85,   86,  390,
  391,  399,   11,   85,   86,  450,  400,   12,   11,  367,
   15,   57,  412,   12,  233,  414,   15,   17,   18,   19,
  233,  415,  416,   17,   18,   19,  181,   86,  158,  159,
  160,   11,   59,  418,  422,   58,   12,   60,  308,   15,
  130,   62,  131,  182,   65,  419,   17,   18,   19,  423,
  144,  143,  145,  420,  426,   85,   86,  427,  428,   62,
   11,   85,   86,  431,  433,   12,   11,  437,   15,  439,
  441,   12,  233,  452,   15,   17,   18,   19,  445,  453,
  454,   17,   18,   19,   59,   85,   86,   58,   59,   60,
   11,   58,  455,   60,   59,   12,  456,   58,   15,   60,
  457,  114,  286,  459,  462,   17,   18,   19,  460,  461,
  465,  123,   85,   86,  466,  467,  469,   11,  200,   53,
   54,   55,   12,  470,  473,   15,  474,  173,  174,  475,
  126,  122,   17,   18,   19,   27,   85,   86,   13,   14,
  105,   11,   63,  224,  108,   16,   12,   93,  130,   15,
  131,   87,  103,   98,  407,  214,   17,   18,   19,   85,
   86,    0,    0,    0,   11,  144,  143,  145,    0,   12,
    0,    0,   15,   52,   53,   54,   55,    0,    0,   17,
   18,   19,   52,   53,   54,   55,    0,    0,    0,    0,
   85,   86,    0,    0,   59,   11,   57,   58,    0,   60,
   12,    0,    0,   15,    0,   57,    0,    0,    0,    0,
   17,   18,   57,   57,   57,    0,   57,    0,   57,    0,
    0,    0,  449,    0,  130,    0,  131,    0,    0,   57,
   57,   57,   57,   57,  168,  168,  168,    0,  168,    0,
  168,  144,  143,  145,    0,    0,  139,   53,   54,   55,
    0,  168,  168,  168,  168,  168,   62,   65,   65,   65,
  140,  141,  142,    0,  170,  170,  170,    0,  170,   57,
  170,   42,    0,   42,    0,   42,    0,  160,  160,    0,
    0,  170,  170,  170,  170,  170,    0,    0,   42,   42,
   42,   42,   42,    0,   57,    0,   57,    0,   52,   53,
   54,   55,   52,   53,   54,   55,    0,    0,   52,   53,
   54,   55,    0,  158,  158,   56,  168,    0,  168,    0,
  163,   57,  163,    0,  163,   57,    0,    0,    0,    0,
    0,   57,  284,  285,    0,    0,    0,  163,  163,  163,
  163,  163,  160,    0,  160,    0,  170,   43,  170,   43,
    0,   43,   44,   42,   44,   42,   44,    0,    0,    0,
    0,    0,    0,    0,   43,   43,   43,   43,   43,   44,
   44,   44,   44,   44,    0,  140,  141,  142,  158,  293,
  158,    0,  322,    0,    0,  326,  327,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  163,    0,  163,    0,    0,    0,  202,   53,
   54,   55,    0,    0,    0,    0,  316,  317,  319,  320,
    0,    0,    0,    0,  354,    0,    0,   57,    0,   43,
    0,   43,    0,   57,   44,    0,   44,    0,    0,    0,
    0,   57,   57,   57,    0,    0,    0,    0,    0,  168,
    0,  140,  141,  142,    0,  168,  349,    0,    0,    0,
    0,    0,    0,  168,  168,  168,  357,  383,  384,  385,
    0,  388,  389,    0,    0,  160,    0,    0,    0,  170,
    0,  160,    0,    0,    0,  170,   42,    0,    0,    0,
    0,    0,   42,  170,  170,  170,  392,  393,  395,  396,
   42,   42,   42,    0,    0,  404,  364,  417,    0,    0,
    0,  158,  421,    0,    0,    0,    0,  158,    0,    0,
  364,  364,  364,    0,  364,  364,    0,    0,    0,    0,
    0,    0,  425,    0,    0,  163,    0,  398,    0,  440,
    0,  163,    0,  442,  443,  444,    0,  447,  448,  163,
  163,  163,    0,    0,    0,    0,    0,    0,    0,    0,
  364,    0,   43,    0,    0,  364,  458,   44,   43,    0,
    0,    0,    0,   44,    0,    0,   43,   43,   43,    0,
  468,   44,   44,   44,    0,    0,    0,    0,    0,    0,
    0,    0,  364,    0,    0,    0,  364,  364,  364,    0,
  364,  364,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  364,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  364,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         23,
   70,   10,   73,    0,    0,   40,   15,    0,   58,   40,
    0,    0,   40,   44,   41,   59,   58,    9,   59,   40,
   58,  123,   40,   59,   42,   49,    0,   45,   40,   47,
   42,  123,   40,   45,   42,   47,   40,   45,  123,   47,
   58,   41,   41,  125,  125,   69,   70,   56,  125,  125,
  125,  125,  125,   44,   59,    0,   23,   40,  125,   59,
   84,  125,   71,  238,   58,  135,   40,   58,   59,   61,
   41,  123,   43,  125,   45,  146,   83,   86,  125,   59,
  125,  260,   41,  123,   58,   41,  126,   79,   80,   44,
   41,   40,  257,   42,  277,   40,   45,   59,   47,   84,
   59,  161,   58,   41,  164,    0,  113,  116,  117,   79,
   80,  135,  277,   58,  289,  123,  257,  258,  259,   41,
  123,  268,   43,   41,   45,   41,   93,  274,  125,  125,
  139,  123,  125,  123,  126,  125,  125,   59,  147,    0,
   58,  150,   58,  123,  168,   40,  112,  125,   42,   41,
  125,  125,   41,   47,  178,  162,   41,    1,  198,    3,
   59,  263,  154,   58,  130,  131,  226,   59,   41,   58,
   43,   40,   45,    0,   59,   44,  268,  262,  256,   40,
  125,  173,  274,  168,  154,  257,   43,   60,   61,   62,
  268,  264,  256,  275,  275,   59,  274,   58,  275,  275,
  275,  275,   44,  212,  256,   40,  198,   42,  275,   58,
   45,  256,   47,   40,  238,  262,  263,  264,   40,  257,
  264,  257,  257,  264,   59,  256,  125,  277,  298,  299,
  125,   58,  260,  260,  269,  277,  257,  268,  256,  257,
  258,  259,   40,  274,  256,  257,  258,  259,  256,  257,
  258,  259,  257,  257,  262,  247,  256,  269,  257,  262,
   58,  279,   44,  257,  125,  289,  256,  279,  265,  265,
  269,  279,  265,  256,  298,  299,  265,  269,  270,  271,
  272,  123,  256,  257,   44,  256,  277,  261,  262,  263,
  264,  265,  266,  267,  268,  269,   40,  256,  125,  273,
  274,  275,  276,  277,  278,  256,  256,  256,  257,  258,
  259,  256,  257,  268,   58,   45,  261,  309,  256,  274,
  265,  266,  267,  268,  269,  123,  275,  125,   41,  274,
  279,  276,  277,  278,  405,  256,  123,   40,   44,   42,
  410,  411,   45,   42,   47,   40,   45,   42,   47,   40,
   45,   42,   47,  362,   45,   41,   47,  256,  367,  430,
  125,  256,  257,   58,  434,  123,  261,  262,  263,  264,
  265,  266,  267,  268,  269,   43,   40,   45,  273,  274,
  275,  276,  277,  278,  256,  257,  410,  411,  257,  258,
  259,   59,   59,  402,   58,  256,  257,  270,  271,  272,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   40,
  434,  277,  273,  274,  275,  276,  277,  278,   44,  268,
  125,  256,  257,  258,  259,  274,  268,   58,  257,  256,
  257,   41,  274,   59,  261,   40,   59,   60,  265,  266,
  267,  268,  269,   41,  279,   40,   44,  274,   40,  276,
  277,  278,   59,   58,   59,  207,  208,  209,  256,  257,
   58,  125,  123,  261,  125,   40,  125,  265,  266,  267,
  268,  269,  258,  259,  256,   43,  274,   45,  276,  277,
  278,   41,   42,   58,  125,   45,  268,   47,   40,   59,
   44,   59,  274,   43,  125,   45,  256,  262,  263,  264,
   60,   61,   62,   41,   24,   59,   58,   59,  268,   59,
   41,   44,  256,  257,  274,  256,  257,  261,  123,   40,
  256,  257,  266,  267,  268,  269,   59,  257,  258,  259,
  274,   41,  276,  277,  278,  262,  263,   58,   59,  262,
  263,  264,   41,   41,   42,   43,  125,   45,  123,   47,
   44,   40,  304,  256,  257,  258,  259,   40,  257,  258,
  259,  256,  257,  258,  259,  256,  257,  258,  259,   58,
   40,   91,  275,  125,   59,   58,  279,  262,  263,  264,
   40,  204,  205,   59,  279,   44,  275,  107,  279,  262,
  263,  264,  256,  257,   58,  256,  257,  261,   58,  262,
  263,  265,  266,  267,  268,  269,   59,   58,   58,   40,
  274,   59,  276,  277,  278,   40,  136,   59,  339,  340,
  341,  342,  343,  344,  275,  256,  257,   58,  275,  125,
  261,   44,   41,   58,  123,  266,  267,  268,  269,   40,
   59,   41,  125,  274,  123,  276,  277,  278,  123,   59,
   41,  256,  257,   59,   59,   59,  261,   58,  256,   44,
   59,  266,   59,   41,  269,   43,   40,   45,  273,  275,
  268,  276,  277,  278,   42,   58,  274,   45,  125,   47,
  123,  256,  257,   41,   58,   43,  261,   45,  256,  256,
   40,  266,  413,   59,  269,  123,  256,  257,  258,  259,
  125,  276,  277,  278,  256,  257,  123,  123,   58,  261,
  270,  271,  272,   40,  266,  235,   41,  269,   43,  279,
   45,  273,  256,   58,  276,  277,  278,  123,   41,   42,
   58,   58,   45,   59,   47,  256,  257,   41,   42,   58,
  261,   45,   58,   47,   40,  266,  275,   59,  269,  123,
   59,  275,  273,  125,  125,  276,  277,  278,  256,  257,
  258,  259,   58,  257,  258,  259,  256,  256,  257,   59,
   58,   41,  261,  256,  257,  125,   59,  266,  261,  265,
  269,  279,  264,  266,  273,   59,  269,  276,  277,  278,
  273,   59,   59,  276,  277,  278,  256,  257,  257,  258,
  259,  261,   42,   58,   58,   45,  266,   47,   41,  269,
   43,   41,   45,  273,   44,   59,  276,  277,  278,   58,
   60,   61,   62,   59,   58,  256,  257,   58,   41,   59,
  261,  256,  257,   59,  125,  266,  261,   59,  269,   59,
   59,  266,  273,  125,  269,  276,  277,  278,  256,  125,
   59,  276,  277,  278,   42,  256,  257,   45,   42,   47,
  261,   45,   59,   47,   42,  266,   59,   45,  269,   47,
   59,   59,  273,   58,  264,  276,  277,  278,   59,   59,
  264,    0,  256,  257,  264,   59,   59,  261,  256,  257,
  258,  259,  266,   59,   59,  269,   59,  256,  257,   59,
    0,    0,  276,  277,  278,   41,  256,  257,  267,  268,
   58,  261,   41,   59,   58,  274,  266,   24,   43,  269,
   45,   19,   46,   28,  369,  149,  276,  277,  278,  256,
  257,   -1,   -1,   -1,  261,   60,   61,   62,   -1,  266,
   -1,   -1,  269,  256,  257,  258,  259,   -1,   -1,  276,
  277,  278,  256,  257,  258,  259,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   42,  261,  279,   45,   -1,   47,
  266,   -1,   -1,  269,   -1,  279,   -1,   -1,   -1,   -1,
  276,  277,   41,   42,   43,   -1,   45,   -1,   47,   -1,
   -1,   -1,   41,   -1,   43,   -1,   45,   -1,   -1,   58,
   59,   60,   61,   62,   41,   42,   43,   -1,   45,   -1,
   47,   60,   61,   62,   -1,   -1,  256,  257,  258,  259,
   -1,   58,   59,   60,   61,   62,  256,  257,  258,  259,
  270,  271,  272,   -1,   41,   42,   43,   -1,   45,  279,
   47,   41,   -1,   43,   -1,   45,   -1,   58,   59,   -1,
   -1,   58,   59,   60,   61,   62,   -1,   -1,   58,   59,
   60,   61,   62,   -1,  123,   -1,  125,   -1,  256,  257,
  258,  259,  256,  257,  258,  259,   -1,   -1,  256,  257,
  258,  259,   -1,   58,   59,  269,  123,   -1,  125,   -1,
   41,  279,   43,   -1,   45,  279,   -1,   -1,   -1,   -1,
   -1,  279,  233,  234,   -1,   -1,   -1,   58,   59,   60,
   61,   62,  123,   -1,  125,   -1,  123,   41,  125,   43,
   -1,   45,   41,  123,   43,  125,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   58,
   59,   60,   61,   62,   -1,  270,  271,  272,  123,  241,
  125,   -1,  283,   -1,   -1,  286,  287,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,  256,  257,
  258,  259,   -1,   -1,   -1,   -1,  278,  279,  280,  281,
   -1,   -1,   -1,   -1,  325,   -1,   -1,  256,   -1,  123,
   -1,  125,   -1,  262,  123,   -1,  125,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,  256,
   -1,  270,  271,  272,   -1,  262,  318,   -1,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,  328,  346,  347,  348,
   -1,  350,  351,   -1,   -1,  256,   -1,   -1,   -1,  256,
   -1,  262,   -1,   -1,   -1,  262,  256,   -1,   -1,   -1,
   -1,   -1,  262,  270,  271,  272,  358,  359,  360,  361,
  270,  271,  272,   -1,   -1,  367,  332,  386,   -1,   -1,
   -1,  256,  391,   -1,   -1,   -1,   -1,  262,   -1,   -1,
  346,  347,  348,   -1,  350,  351,   -1,   -1,   -1,   -1,
   -1,   -1,  394,   -1,   -1,  256,   -1,  363,   -1,  418,
   -1,  262,   -1,  422,  423,  424,   -1,  426,  427,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  386,   -1,  256,   -1,   -1,  391,  445,  256,  262,   -1,
   -1,   -1,   -1,  262,   -1,   -1,  270,  271,  272,   -1,
  459,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  418,   -1,   -1,   -1,  422,  423,  424,   -1,
  426,  427,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  445,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  459,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' $$2 cuerpo_funcion",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$3 :",
"factor : '-' CTE_INT $$3",
"$$4 :",
"factor : '-' CTE_DBL $$4",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$5 :",
"seleccion : IF condicion $$5 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$6 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$6 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$7 :",
"expresion_dountil : DO $$7 cuerpo_dountil",
"$$8 :",
"expresion_dountil : etiqueta ':' DO $$8 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$9 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$9 ':' asignacion_do_until ';'",
"cuerpo_dountil : error_cuerpo_dountil",
"$$10 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$10 ':' asignacion_do_until ';'",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : '(' asignacion ')'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion error asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_asignacion_do_until : asignacion ')'",
"error_asignacion_do_until : '(' ')'",
"error_asignacion_do_until : '(' asignacion",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 505 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static String ambito;
public static boolean declarando = true;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 951 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 14:
//#line 42 "gramatica.y"
{ this.declarando = false;}
break;
case 15:
//#line 43 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													this.declarando = true;
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													for(String lexema : lista_de_variables) {   /* por cada variable declarada*/
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema); /*se obtiene la clave*/
														if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
															if (this.analizadorLexico.tablaSimbolos.verificarAmbito(lexema)){
																this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoVar); /* se agrega el tipo a la tabla de simbolos*/
																this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "variable"); /* se agrega el uso a la tabla de simbolos*/
																this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, lexema + "." + ambito);	/* se actualiza el nombre de la variable en la tabla de simbolos*/
															}
															else 
																Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + lexema + " ya fue declarada en ese ambito.");
														}
													}
													lista_de_variables.clear();
													this.declarando = false;}
break;
case 17:
//#line 65 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 18:
//#line 66 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 19:
//#line 69 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 22:
//#line 79 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion"); 
																		String tipoFunc = val_peek(4).sval;
																		String nombreFunc = val_peek(6).sval;
																		this.declarando = true;
																		int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc); /*se obtiene la clave*/
																		if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																			if (this.analizadorLexico.tablaSimbolos.verificarAmbito(nombreFunc)){
																				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoFunc);
																				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de funcion");	
																				this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreFunc + "." + ambito);	/* se actualiza el nombre de la funcion en la tabla de simbolos*/
																			}
																			else 
																				Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La funcion " + nombreFunc + " ya fue declarada en ese ambito.");
																		this.ambito = ambito + "." + nombreFunc;
																		};}
break;
case 30:
//#line 107 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreParam); /*se obtiene la clave*/
								if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
									if (this.analizadorLexico.tablaSimbolos.verificarAmbito(nombreParam)){
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoParam);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de parametro");
										this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreParam + "." + ambito);	/* se actualiza el nombre del parametro en la tabla de simbolos*/
									}
									else 
										Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + nombreParam + " ya fue declarada en ese ambito.");
								};}
break;
case 32:
//#line 123 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));}
break;
case 33:
//#line 124 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
								Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 35:
//#line 129 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 40:
//#line 139 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 42:
//#line 143 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 43:
//#line 144 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 44:
//#line 146 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 47:
//#line 152 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 48:
//#line 154 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 51:
//#line 160 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 52:
//#line 162 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 53:
//#line 164 "gramatica.y"
{verificarRango();}
break;
case 54:
//#line 164 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 55:
//#line 166 "gramatica.y"
{verificarRango();}
break;
case 56:
//#line 166 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 57:
//#line 168 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 59:
//#line 174 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(3).sval);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 66:
//#line 188 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 67:
//#line 190 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 68:
//#line 191 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 69:
//#line 194 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 70:
//#line 195 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 71:
//#line 196 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 72:
//#line 197 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 73:
//#line 198 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 74:
//#line 199 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 82:
//#line 213 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 83:
//#line 216 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 85:
//#line 222 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 88:
//#line 229 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 89:
//#line 231 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 92:
//#line 239 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 95:
//#line 248 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 97:
//#line 253 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 99:
//#line 257 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 101:
//#line 258 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 105:
//#line 265 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 106:
//#line 268 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 108:
//#line 277 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 109:
//#line 280 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
															if (Main.polaca.existeBreak()){ /*Hay un Break*/
																Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
															Main.polaca.addElementPolaca(Main.polaca.desapilar());
															Main.polaca.addElementPolaca("BF");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 111:
//#line 290 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 113:
//#line 294 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 115:
//#line 299 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 117:
//#line 307 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 118:
//#line 311 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 120:
//#line 320 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 121:
//#line 321 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 122:
//#line 324 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 123:
//#line 325 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 124:
//#line 326 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 125:
//#line 327 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 126:
//#line 328 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 127:
//#line 329 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 128:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 129:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 130:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 131:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 132:
//#line 340 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 133:
//#line 341 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 134:
//#line 345 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 135:
//#line 346 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 136:
//#line 347 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 137:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 138:
//#line 349 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 139:
//#line 350 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 140:
//#line 351 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 141:
//#line 354 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 142:
//#line 355 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 143:
//#line 356 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 144:
//#line 357 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 145:
//#line 360 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 146:
//#line 361 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 147:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta la llave de cierre");}
break;
case 148:
//#line 365 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 149:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 150:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 151:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 152:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 153:
//#line 376 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 154:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 155:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 156:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 157:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 158:
//#line 384 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 159:
//#line 385 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 160:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 161:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 162:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 163:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 164:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 165:
//#line 393 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 166:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 167:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 168:
//#line 398 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 169:
//#line 399 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 170:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 171:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 172:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 173:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 174:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 175:
//#line 409 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 176:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 177:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 178:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 179:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 180:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 181:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el cuerpo de la seleccion");}
break;
case 182:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 183:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 184:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 185:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 186:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 187:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 188:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 189:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 190:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 191:
//#line 431 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 192:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 193:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 194:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 195:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 196:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 197:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 198:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 199:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 200:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 201:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 202:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la cadena en el mensaje por pantalla");}
break;
case 203:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 204:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 205:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 206:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 207:
//#line 455 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 208:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 209:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 210:
//#line 462 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 211:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 212:
//#line 464 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 213:
//#line 465 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 214:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 215:
//#line 467 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 216:
//#line 474 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 217:
//#line 475 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 218:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 219:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 220:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 221:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until con etiqueta");}
break;
case 222:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 223:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Error en la asignacion del do_until");}
break;
case 224:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 225:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 226:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 227:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 228:
//#line 491 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 229:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 230:
//#line 495 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 231:
//#line 496 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 232:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 233:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 234:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 235:
//#line 500 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 236:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1884 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
