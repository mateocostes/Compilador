//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    1,    3,    3,    3,    3,    5,    5,
    6,    6,    7,    7,    7,   10,   10,   11,   11,   11,
    9,    9,   14,   14,   14,   14,   17,   18,   18,   15,
   15,   15,   21,   21,   23,   23,   23,   25,   25,   26,
   26,   26,   26,   26,   30,   30,   30,   30,   32,   32,
   34,   32,   35,   32,   32,   32,   36,   36,   37,   37,
   37,   37,   39,   40,   40,   40,   28,   28,   28,   28,
   28,   28,    8,    8,   42,   42,   42,   42,   42,   43,
   44,   44,   51,   45,   50,   54,   50,   53,   46,   46,
   46,   47,   47,   58,   59,   48,   48,   48,   60,   60,
   61,   57,   57,   57,   57,   62,   62,   62,    2,    2,
    4,    4,    4,    4,    4,    4,   12,   12,   12,   12,
   13,   13,   16,   16,   16,   16,   16,   16,   16,   16,
   16,   19,   19,   19,   19,   20,   20,   22,   24,   24,
   27,   27,   27,   29,   29,   29,   29,   29,   29,   29,
   31,   31,   31,   31,   31,   31,   33,   33,   33,   33,
   38,   41,   41,   41,   41,   49,   49,   49,   49,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   55,   55,   55,
   55,   55,   55,   55,   55,   56,   56,   56,   56,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   63,   63,   64,   64,   64,   64,   64,   65,   65,
   65,   65,   66,   66,   66,   66,   66,   66,   66,   66,
};
final static short yylen[] = {                            2,
    2,    1,    3,    1,    2,    2,    1,    1,    2,    1,
    2,    1,    2,    3,    1,    1,    1,    1,    3,    1,
   10,    1,    3,    1,    0,    1,    1,    2,    1,    2,
    1,    1,    3,    1,    1,    3,    1,    5,    1,    1,
    3,    3,    4,    1,    5,    5,    1,    1,    1,    1,
    0,    3,    0,    3,    1,    1,    4,    1,    3,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    1,    0,    5,    6,    0,   11,    1,    5,    4,
    1,    6,    1,    0,    0,   11,   11,    1,    5,    1,
    1,    3,    1,    2,    1,    5,    4,    1,    1,    1,
    2,    1,    1,    2,    2,    3,    2,    2,    3,    1,
    3,    3,    9,    9,    9,    9,    9,    9,    9,    9,
   10,    5,    2,    2,    2,    2,    2,    1,    2,    2,
    2,    2,    2,    4,    4,    5,    4,    4,    3,    3,
    3,    3,    3,    4,    4,    3,    2,    2,    2,    2,
    4,    5,    2,    2,    2,    3,    3,    3,    4,   11,
   11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
    7,    7,    7,    7,    7,    7,    7,    4,    4,    4,
    4,    3,    3,    3,    3,    5,    5,    5,    5,    9,
    8,    8,   10,   10,   10,   10,   10,   10,   10,   10,
   11,   10,   10,    4,    4,    4,    4,    5,    1,    3,
    2,    1,    4,    4,    4,    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  113,    0,  110,    2,    4,    0,    0,
    0,    0,    0,   16,    0,   17,    0,    0,    0,    0,
    0,    0,    0,    0,   10,   12,    0,    0,    0,   15,
   20,   22,   73,   74,   75,   76,   77,   78,   79,   82,
   91,   93,    0,   98,    1,  114,    0,    0,    0,    0,
    0,    0,   49,   50,    0,    0,    0,    0,    0,    0,
    0,    0,   44,   47,   48,   56,   58,    0,   83,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  219,    0,    0,  105,   80,    0,    0,
    0,  116,    0,    9,    0,   11,   13,    0,   18,    0,
  118,    0,    0,    0,    3,    0,  121,  119,    0,    0,
  168,    0,    0,    0,   51,   53,  157,  159,    0,    0,
    0,    0,    0,    0,   26,   29,    0,    0,  167,    0,
    0,    0,   68,   67,   72,   69,   70,   71,    0,    0,
    0,    0,    0,    0,  194,    0,  193,    0,    0,    0,
  166,   64,   65,   66,    0,    0,    0,    0,    0,   62,
    0,  104,    0,    0,    0,    0,    0,    0,  192,    0,
    0,    0,   14,  122,   19,    0,    0,    0,    0,    0,
    0,  169,   81,    0,  156,    0,   52,   54,  136,  133,
  137,   28,    0,    0,  135,  151,    0,  152,    0,    0,
    0,  149,    0,    0,    0,    0,    0,    0,  189,  190,
    0,   90,    0,    0,    0,  163,    0,    0,    0,  165,
    0,    0,    0,  220,  102,    0,  188,    0,    0,    0,
    0,  108,    0,    0,    0,    0,    0,  161,   57,  154,
  155,   43,    0,    0,    0,    0,    0,  147,    0,  145,
    0,    0,   84,  144,   89,    0,    0,    0,    0,  198,
    0,  197,    0,  196,    0,    0,    0,  101,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   45,   46,  146,   38,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   92,    0,    0,    0,    0,
  229,    0,  228,  227,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  132,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  162,    0,    0,
    0,  100,   95,    0,  107,  225,    0,  224,  223,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   31,   32,   34,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  202,    0,  201,  106,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  200,  140,    0,    0,   35,    0,
   37,   30,  123,   85,    0,    0,    0,    0,    0,    0,
  128,  130,    0,  129,  127,  126,  125,  124,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  143,    0,   33,  141,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  131,
   21,  214,  217,    0,  216,  215,    0,  203,  204,  207,
  208,  210,    0,  212,    0,  209,  206,  205,   36,    0,
    0,  181,    0,  184,    0,  185,    0,  187,    0,  186,
    0,  183,    0,  182,  218,   99,   96,  211,   97,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   87,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  170,
  173,  174,  177,  178,  180,  179,  176,  175,  172,  171,
};
final static short yydgoto[] = {                          5,
    6,    7,  351,    8,   23,  287,   25,   26,   27,   28,
   29,   30,   31,  122,  352,   32,  123,  124,  125,  126,
  353,  354,  388,  355,   69,   70,  391,  140,   71,   62,
   63,   64,   65,  187,  188,   66,  157,   67,  158,  159,
  160,   33,   34,   35,   36,   37,   38,   39,   40,  207,
  141,  253,  288,  357,   41,   42,   86,  164,  373,  331,
   43,  231,   44,  332,   87,  232,
};
final static short yysindex[] = {                       -60,
  454,  -45,  372,    0,    0,    0,    0,    0,  -27,  -33,
  197,  -11,   27,    0,  894,    0,   29,  477,  741,   14,
 -191,  -23,  454,  454,    0,    0,   52,  195,   16,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -43,    0,    0,    0,   -1,  483,  -51,  155,
  174,  291,    0,    0,  856,  -24,  237,  136,  136,  213,
    9,  389,    0,    0,    0,    0,    0,  809,    0,  897,
    0,  307,   41,  343,  189,  213,  115,  129,  132,  253,
  860,  364,  333,    0,  586,  342,    0,    0,  391,  385,
  355,    0,  711,    0,  264,    0,    0,  436,    0,   35,
    0,  246,  365,  -89,    0,  366,    0,    0,  162,  132,
    0,   42,  894,  671,    0,    0,    0,    0,  249, -127,
  314,  457,  218,    0,    0,    0,  788,  931,    0,  479,
  485,  468,    0,    0,    0,    0,    0,    0,  897,  894,
  296,  894,  449,   67,    0,  474,    0,  213,  499,  512,
    0,    0,    0,    0,  286,  132,  521,  290,    0,    0,
  531,    0,  315,  483,   30,  535,  321,  540,    0,  611,
  -16,  561,    0,    0,    0,  611,  511,  611,  329,  389,
   58,    0,    0,  434,    0,   64,    0,    0,    0,    0,
    0,    0,  547, -127,    0,    0,  389,    0,  389,  136,
  136,    0,   99,  776,  473,  488,  352,  481,    0,    0,
  568,    0,   40,  562,  574,    0,   72,  576,  286,    0,
  583,  197,  522,    0,    0,  197,    0,  -38, -221,  617,
  527,    0,  528,  534,  530,  536,  197,    0,    0,    0,
    0,    0, -153,  616,  621,  622,  623,    0,  518,    0,
  711,   50,    0,    0,    0,  -47, -153, -153, -153,    0,
  606,    0,  624,    0,  608,  392,  614,    0,   53,  612,
  615,  -35, -221,  398,  402,  403, -100,  409,  410,  628,
  566,  435,    0,    0,    0,    0,  711,  565,  580,  -96,
  -85,  581,  591,  596,  618,    0,  450,   48,  197,   48,
    0,  670,    0,    0,   78,  678,  683,  197,  197,  197,
  197,  168,  197,  197,   48,  431,    0,  472,  711,  643,
  711,  431,  299,  431,  431,  431,  431,    0,  489, -102,
  689,    0,    0,  698,    0,    0,  703,    0,    0,  706,
  707,  712,  713,  203,  715,  716,  720,  724,  -27,  271,
  514,  660,    0,    0,    0,  727,  529,  669,  677,  672,
  673,  676,  341,  679,  680,  681,  684,  690,  894,  869,
  894,    0,  738,    0,    0,   48,   48,   48,   48,   48,
   91,   48,   48,   48,    0,    0,  423,  749,    0,  981,
    0,    0,    0,    0,  691,  317,  360,  -61,  367,  373,
    0,    0,  -86,    0,    0,    0,    0,    0,  550,  803,
  571,  613,   48,  763,  766,  767,  768,  775,   48,  -19,
  778,  779,  787,    0, 1044,    0,    0,  711,  726,  794,
  734,  799,  742,  802,  319,  743,  816,  753,  820,    0,
    0,    0,    0,   82,    0,    0,  822,    0,    0,    0,
    0,    0,  823,    0,  826,    0,    0,    0,    0,  771,
  711,    0,  711,    0,  711,    0,  705,    0,  711,    0,
  711,    0,  711,    0,    0,    0,    0,    0,    0,  627,
  781,  783,  785,  735,  792,  793,  797,  798,  833,  633,
  649,  661,  662,  -78,  667,  668,  685,  687,    0,  865,
  876,  878,  885,  886,   51,  888,  889,  893,  901,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,  956,  963,    0,    0,    0,    0,    0,    0,  -26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  964,    8,   10,    0,    0,   76,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  965,    0,    0,    0,
    0,  978,    0,    0,    0,    0,    0,    0,    0,  928,
    0, 1099,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  928,  928,    0,  929,  929,    0,
  -14,  850,  563,    0,  854,    0,    0,    0,    0,    0,
    0,    0,   13,    0,   31,    0,    0,    0,    0,  172,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  109,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  278,    0,    0,    0,    0,    0, 1011,
 1049,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    3,    0,  158,    0,    0,
    0,    0,    0,    0,    0,  141,    0,    0,  772,    0,
    0,    0,    0,    0,    0,  859,    0,    0,    0,    0,
    0,  161,    0,    0,    0,    0,    0,    0,    0, 1104,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  327,    0,    0, 1134,    0, 1139,    0,
    0,    0,    0,    0,    0,    0,    0,  414,    0,    0,
   26,    0,    0,    0,    0,    0,    0,    0,   95,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  357,    0,    0,    0,    0,  520,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  106,    0,  102,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  241,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -90,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  722,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -88,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -72,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -66,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   93,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  140,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  984,    0,   45,    0,  966,    1,   19,   -2,    0,   -3,
  967,    0,    0,  359,  262,    0,    0,  -46,    0,    0,
  642,    0,    0,    0,  980,  -10,    0,  -69,    0,  283,
    0,   -8,    0,    0,    0,    0,  -17,    0,    0,  335,
    0,  975,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  916,    0,    0,    0,   -7,    0,    0, 1036,
 -110,  323,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1456;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         61,
  142,   24,  195,   24,   77,   50,   60,    7,   58,    8,
  291,   57,    5,   59,  104,  114,   49,   18,   85,  269,
  330,   96,  305,   93,  312,  191,  321,   49,   73,   74,
    6,  101,   18,  178,  230,  268,  226,  322,  441,  454,
  106,   94,  195,  101,  112,   22,  505,   47,   85,  117,
  118,  127,  138,  128,   90,   91,  121,  139,  139,  102,
  195,  161,    3,  435,    4,  191,   76,  129,   79,  204,
   61,  121,  121,  190,  101,  120,  195,    3,  102,    4,
  256,  146,   96,  191,  127,   91,  128,  330,  224,   68,
   96,   58,  181,  173,   57,   48,   59,  257,  239,  145,
  183,   92,  184,  186,  242,  199,  127,  211,  128,  516,
   97,  301,  261,   94,   14,  120,  121,  270,  271,  121,
   16,  203,  476,  105,  127,  210,  128,  195,  119,  205,
  260,  208,    7,  120,    8,  164,  336,    5,  217,  213,
   14,  127,   59,  128,  121,  199,   16,  244,  420,   61,
  191,  142,   48,  164,  370,    6,  223,  127,  302,  128,
   59,  306,  307,  199,   85,  320,  371,   50,  156,  440,
  230,  117,  155,  151,  311,  155,  230,  230,  230,  213,
   57,   61,   14,  138,  230,  504,  226,  177,   16,  139,
  121,  245,  246,  249,  337,    1,    2,  213,   25,   61,
  120,  433,  434,   58,   18,  107,   57,   68,   59,   58,
    1,  117,   57,  108,   59,   25,  109,  142,  268,   18,
   14,  268,   51,   52,   53,   54,   16,   96,  148,  117,
  199,  113,  120,  103,  230,   55,   68,  329,   58,  281,
   14,   57,   68,   59,   58,   56,   16,   57,   72,   59,
  101,   14,  292,  293,  294,  295,  120,   16,  195,  195,
  380,  194,  101,  195,  213,  195,  195,  195,  195,  195,
  195,  195,    7,   89,    8,  195,  195,    5,  195,  195,
  195,  191,  191,   75,   96,   78,  191,  323,  191,  191,
  191,  191,  191,  191,  191,    6,  117,  182,  191,  191,
  144,  191,  191,  191,  329,   51,   52,   53,   54,  268,
  387,  289,   58,  238,  515,   57,   24,   59,   24,  241,
  142,   27,   24,   24,   24,   24,   24,   24,   56,  386,
  110,  120,  120,  219,  268,   24,  120,  475,   20,  390,
  120,  120,  120,  120,  120,   50,  419,  143,  142,  120,
  164,  120,  120,  120,  247,  204,   21,   59,  409,  411,
  412,  199,  199,   24,   61,   88,  199,  134,  199,  199,
  199,  199,  199,  199,  199,   48,  425,  470,  199,  199,
   20,  199,  199,  199,  134,  152,  153,  154,  152,  153,
  154,  180,   52,   53,   54,  213,  213,   23,   21,  444,
  213,  147,  213,  213,  213,  213,  213,  213,  213,  197,
  199,   20,  213,  213,   23,  213,  213,  213,   52,   53,
   54,  363,  162,   51,   52,   53,   54,  117,  117,   21,
  130,  168,  117,  149,  150,  131,  117,  117,  117,  117,
  117,  469,  344,  169,  119,  117,   56,  117,  117,  117,
   98,   99,   51,   52,   53,   54,   14,  163,   51,   52,
   53,   54,   16,  424,   58,  402,  167,   57,  119,   59,
   20,  150,  150,  119,  240,   56,  127,  170,  128,   49,
   14,   56,  137,  136,  138,   14,   16,  176,   21,  216,
  179,   16,  220,   20,  115,  116,   46,  193,  233,  235,
  236,  174,  175,   88,   88,  189,  213,  209,  202,   58,
  109,   21,   57,  250,   59,  127,   20,  128,  200,  171,
  172,  254,   20,  127,  201,  128,   51,   52,   53,   54,
   13,   14,  212,   27,   21,   84,  150,   16,  150,  214,
   21,   84,  152,  153,  154,   27,  152,  153,  154,   56,
   20,   27,  215,  263,  349,   10,  277,  206,  286,   11,
  127,  218,  128,  350,   12,   13,   14,   15,  229,  191,
  192,  221,   16,   20,   17,   18,   19,  148,  148,  429,
  430,  467,  468,  362,  364,  365,  366,  367,  368,  222,
  442,  229,  127,  225,  128,  226,  349,   10,  227,   83,
   60,   11,   94,  237,  243,  350,   12,   13,   14,   15,
  251,  445,  252,  127,   16,  128,   17,   18,   19,  258,
   94,   94,  431,  432,  403,   20,  255,    9,   10,  436,
  437,  259,   11,  234,  262,  438,  439,   12,   13,   14,
   15,  264,  148,   21,  148,   16,  266,   17,   18,   19,
   20,  274,  275,  446,  278,  127,   20,  128,  276,  282,
  279,  283,  284,  285,  296,  298,  299,  297,  229,  150,
  303,  300,  308,  304,  273,  150,  309,  310,  132,   52,
   53,   54,   20,  313,  314,  315,  349,   10,  316,  318,
  317,   11,  133,  134,  135,  350,   12,   13,   14,   15,
   21,   56,  319,  324,   16,  328,   17,   18,   19,    9,
   10,  185,   58,  325,   11,   57,   20,   59,  326,   12,
   13,   14,   15,   51,   52,   53,   54,   16,  335,   17,
   18,   19,   80,   81,   21,  356,  338,   11,   80,   81,
  327,  339,   12,   11,   20,   15,   56,  372,   12,   82,
   20,   15,   17,   18,   19,   82,  374,  369,   17,   18,
   19,  375,   21,  376,  377,  359,   80,   81,   21,  378,
  379,   11,  382,  383,   20,  148,   12,  384,  350,   15,
   20,  148,  385,  228,  393,  394,   17,   18,   19,   80,
   81,  395,   21,  396,   11,  413,  399,  400,   21,   12,
  401,  397,   15,  404,  405,  406,  228,  426,  407,   17,
   18,   19,   60,  428,  408,   63,  248,   58,   94,   94,
   57,  448,   59,   94,  449,  450,  451,  484,   94,   58,
   60,   94,   57,  452,   59,   94,  456,  457,   94,   94,
   94,  165,   81,  443,   58,  458,   11,   57,  461,   59,
   58,   12,  462,   57,   15,   59,  463,  464,  166,  493,
  466,   17,   18,   19,  465,  471,   80,   81,  137,  136,
  138,   11,   80,   81,  472,  473,   12,   11,  474,   15,
  477,  478,   12,  228,  479,   15,   17,   18,   19,  272,
  489,  499,   17,   18,   19,  480,  500,   58,   80,   81,
   57,   58,   59,   11,   57,  490,   59,  491,   12,  492,
   58,   15,  501,   57,  111,   59,  495,  496,   17,   18,
   19,  497,  498,  510,  502,  503,   51,   52,   53,   54,
  506,  507,   80,   81,  511,   58,  512,   11,   57,  127,
   59,  128,   12,  513,  514,   15,  517,  518,  508,   56,
  509,  519,   17,   18,   19,  109,  137,  136,  138,  520,
   80,   81,  112,  115,  111,   11,   80,   81,   25,   61,
   12,   11,   58,   15,  222,   57,   12,   59,  103,   15,
   17,   18,   19,  221,   86,   45,   17,   18,   19,   95,
   80,   81,  392,   88,  100,   11,   80,   81,    0,    0,
   12,   11,    0,   15,    0,    0,   12,    0,    0,   15,
   17,   18,   19,    0,    0,    0,   17,   18,   55,   55,
   55,  427,   55,  127,   55,  128,    0,   60,   63,   63,
   63,   51,   52,   53,   54,   55,   55,   55,   55,   55,
  137,  136,  138,  196,   52,   53,   54,    0,    0,    0,
    0,  158,  158,  158,   56,  158,    0,  158,   51,   52,
   53,   54,    0,    0,  132,   52,   53,   54,  158,  158,
  158,  158,  158,    0,    0,    0,    0,    0,  133,  134,
  135,   56,    0,    0,  459,    0,  127,   56,  128,  160,
  160,  160,    0,  160,    0,  160,    0,    0,    0,    0,
   55,    0,   55,  137,  136,  138,  160,  160,  160,  160,
  160,   51,   52,   53,   54,   51,   52,   53,   54,    0,
    0,    0,    0,    0,   51,   52,   53,   54,   55,    0,
    0,    0,    0,  158,   56,  158,    0,  410,   56,   40,
    0,   40,    0,   40,  153,    0,  153,   56,  153,   51,
   52,   53,   54,    0,    0,    0,   40,   40,   40,   40,
   40,  153,  153,  153,  153,  153,  133,  134,  135,    0,
    0,  160,   56,  160,   41,    0,   41,    0,   41,   42,
    0,   42,    0,   42,    0,    0,  198,   52,   53,   54,
    0,   41,   41,   41,   41,   41,   42,   42,   42,   42,
   42,  265,    0,    0,    0,  267,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  280,    0,    0,    0,
    0,   40,    0,   40,    0,    0,  153,    0,  153,    0,
    0,  290,    0,   55,  358,  360,  361,    0,    0,   55,
    0,    0,    0,    0,    0,    0,    0,   55,   55,   55,
  133,  134,  135,    0,    0,    0,   41,    0,   41,    0,
    0,   42,    0,   42,    0,    0,  158,    0,    0,    0,
    0,    0,  158,    0,  398,    0,    0,    0,  333,    0,
  158,  158,  158,    0,    0,    0,    0,  340,  341,  342,
  343,  345,  346,  347,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  160,    0,    0,    0,    0,    0,
  160,    0,    0,  133,  134,  135,    0,    0,  160,  160,
  160,    0,    0,  381,    0,    0,    0,    0,    0,  389,
    0,    0,    0,    0,    0,  334,    0,    0,    0,    0,
    0,    0,    0,  460,    0,    0,    0,    0,    0,    0,
  348,    0,    0,    0,   40,    0,    0,    0,    0,  153,
   40,    0,    0,    0,    0,  153,    0,    0,   40,   40,
   40,    0,    0,  153,  153,  153,  481,    0,  482,    0,
  483,    0,  485,    0,  486,    0,  487,    0,  488,   41,
    0,    0,    0,    0,   42,   41,    0,    0,    0,  494,
   42,    0,    0,   41,   41,   41,    0,    0,   42,   42,
   42,  414,  415,  416,  417,  418,    0,  421,  422,  423,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  447,    0,
    0,    0,    0,    0,  453,  455,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         10,
   70,    1,    0,    3,   15,    9,   40,    0,   42,    0,
   58,   45,    0,   47,   58,   40,   44,   44,   18,   58,
   40,   24,   58,   23,  125,    0,  123,   44,   40,   41,
    0,   58,   59,  123,  125,  257,  125,  123,  125,   59,
   48,   23,   40,   58,   55,    1,  125,    3,   48,   58,
   59,   43,  125,   45,   41,  277,   60,   68,  125,   44,
   58,   79,  123,  125,  125,   40,   40,   59,   40,  139,
   81,   75,   76,  120,   59,    0,  123,  123,   44,  125,
   41,   41,   85,   58,   43,  277,   45,   40,   59,   40,
   93,   42,  110,   59,   45,  123,   47,   58,   41,   59,
   59,  125,  113,  114,   41,    0,   43,   41,   45,   59,
   59,   59,   41,   95,  268,   40,  120,  228,  229,  123,
  274,  132,   41,  125,   43,   59,   45,  125,  256,  140,
   59,  142,  125,   58,  125,   41,   59,  125,  156,    0,
  268,   43,   41,   45,  148,   40,  274,  194,   58,   41,
  125,   59,  123,   59,  257,  125,  164,   43,  269,   45,
   59,  272,  273,   58,  164,  262,  269,  171,   40,  256,
  170,    0,   44,   59,  275,   44,  176,  177,  178,   40,
   45,   41,  268,  256,  275,  264,  275,  277,  274,  256,
  194,  200,  201,  204,  305,  256,  257,   58,   41,   59,
  125,  263,  264,   42,   44,  257,   45,   40,   47,   42,
  256,   40,   45,   59,   47,   58,   43,  125,  257,   59,
  268,  257,  256,  257,  258,  259,  274,  230,   40,   58,
  125,  256,   44,  277,  234,  269,   40,  257,   42,  243,
  268,   45,   40,   47,   42,  279,  274,   45,  260,   47,
  277,  268,  256,  257,  258,  259,   44,  274,  256,  257,
   58,   44,  277,  261,  125,  263,  264,  265,  266,  267,
  268,  269,  265,  260,  265,  273,  274,  265,  276,  277,
  278,  256,  257,  257,  287,  257,  261,  291,  263,  264,
  265,  266,  267,  268,  269,  265,  125,  256,  273,  274,
  260,  276,  277,  278,  257,  256,  257,  258,  259,  257,
   40,  262,   42,  256,  264,   45,  316,   47,   41,  256,
  390,   44,  322,  323,  324,  325,  326,  327,  279,   59,
   40,  256,  257,   44,  257,   58,  261,  256,   40,  350,
  265,  266,  267,  268,  269,  349,  256,   41,  256,  274,
  256,  276,  277,  278,  256,  425,   58,  256,  369,  370,
  371,  256,  257,  363,  256,  125,  261,   41,  263,  264,
  265,  266,  267,  268,  269,  123,  387,   59,  273,  274,
   40,  276,  277,  278,   58,  257,  258,  259,  257,  258,
  259,  109,  257,  258,  259,  256,  257,   41,   58,  410,
  261,   59,  263,  264,  265,  266,  267,  268,  269,  127,
  128,   40,  273,  274,   58,  276,  277,  278,  257,  258,
  259,  123,   59,  256,  257,  258,  259,  256,  257,   58,
   42,   41,  261,   75,   76,   47,  265,  266,  267,  268,
  269,  123,  275,   59,  256,  274,  279,  276,  277,  278,
  256,  257,  256,  257,  258,  259,  268,  125,  256,  257,
  258,  259,  274,   41,   42,  125,  125,   45,  256,   47,
   40,   58,   59,  256,   41,  279,   43,  123,   45,   44,
  268,  279,   60,   61,   62,  268,  274,  123,   58,  155,
  125,  274,  158,   40,  258,  259,  125,   41,  176,  177,
  178,  256,  257,  263,  264,  257,  148,   59,   41,   42,
   43,   58,   45,   41,   47,   43,   40,   45,   40,  256,
  257,   41,   40,   43,   40,   45,  256,  257,  258,  259,
  267,  268,   59,  256,   58,   59,  123,  274,  125,   41,
   58,   59,  257,  258,  259,  268,  257,  258,  259,  279,
   40,  274,   41,  219,  256,  257,  234,  262,   41,  261,
   43,   41,   45,  265,  266,  267,  268,  269,   58,  256,
  257,   41,  274,   40,  276,  277,  278,   58,   59,  263,
  264,  263,  264,  322,  323,  324,  325,  326,  327,  275,
   41,   58,   43,   59,   45,  275,  256,  257,   59,  123,
   40,  261,   40,  275,   58,  265,  266,  267,  268,  269,
  123,   41,  261,   43,  274,   45,  276,  277,  278,   58,
   58,   59,  263,  264,  363,   40,   59,  256,  257,  263,
  264,   58,  261,  123,   59,  263,  264,  266,  267,  268,
  269,   59,  123,   58,  125,  274,  125,  276,  277,  278,
   40,  125,  125,   41,  125,   43,   40,   45,  125,   44,
  125,   41,   41,   41,   59,   58,  275,   44,   58,  256,
   59,   58,  275,   59,   58,  262,  275,  275,  256,  257,
  258,  259,   40,  275,  275,   58,  256,  257,  123,  125,
  256,  261,  270,  271,  272,  265,  266,  267,  268,  269,
   58,  279,  123,  123,  274,  256,  276,  277,  278,  256,
  257,   41,   42,  123,  261,   45,   40,   47,  123,  266,
  267,  268,  269,  256,  257,  258,  259,  274,   59,  276,
  277,  278,  256,  257,   58,  264,   59,  261,  256,  257,
  123,   59,  266,  261,   40,  269,  279,   59,  266,  273,
   40,  269,  276,  277,  278,  273,   59,  269,  276,  277,
  278,   59,   58,   58,   58,  123,  256,  257,   58,   58,
   58,  261,   58,   58,   40,  256,  266,   58,  265,  269,
   40,  262,   59,  273,  125,   59,  276,  277,  278,  256,
  257,  263,   58,  125,  261,   58,  125,  125,   58,  266,
  125,  125,  269,  125,  125,  125,  273,   59,  125,  276,
  277,  278,   41,  123,  125,   44,   41,   42,  256,  257,
   45,   59,   47,  261,   59,   59,   59,  123,  266,   42,
   59,  269,   45,   59,   47,  273,   59,   59,  276,  277,
  278,  256,  257,   41,   42,   59,  261,   45,  123,   47,
   42,  266,   59,   45,  269,   47,  123,   59,  273,  125,
   59,  276,  277,  278,  123,  123,  256,  257,   60,   61,
   62,  261,  256,  257,   59,  123,  266,  261,   59,  269,
   59,   59,  266,  273,   59,  269,  276,  277,  278,  273,
  264,   59,  276,  277,  278,  125,  264,   42,  256,  257,
   45,   42,   47,  261,   45,  125,   47,  125,  266,  125,
   42,  269,  264,   45,   59,   47,  125,  125,  276,  277,
  278,  125,  125,   59,  264,  264,  256,  257,  258,  259,
  264,  264,  256,  257,   59,   42,   59,  261,   45,   43,
   47,   45,  266,   59,   59,  269,   59,   59,  264,  279,
  264,   59,  276,  277,  278,    0,   60,   61,   62,   59,
  256,  257,    0,    0,    0,  261,  256,  257,   41,   41,
  266,  261,   42,  269,  125,   45,  266,   47,  125,  269,
  276,  277,  278,  125,  263,    2,  276,  277,  278,   24,
  256,  257,  351,   19,   28,  261,  256,  257,   -1,   -1,
  266,  261,   -1,  269,   -1,   -1,  266,   -1,   -1,  269,
  276,  277,  278,   -1,   -1,   -1,  276,  277,   41,   42,
   43,   41,   45,   43,   47,   45,   -1,  256,  257,  258,
  259,  256,  257,  258,  259,   58,   59,   60,   61,   62,
   60,   61,   62,  256,  257,  258,  259,   -1,   -1,   -1,
   -1,   41,   42,   43,  279,   45,   -1,   47,  256,  257,
  258,  259,   -1,   -1,  256,  257,  258,  259,   58,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,  270,  271,
  272,  279,   -1,   -1,   41,   -1,   43,  279,   45,   41,
   42,   43,   -1,   45,   -1,   47,   -1,   -1,   -1,   -1,
  123,   -1,  125,   60,   61,   62,   58,   59,   60,   61,
   62,  256,  257,  258,  259,  256,  257,  258,  259,   -1,
   -1,   -1,   -1,   -1,  256,  257,  258,  259,  269,   -1,
   -1,   -1,   -1,  123,  279,  125,   -1,  269,  279,   41,
   -1,   43,   -1,   45,   41,   -1,   43,  279,   45,  256,
  257,  258,  259,   -1,   -1,   -1,   58,   59,   60,   61,
   62,   58,   59,   60,   61,   62,  270,  271,  272,   -1,
   -1,  123,  279,  125,   41,   -1,   43,   -1,   45,   41,
   -1,   43,   -1,   45,   -1,   -1,  256,  257,  258,  259,
   -1,   58,   59,   60,   61,   62,   58,   59,   60,   61,
   62,  222,   -1,   -1,   -1,  226,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  237,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,  123,   -1,  125,   -1,
   -1,  252,   -1,  256,  319,  320,  321,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,
  270,  271,  272,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,  123,   -1,  125,   -1,   -1,  256,   -1,   -1,   -1,
   -1,   -1,  262,   -1,  359,   -1,   -1,   -1,  299,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,  308,  309,  310,
  311,  312,  313,  314,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,
  262,   -1,   -1,  270,  271,  272,   -1,   -1,  270,  271,
  272,   -1,   -1,  344,   -1,   -1,   -1,   -1,   -1,  350,
   -1,   -1,   -1,   -1,   -1,  300,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,   -1,   -1,
  315,   -1,   -1,   -1,  256,   -1,   -1,   -1,   -1,  256,
  262,   -1,   -1,   -1,   -1,  262,   -1,   -1,  270,  271,
  272,   -1,   -1,  270,  271,  272,  461,   -1,  463,   -1,
  465,   -1,  467,   -1,  469,   -1,  471,   -1,  473,  256,
   -1,   -1,   -1,   -1,  256,  262,   -1,   -1,   -1,  484,
  262,   -1,   -1,  270,  271,  272,   -1,   -1,  270,  271,
  272,  376,  377,  378,  379,  380,   -1,  382,  383,  384,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  413,   -1,
   -1,   -1,   -1,   -1,  419,  420,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"programa : ID conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno",
"cuerpo_funcion : retorno",
"cuerpo_funcion : error_bloque_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$1 :",
"factor : '-' CTE_INT $$1",
"$$2 :",
"factor : '-' CTE_DBL $$2",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$3 :",
"seleccion : IF condicion $$3 cuerpo_seleccion error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$4 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$4 ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : OUT '(' ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$5 :",
"$$6 :",
"expresion_dountil : DO '{' $$5 bloque_de_sentencias_ejecutables '}' UNTIL condicion $$6 ':' asignacion_do_until ';'",
"expresion_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"expresion_dountil : error_dountil",
"asignacion_do_until : '(' ID ASSIGN expresion ')'",
"asignacion_do_until : error_asignacion_do_until",
"etiqueta : ID",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion error",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_bloque_funcion : error",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_seleccion : IF THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : '(' ')' ';'",
"error_mensaje_pantalla : OUT ')' ';'",
"error_mensaje_pantalla : OUT '(' ';'",
"error_mensaje_pantalla : OUT '(' ')'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : DO bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : DO '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' ';'",
"error_dountil : etiqueta ':' DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until",
"error_asignacion_do_until : ID ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ID expresion ')'",
"error_asignacion_do_until : '(' ID ASSIGN ')'",
"error_asignacion_do_until : '(' ID ASSIGN expresion error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 412 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
public Parser(AnalizadorLexico analizadorLexico)
{
  this.analizadorLexico = analizadorLexico;
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 957 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 14:
//#line 37 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");}
break;
case 16:
//#line 41 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 17:
//#line 42 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 18:
//#line 45 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);}
break;
case 19:
//#line 46 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);}
break;
case 21:
//#line 50 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");}
break;
case 28:
//#line 63 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);}
break;
case 31:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 33:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 38:
//#line 82 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 40:
//#line 86 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 41:
//#line 87 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 42:
//#line 89 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 45:
//#line 95 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 46:
//#line 97 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 49:
//#line 103 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 50:
//#line 105 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 51:
//#line 107 "gramatica.y"
{verificarRango();}
break;
case 52:
//#line 107 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 53:
//#line 109 "gramatica.y"
{verificarRango();}
break;
case 54:
//#line 109 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 55:
//#line 111 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 57:
//#line 117 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 64:
//#line 130 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 65:
//#line 132 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 66:
//#line 133 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 67:
//#line 136 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 68:
//#line 137 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 69:
//#line 138 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 70:
//#line 139 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 71:
//#line 140 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 72:
//#line 141 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 80:
//#line 155 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 81:
//#line 158 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 83:
//#line 164 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 85:
//#line 171 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 86:
//#line 173 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 87:
//#line 177 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 89:
//#line 186 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 90:
//#line 187 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla vacio");}
break;
case 92:
//#line 191 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 94:
//#line 195 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 95:
//#line 196 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 96:
//#line 199 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 97:
//#line 203 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 99:
//#line 208 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 109:
//#line 229 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 110:
//#line 230 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 111:
//#line 233 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 112:
//#line 234 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 113:
//#line 235 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 114:
//#line 236 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 115:
//#line 237 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 116:
//#line 238 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 117:
//#line 242 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 118:
//#line 243 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 119:
//#line 244 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 120:
//#line 245 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 121:
//#line 249 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 122:
//#line 250 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 123:
//#line 254 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 124:
//#line 255 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 125:
//#line 256 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 126:
//#line 257 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 127:
//#line 258 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 128:
//#line 259 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 129:
//#line 260 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 130:
//#line 261 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el cuerpo de la funcion");}
break;
case 131:
//#line 262 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de cierre del cuerpo de la funcion");}
break;
case 132:
//#line 265 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 133:
//#line 266 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 134:
//#line 267 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 135:
//#line 268 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 136:
//#line 271 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 137:
//#line 272 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 138:
//#line 275 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 139:
//#line 279 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 140:
//#line 280 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 141:
//#line 284 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 142:
//#line 285 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 143:
//#line 286 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 144:
//#line 290 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 145:
//#line 291 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 146:
//#line 292 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 147:
//#line 293 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 148:
//#line 294 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 149:
//#line 295 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 150:
//#line 296 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 151:
//#line 299 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 152:
//#line 300 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 153:
//#line 301 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 154:
//#line 302 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 155:
//#line 303 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 156:
//#line 304 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 157:
//#line 307 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 158:
//#line 308 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 159:
//#line 309 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 160:
//#line 310 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 161:
//#line 313 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 162:
//#line 316 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 163:
//#line 317 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 164:
//#line 318 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 165:
//#line 319 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 166:
//#line 322 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 167:
//#line 323 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 168:
//#line 324 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 169:
//#line 325 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 170:
//#line 328 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 171:
//#line 329 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 172:
//#line 330 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 173:
//#line 331 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 174:
//#line 332 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 175:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 176:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 177:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 178:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 179:
//#line 337 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 180:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 181:
//#line 339 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 182:
//#line 340 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 183:
//#line 341 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 184:
//#line 342 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 185:
//#line 343 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 186:
//#line 344 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 187:
//#line 345 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 188:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 189:
//#line 349 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 190:
//#line 350 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 191:
//#line 351 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 192:
//#line 352 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 193:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 194:
//#line 354 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 195:
//#line 355 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 196:
//#line 358 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 197:
//#line 359 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 198:
//#line 360 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 199:
//#line 361 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 200:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 201:
//#line 365 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 202:
//#line 366 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 203:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta en la sentencia do_until");}
break;
case 204:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 205:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 206:
//#line 376 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 207:
//#line 377 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 208:
//#line 378 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 209:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 210:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "]Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 211:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 212:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la asignacion luego del ':' en la sentencia do_until");}
break;
case 213:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' para cerrar la sentencia do_until");}
break;
case 214:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 215:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador a la izquierda de la asignacion del do_until");}
break;
case 216:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el '=:' en la asignacion del do_until");}
break;
case 217:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion en la asignacion del do_until");}
break;
case 218:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 219:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 220:
//#line 396 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 221:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 222:
//#line 398 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 223:
//#line 401 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 224:
//#line 402 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 225:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 226:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 227:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 228:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 229:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 230:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1802 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
