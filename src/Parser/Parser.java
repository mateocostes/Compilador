//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    1,    3,    3,    3,    3,    5,    5,
    6,    6,    7,    7,    7,   10,   10,   11,   11,   11,
    9,    9,   14,   14,   14,   14,   17,   18,   18,   15,
   15,   15,   21,   21,   23,   23,   23,   25,   25,   26,
   26,   26,   26,   26,   30,   30,   30,   30,   32,   32,
   34,   32,   35,   32,   32,   32,   36,   36,   37,   37,
   37,   37,   39,   40,   40,   40,   28,   28,   28,   28,
   28,   28,    8,    8,   42,   42,   42,   42,   42,   43,
   44,   44,   51,   45,   45,   50,   55,   50,   50,   54,
   54,   53,   46,   46,   47,   47,   61,   48,   64,   48,
   48,   62,   67,   60,   60,   71,   63,   63,   68,   68,
   66,   66,   66,   66,   70,   70,   70,    2,    2,    4,
    4,    4,    4,    4,    4,   12,   12,   12,   12,   13,
   13,   16,   16,   16,   16,   16,   16,   16,   16,   16,
   19,   19,   19,   19,   20,   20,   22,   24,   24,   27,
   27,   27,   29,   29,   29,   29,   29,   29,   29,   31,
   31,   31,   31,   31,   31,   33,   33,   33,   33,   38,
   41,   41,   41,   41,   49,   49,   49,   49,   52,   52,
   56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
   57,   57,   57,   57,   57,   57,   58,   58,   58,   58,
   58,   59,   59,   59,   59,   65,   65,   65,   69,   69,
   69,   69,   69,   69,   72,   72,   72,   72,   72,   72,
   73,   73,   73,   74,   74,   74,   74,   75,   75,   75,
   75,   75,   75,   75,   75,
};
final static short yylen[] = {                            2,
    2,    1,    3,    1,    2,    2,    1,    1,    2,    1,
    2,    1,    2,    3,    1,    1,    1,    1,    3,    1,
   10,    1,    3,    1,    0,    1,    1,    2,    1,    2,
    1,    1,    3,    1,    1,    3,    1,    5,    1,    1,
    3,    3,    4,    1,    5,    5,    1,    1,    1,    1,
    0,    3,    0,    3,    1,    1,    4,    1,    3,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    1,    0,    4,    1,    6,    0,    6,    1,    6,
    1,    1,    5,    1,    6,    1,    0,    3,    0,    5,
    1,    1,    0,    9,    1,    0,    9,    1,    3,    1,
    3,    1,    2,    1,    5,    4,    1,    1,    1,    2,
    1,    1,    2,    2,    3,    2,    2,    3,    1,    3,
    3,    9,    9,    9,    9,    9,    9,    9,    9,   10,
    5,    2,    2,    2,    2,    2,    1,    2,    2,    2,
    2,    2,    4,    4,    5,    4,    4,    3,    3,    3,
    3,    3,    4,    4,    3,    2,    2,    2,    2,    4,
    5,    2,    2,    2,    3,    3,    3,    4,    2,    3,
    4,    4,    4,    4,    5,    5,    5,    5,    5,    5,
    9,    9,    9,    9,    9,    9,    4,    4,    4,    4,
    4,    5,    5,    5,    5,    9,   10,    2,    7,    7,
    7,    7,    7,    8,    7,    7,    7,    7,    7,    8,
    2,    2,    2,    1,    3,    2,    1,    4,    4,    4,
    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  122,    0,  119,    2,    4,    0,    0,
    0,    0,    0,   16,    0,   17,    0,   97,    0,    0,
    0,    0,    0,    0,   10,   12,    0,    0,    0,   15,
   20,   22,   73,   74,   75,   76,   77,   78,   79,   82,
   85,   94,   96,    0,  101,    1,  123,    0,    0,    0,
    0,    0,    0,   49,   50,    0,    0,    0,    0,    0,
    0,    0,    0,   44,   47,   48,   56,   58,    0,    0,
    0,    0,    0,   39,  179,   89,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   80,    0,  208,  125,
    0,    9,    0,   11,   13,    0,   18,    0,  127,    0,
    0,    0,    3,    0,  224,    0,    0,  114,  130,  128,
    0,    0,  177,    0,    0,    0,   51,   53,  166,  168,
    0,    0,    0,    0,    0,    0,   26,   29,    0,    0,
  176,    0,    0,    0,    0,    0,    0,    0,   68,   67,
   72,   69,   70,   71,    0,    0,  180,    0,    0,    0,
    0,    0,    0,    0,    0,  175,   64,   65,   66,    0,
    0,    0,    0,    0,   62,    0,    0,   98,    0,  105,
    0,    0,    0,   14,  131,   19,    0,   99,  113,    0,
    0,    0,    0,    0,  178,   81,    0,  165,    0,   52,
   54,  145,  142,  146,   28,    0,    0,  144,  160,    0,
  161,    0,    0,    0,    0,    0,    0,    0,  158,    0,
    0,    0,   84,    0,  198,  199,    0,  201,    0,    0,
    0,  172,    0,    0,    0,  174,    0,    0,    0,    0,
  197,    0,    0,    0,    0,  117,    0,  225,  111,    0,
  170,   57,  163,  164,   43,    0,    0,    0,    0,    0,
    0,    0,  183,   91,    0,    0,  184,    0,  182,    0,
  181,    0,  156,    0,  154,  153,   93,    0,    0,    0,
    0,  204,    0,  203,    0,  202,    0,    0,    0,    0,
  102,    0,    0,    0,    0,    0,    0,    0,  100,    0,
  108,    0,    0,    0,   45,   46,    0,    0,  187,  188,
    0,  189,    0,  186,  185,  155,   38,    0,    0,    0,
    0,    0,   95,    0,    0,    0,    0,    0,    0,  234,
    0,  233,  232,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  141,    0,    0,   86,   88,    0,    0,    0,
    0,    0,    0,  171,    0,    0,    0,    0,    0,    0,
  116,  230,    0,  229,  228,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  110,    0,    0,    0,    0,   31,
   32,   34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  115,    0,
    0,    0,    0,    0,    0,  222,    0,  221,  206,  149,
    0,    0,   35,    0,   37,   30,  132,    0,    0,    0,
  137,  139,    0,  138,  136,  135,  134,  133,  210,  211,
  213,    0,    0,  212,  209,    0,    0,    0,    0,    0,
    0,    0,  109,  152,    0,   33,  150,    0,    0,    0,
   90,  140,   21,  214,    0,  207,    0,    0,    0,    0,
    0,    0,    0,   36,    0,    0,    0,    0,  104,  216,
  217,  219,    0,    0,  218,  215,    0,    0,    0,    0,
    0,  220,    0,  193,  194,  196,  195,  192,  191,  107,
};
final static short yydgoto[] = {                          5,
    6,    7,  368,    8,   23,   24,   25,   26,   27,   28,
   29,   30,   31,  124,  369,   32,  125,  126,  127,  128,
  370,  371,  402,  372,   72,   73,  405,  146,   74,   63,
   64,   65,   66,  190,  191,   67,  162,   68,  163,  164,
  165,   33,   34,   35,   36,   37,   38,   39,   40,   75,
  148,   41,  136,  253,  303,   76,  254,   42,   43,  168,
   84,   44,  289,  237,   45,  107,  386,  364,  170,  235,
  451,  291,  365,  108,  236,
};
final static short yysindex[] = {                       -61,
  347,  315,  418,    0,    0,    0,    0,    0,   59,  -32,
  -17,  -28,  -11,    0,  838,    0,   10,    0,  754, -200,
 -168,    7,  347,  347,    0,    0,   66, -139,  405,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -44,    0,    0,    0,   39,  493,  -59,
  207,  270,  303,    0,    0,  790,    1,  178,  306,  306,
  200,  110,  174,    0,    0,    0,    0,    0,  547,  723,
  814,   98,  106,    0,    0,    0,  327,  -24,  173,  200,
  529,  340,  297,  447,  233,  797,    0,  351,    0,    0,
  723,    0,  621,    0,    0,  344,    0,  416,    0,  -68,
  281,  151,    0,  353,    0,  553,  329,    0,    0,    0,
  646,  297,    0,  135,  838,  664,    0,    0,    0,    0,
  202,  248,  160,  428,  209,    0,    0,    0,  930,  943,
    0,  438,  442,  577,  723,  373,  386,  410,    0,    0,
    0,    0,    0,    0,  106,  838,    0,  -57,  838,  444,
   42,  454,  200,  479,  480,    0,    0,    0,    0,  343,
  297,  496,  319,    0,    0,  497,  470,    0,  419,    0,
  486,  176,  510,    0,    0,    0,  591,    0,    0,   12,
  494,  298,  174,   41,    0,    0,  549,    0,   14,    0,
    0,    0,    0,    0,    0,  517,  248,    0,    0,  174,
    0,  174,  306,  306,  378,  -53,  414,  455,    0,   70,
  760,  589,    0,  689,    0,    0,  520,    0,   52,  525,
  527,    0,   55,  532,  343,    0,  548,  331,  -89,  334,
    0,  -14, -107,  641,  485,    0,  499,    0,    0,  310,
    0,    0,    0,    0,    0,  228,  568,  578,  579,  495,
  514,  574,    0,    0,  586,   81,    0,  587,    0,  592,
    0,  609,    0,  697,    0,    0,    0,   44,  228,  228,
  228,    0,  623,    0,  639,    0,  310,  310,   -7,  310,
    0,  -35,  631,  642,   28, -107,  423,  522,    0,  582,
    0,  654,  599,  473,    0,    0,  723,  723,    0,    0,
  676,    0,  245,    0,    0,    0,    0,  -84,  614,  618,
  622,  629,    0,  488,  695,  699,   79,  700,  703,    0,
  705,    0,    0,   57,  708,  714,  310,  505,  -88,  507,
  -34,  258,    0,  649,  659,    0,    0,  258,  223,  258,
  258,  258,  258,    0,  -34,  -34,  -34,  530,  -34,  -34,
    0,    0,  726,    0,    0,  729,  310,  310,   50,  310,
  797,   -9,  748,  731,    0,   59,  214,  531,  667,    0,
    0,    0,  -92,  533,  681,  387,  686,  690,  692,  696,
  702,  761,  769,  777,  -34,  787,  791,  792,    0,  -34,
  800,  804,  302,  805,  807,    0,  825,    0,    0,    0,
  401,  813,    0,  933,    0,    0,    0,  670,  723,  820,
    0,    0,  -82,    0,    0,    0,    0,    0,    0,    0,
    0,  822,  -34,    0,    0,  823,  -34,  -34,  -34,  617,
  -34,  -34,    0,    0,  964,    0,    0,  693,  759,  762,
    0,    0,    0,    0,  827,    0,  832,  833,  837,  -34,
  841,  842,  847,    0,  636,  -52,  644,  645,    0,    0,
    0,    0,  852,  -34,    0,    0,  854,  856,   84,  857,
  866,    0,  869,    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,  929,  934,    0,    0,    0,    0,    0,    0,  -39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  938,    4,   11,    0,    0,   54,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  940,    0,    0,
    0,    0, 1020,    0,    0,    0,    0,    0,    0,    0,
  892,    0, 1089,    0,    0,    0,    0,    0,    0,    0,
    0,  -55,    0,    0,    0,    0,    0,    0,  892,  892,
    0,  900,  900,    0,    0,  -13,    0,    0,    0,    0,
   21,    0,   22,    0,    0,    0,    0,  105,    0,    0,
    0,    0,    0,  -83,    0,  -76,    0,    0,    0,    0,
    0,   43,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  656,    0,    0,    0,    0,
    0, 1060, 1067,    0,  278,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  107,    0,    0,    0,    0,    0,    0,    0,
   63,    0,    0,  914,    0,    0,    0,    0,    0,    0,
    0,    0,  422,    0,    0,    0,    0,    0,    0,    0,
  -74,    0, 1094,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  117,    0,    0, 1101,
    0, 1135,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  459,    0,    0,   27,    0,    0,    0,
    0,    0,    0,    0,  -25,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  119,    0,    0,    0,
    0,    0,    0,    0,    0,  268,    0,    0,    0,    0,
    0,    0,    0,  812,    0,    0,    0,    0,    0,    0,
    0,    0,  133,    0,   15,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  157,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -73,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  884,    0,    0,
    0,    0,  -67,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -56,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  885,    0,    0,    0,
    0,  -38,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  887,
    0,    0,    0,    0,   68,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  949,    0,  158,    0,  928,  -23,   30,  -15,    0,    9,
  925,    0,    0,   19,  868,    0,    0,  242,    0,    0,
  588,    0,    0,    0,  269,   -8,    0,  -70,    0,  356,
    0,  435,    0,    0,    0,    0,   73,    0,    0,  -21,
    0,  941,    0,  958,    0,    0,    0,    0,    0,  809,
    0,    0,  -69, -127,    0,    0,    0,    0,    0,    0,
    0,  608,    0,    0,    0,   16,    0,  883,    0, -160,
    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1422;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         91,
  137,   62,  149,    7,   18,  362,   81,   61,   94,   59,
    8,   78,   58,  102,   60,  173,  152,   51,  102,   18,
    5,    6,   71,  320,   59,  106,  200,   58,   80,   60,
  409,  396,   71,  173,   59,  279,  359,   58,  338,   60,
  116,  227,  443,  282,  102,  135,  135,  114,  112,   83,
  226,  235,   92,  129,  245,   59,  129,  231,  130,   88,
  106,    3,  145,    4,  206,   70,  200,   83,  147,  123,
  238,  256,  469,   59,  211,   94,  290,   62,  257,  259,
  261,  242,  217,   61,  200,  324,  148,  123,  123,   71,
   94,   59,  268,  129,   58,  273,   60,  154,  155,  169,
  216,  308,   50,   61,  126,   70,  187,  189,   89,  269,
  135,  129,  129,  272,  130,  352,   96,   97,   71,   94,
   59,   61,   92,   58,   95,   60,  151,  329,    7,  210,
  123,   90,  205,  123,   49,    8,  347,  212,  222,  302,
  214,  226,  477,  106,  126,    5,    6,   25,  129,  281,
  130,  200,  129,  234,  130,  166,  190,  143,   22,   23,
   48,  123,  126,  103,   25,  143,  142,  144,  131,   89,
  408,  219,  205,  442,  143,  337,   23,  129,  129,  130,
   51,   49,  229,   14,  184,  278,  358,  175,  176,   16,
  205,  227,  151,  186,    1,    2,  190,  109,  112,  147,
  226,  235,  264,  275,   69,  123,   83,  231,  250,  251,
  255,  468,  153,  234,  190,  132,  122,  148,   94,   50,
  133,  281,  361,   52,   53,   54,   55,  334,  335,  126,
  173,   77,  101,  223,   15,  151,   56,  102,   52,   53,
   54,   55,  281,  122,   69,   79,   57,  361,   52,   53,
   54,   55,  197,  401,  293,   59,  115,  205,   58,   15,
   60,   57,   20,  102,  234,  110,   82,  317,    7,  244,
   59,   57,  400,  135,  135,    8,  309,  310,  311,  312,
   21,  190,  200,  200,  281,    5,    6,  200,  200,  200,
  200,  200,  200,  200,  200,  200,  241,   20,   61,  200,
  200,  200,  200,  200,  200,   52,   53,   54,   55,  129,
  129,   14,  111,  281,  129,   21,  339,   16,  129,  129,
  129,  129,  129,  151,  393,  262,   14,  129,   57,  129,
  129,  129,   16,  149,   52,   53,   54,   55,  439,  440,
  160,   71,  112,   59,  301,  376,   58,  476,   60,   71,
   58,   59,   62,  147,   58,   49,   60,   57,  404,  429,
  126,  126,  225,  193,  211,  126,  198,  150,  456,  126,
  126,  126,  126,  126,   51,  139,  140,  141,  126,  161,
  126,  126,  126,  160,  135,  135,   20,   50,  205,  205,
  185,  171,  435,  205,  205,  205,  205,  205,  205,  205,
  205,  205,   92,  177,   21,  205,  205,  205,  205,  205,
  205,  179,  190,  190,  135,  194,  195,  190,  190,  190,
  190,  190,  190,  190,  190,  190,   20,  178,  121,  190,
  190,  190,  190,  190,  190,  117,  118,    3,  247,    4,
   14,  434,   59,   14,   21,   58,   16,   60,  100,   16,
  209,   59,  111,  182,   58,  121,   60,   20,  192,  100,
  143,  142,  144,   99,  121,   18,  183,   14,  196,   52,
   53,   54,   55,   16,  174,   21,   14,  203,  366,   10,
   18,  204,   16,   11,  200,  202,   20,  367,   12,   13,
   14,   15,   57,  119,  120,   14,   16,  207,   17,   18,
   19,   16,  215,  121,   21,  105,  250,  251,  292,   20,
  208,  412,  218,  366,   10,   14,  159,  159,   11,  220,
  221,   16,  367,   12,   13,   14,   15,   21,  105,   87,
   87,   16,   20,   17,   18,   19,  224,  227,   20,   92,
   92,   92,   47,  230,  231,  315,  316,  318,  319,   61,
   21,  105,  239,  157,  158,  159,  233,   52,   53,   54,
   55,   20,   53,   54,   55,   52,   53,   54,   55,  167,
    1,  129,  240,  130,  246,  157,  158,  159,  267,  233,
   57,  159,  270,  159,  271,  348,   20,  156,   57,  243,
  274,  129,   20,  130,  228,  356,  157,  158,  159,  157,
  158,  159,    9,   10,   21,  277,  276,   11,  280,  287,
   21,  294,   12,   13,   14,   15,   20,  297,  295,  296,
   16,  288,   17,   18,   19,  391,  392,  394,  395,  265,
   20,  129,  299,  130,   21,  403,  298,  248,  249,  250,
  251,  252,  366,   10,  300,  304,  328,   11,  233,  306,
  305,  367,   12,   13,   14,   15,  138,   53,   54,   55,
   16,  430,   17,   18,   19,   52,   53,   54,   55,  134,
  139,  140,  141,    9,   10,  250,  251,  258,   11,   57,
   20,  313,  314,   12,   13,   14,   15,   59,   57,  322,
   58,   16,   60,   17,   18,   19,   24,  327,  286,   27,
  323,  205,   85,   86,  188,   59,  330,   11,   58,   20,
   60,  331,   12,   24,  159,   15,  250,  251,  260,  104,
  159,  332,   17,   18,   19,   85,   86,   21,  333,  266,
   11,  129,   20,  130,  336,   12,  340,  307,   15,  129,
  341,  130,  104,  344,  342,   17,   18,   19,   85,   86,
   21,  343,  345,   11,   85,   86,  346,  349,   12,   11,
  350,   15,   20,  351,   12,  104,  354,   15,   17,   18,
   19,  232,  355,  373,   17,   18,   19,   85,   86,  357,
   21,  360,   11,  374,  389,  385,  390,   12,  398,  399,
   15,  407,  438,   20,  232,  367,  410,   17,   18,   19,
  263,   59,   85,   86,   58,  411,   60,   11,  180,   86,
  414,   21,   12,   11,  415,   15,  416,  455,   12,  419,
  417,   15,   17,   18,   19,  181,  418,  420,   17,   18,
   19,   59,   85,   86,   58,  421,   60,   11,   59,  283,
  284,   58,   12,   60,  423,   15,   85,   86,  113,  424,
  425,   11,   17,   18,   19,   59,   12,  427,   58,   15,
   60,  428,  431,  232,  432,  433,   17,   18,   19,  157,
  157,  436,  450,  143,  142,  144,  172,  173,  441,   59,
  444,  446,   58,  457,   60,  459,  458,   13,   14,  321,
  460,  461,  325,  326,   16,  462,   85,   86,  464,  467,
  465,   11,   53,   54,   55,  466,   12,  470,  471,   15,
  472,   27,  474,  285,  475,  478,   17,   18,   19,   52,
   53,   54,   55,   27,  479,   85,   86,  480,  118,   27,
   11,  353,   25,  121,  157,   12,  157,  124,   15,  120,
   61,  103,   57,  223,  106,   17,   18,   19,   85,   86,
   46,   93,   98,   11,   60,  406,  213,   63,   12,   87,
    0,   15,    0,    0,    0,    0,    0,    0,   17,   18,
   19,   59,   60,  437,   58,  129,   60,  130,   85,   86,
    0,    0,    0,   11,   59,    0,    0,   58,   12,   60,
    0,   15,  143,  142,  144,    0,    0,    0,   17,   18,
   19,    0,    0,    0,  454,    0,  129,    0,  130,   85,
   86,    0,    0,    0,   11,   52,   53,   54,   55,   12,
    0,    0,   15,  143,  142,  144,    0,    0,    0,   17,
   18,    0,    0,    0,    0,    0,    0,    0,   57,    0,
    0,    0,    0,    0,    0,   52,   53,   54,   55,    0,
    0,    0,   52,   53,   54,   55,    0,    0,    0,    0,
   55,   55,   55,    0,   55,   56,   55,  157,   57,  138,
   53,   54,   55,  157,    0,   57,    0,   55,   55,   55,
   55,   55,    0,  139,  140,  141,    0,    0,    0,    0,
    0,    0,   57,   52,   53,   54,   55,    0,    0,    0,
  167,  167,  167,    0,  167,    0,  167,  169,  169,  169,
    0,  169,    0,  169,    0,    0,   57,  167,  167,  167,
  167,  167,    0,    0,  169,  169,  169,  169,  169,   40,
    0,   40,    0,   40,  162,    0,  162,    0,  162,    0,
    0,   41,   55,   41,   55,   41,   40,   40,   40,   40,
   40,  162,  162,  162,  162,  162,    0,    0,   41,   41,
   41,   41,   41,    0,    0,    0,    0,    0,    0,   60,
   63,   63,   63,    0,    0,   42,    0,   42,    0,   42,
    0,    0,  167,    0,  167,  199,   53,   54,   55,  169,
    0,  169,   42,   42,   42,   42,   42,    0,  201,   53,
   54,   55,  139,  140,  141,  375,  377,  378,  379,  380,
  381,   40,    0,   40,    0,    0,  162,    0,  162,    0,
    0,    0,    0,   41,    0,   41,    0,  382,  383,  384,
    0,  387,  388,  139,  140,  141,    0,    0,    0,    0,
    0,    0,    0,  413,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   42,    0,   42,
    0,    0,    0,    0,    0,    0,    0,  422,    0,    0,
    0,    0,  426,    0,    0,   55,    0,    0,    0,    0,
    0,   55,    0,    0,    0,    0,    0,    0,  363,   55,
   55,   55,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  363,  363,  363,  445,  363,  363,    0,  447,
  448,  449,    0,  452,  453,  167,    0,    0,    0,  397,
    0,  167,  169,    0,    0,    0,    0,    0,  169,  167,
  167,  167,  463,    0,    0,    0,  169,  169,  169,    0,
    0,    0,  363,    0,   40,    0,  473,  363,    0,  162,
   40,    0,    0,    0,    0,  162,   41,    0,   40,   40,
   40,    0,   41,  162,  162,  162,    0,    0,    0,    0,
   41,   41,   41,    0,    0,    0,    0,    0,    0,    0,
  363,    0,    0,    0,  363,  363,  363,    0,  363,  363,
   42,    0,    0,    0,    0,    0,   42,    0,    0,    0,
    0,    0,    0,    0,   42,   42,   42,  363,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  363,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         23,
   70,   10,   73,    0,   44,   40,   15,   40,   24,   42,
    0,   40,   45,   58,   47,   41,   41,    9,   58,   59,
    0,    0,   40,   59,   42,   49,    0,   45,   40,   47,
  123,   41,   40,   59,   42,  125,  125,   45,  123,   47,
   40,  125,  125,   58,   58,   69,   70,   56,  125,   40,
  125,  125,   23,    0,   41,   41,   43,  125,   45,  260,
   84,  123,   71,  125,  134,  123,   40,  123,  125,   61,
   59,  125,  125,   59,  145,   91,  237,   86,  206,  207,
  208,   41,   41,   41,   58,   58,  125,   79,   80,   40,
  106,   42,   41,   40,   45,   41,   47,   79,   80,   84,
   59,   58,   44,   41,    0,  123,  115,  116,  277,   58,
  134,   58,   43,   59,   45,   59,  256,  257,   40,  135,
   42,   59,   93,   45,   59,   47,   59,  288,  125,  138,
  122,  125,    0,  125,  123,  125,   58,  146,  160,   59,
  149,  163,   59,  167,   40,  125,  125,   41,   43,  257,
   45,  125,   43,  177,   45,   83,    0,   41,    1,   41,
    3,  153,   58,  125,   58,   60,   61,   62,   59,  277,
  263,  153,   40,  256,   58,  303,   58,   43,  125,   45,
  172,  123,  167,  268,  112,  275,  275,  256,  257,  274,
   58,  275,  125,   59,  256,  257,   40,  257,  275,  256,
  275,  275,  211,  225,  262,  197,  262,  275,  262,  263,
  264,  264,   40,  237,   58,   42,   44,  256,  234,   44,
   47,  257,  257,  256,  257,  258,  259,  297,  298,  125,
  256,  260,  277,  161,  269,  260,  269,  277,  256,  257,
  258,  259,  257,   44,  262,  257,  279,  257,  256,  257,
  258,  259,   44,   40,  246,   42,  256,  125,   45,  269,
   47,  279,   40,  277,  288,   59,  257,  275,  265,  256,
  256,  279,   59,  297,  298,  265,  268,  269,  270,  271,
   58,  125,  256,  257,  257,  265,  265,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  256,   40,  256,  273,
  274,  275,  276,  277,  278,  256,  257,  258,  259,  256,
  257,  268,   43,  257,  261,   58,  308,  274,  265,  266,
  267,  268,  269,  256,  275,  256,  268,  274,  279,  276,
  277,  278,  274,  404,  256,  257,  258,  259,  408,  409,
   44,   40,   40,   42,  264,  123,   45,  264,   47,   40,
   45,   42,  361,  256,   45,  123,   47,  279,  367,   58,
  256,  257,   44,  122,  435,  261,  125,   41,  438,  265,
  266,  267,  268,  269,  366,  270,  271,  272,  274,   40,
  276,  277,  278,   44,  408,  409,   40,   44,  256,  257,
  256,   41,  401,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  125,  123,   58,  273,  274,  275,  276,  277,
  278,   59,  256,  257,  438,  256,  257,  261,  262,  263,
  264,  265,  266,  267,  268,  269,   40,  277,  256,  273,
  274,  275,  276,  277,  278,  258,  259,  123,  197,  125,
  268,   41,   42,  268,   58,   45,  274,   47,   44,  274,
   41,   42,   43,  125,   45,  256,   47,   40,  257,   44,
   60,   61,   62,   59,  256,   44,  111,  268,   41,  256,
  257,  258,  259,  274,   59,   58,  268,   40,  256,  257,
   59,   40,  274,  261,  129,  130,   40,  265,  266,  267,
  268,  269,  279,   59,   60,  268,  274,  125,  276,  277,
  278,  274,   59,  256,   58,   59,  262,  263,  240,   40,
  125,  125,   59,  256,  257,  268,   58,   59,  261,   41,
   41,  274,  265,  266,  267,  268,  269,   58,   59,  262,
  263,  274,   40,  276,  277,  278,   41,   41,   40,  262,
  263,  264,  125,  125,   59,  277,  278,  279,  280,   40,
   58,   59,   59,  257,  258,  259,   58,  256,  257,  258,
  259,   40,  257,  258,  259,  256,  257,  258,  259,  123,
  256,   43,  275,   45,   58,  257,  258,  259,   59,   58,
  279,  123,   58,  125,   58,  317,   40,   59,  279,   41,
   59,   43,   40,   45,  125,  327,  257,  258,  259,  257,
  258,  259,  256,  257,   58,  275,   59,  261,  275,  125,
   58,   44,  266,  267,  268,  269,   40,  123,   41,   41,
  274,  123,  276,  277,  278,  357,  358,  359,  360,   41,
   40,   43,   59,   45,   58,  367,  123,  203,  204,  262,
  263,  264,  256,  257,   59,   59,  125,  261,   58,   41,
   59,  265,  266,  267,  268,  269,  256,  257,  258,  259,
  274,  393,  276,  277,  278,  256,  257,  258,  259,  123,
  270,  271,  272,  256,  257,  262,  263,  264,  261,  279,
   40,   59,   44,  266,  267,  268,  269,   42,  279,   59,
   45,  274,   47,  276,  277,  278,   41,  275,   58,   44,
   59,  125,  256,  257,   41,   42,  125,  261,   45,   40,
   47,   58,  266,   58,  256,  269,  262,  263,  264,  273,
  262,  123,  276,  277,  278,  256,  257,   58,  256,   41,
  261,   43,   40,   45,   59,  266,  123,   41,  269,   43,
  123,   45,  273,  256,  123,  276,  277,  278,  256,  257,
   58,  123,   58,  261,  256,  257,   58,   58,  266,  261,
   58,  269,   40,   59,  266,  273,   59,  269,  276,  277,
  278,  273,   59,  125,  276,  277,  278,  256,  257,  275,
   58,  275,  261,  125,   59,  256,   58,  266,   41,   59,
  269,  125,  123,   40,  273,  265,  264,  276,  277,  278,
   41,   42,  256,  257,   45,  125,   47,  261,  256,  257,
  125,   58,  266,  261,  125,  269,  125,  125,  266,   59,
  125,  269,  276,  277,  278,  273,  125,   59,  276,  277,
  278,   42,  256,  257,   45,   59,   47,  261,   42,  232,
  233,   45,  266,   47,   58,  269,  256,  257,   59,   59,
   59,  261,  276,  277,  278,   42,  266,   58,   45,  269,
   47,   58,   58,  273,   58,   41,  276,  277,  278,   58,
   59,   59,  256,   60,   61,   62,  256,  257,   59,   42,
   59,   59,   45,  125,   47,   59,  125,  267,  268,  282,
   59,   59,  285,  286,  274,   59,  256,  257,   58,  264,
   59,  261,  257,  258,  259,   59,  266,  264,  264,  269,
   59,  256,   59,  273,   59,   59,  276,  277,  278,  256,
  257,  258,  259,  268,   59,  256,  257,   59,    0,  274,
  261,  324,   41,    0,  123,  266,  125,    0,  269,    0,
   41,   58,  279,   59,   58,  276,  277,  278,  256,  257,
    2,   24,   28,  261,   41,  368,  148,   44,  266,   19,
   -1,  269,   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,
  278,   42,   59,   41,   45,   43,   47,   45,  256,  257,
   -1,   -1,   -1,  261,   42,   -1,   -1,   45,  266,   47,
   -1,  269,   60,   61,   62,   -1,   -1,   -1,  276,  277,
  278,   -1,   -1,   -1,   41,   -1,   43,   -1,   45,  256,
  257,   -1,   -1,   -1,  261,  256,  257,  258,  259,  266,
   -1,   -1,  269,   60,   61,   62,   -1,   -1,   -1,  276,
  277,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,  258,  259,   -1,
   -1,   -1,  256,  257,  258,  259,   -1,   -1,   -1,   -1,
   41,   42,   43,   -1,   45,  269,   47,  256,  279,  256,
  257,  258,  259,  262,   -1,  279,   -1,   58,   59,   60,
   61,   62,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,  279,  256,  257,  258,  259,   -1,   -1,   -1,
   41,   42,   43,   -1,   45,   -1,   47,   41,   42,   43,
   -1,   45,   -1,   47,   -1,   -1,  279,   58,   59,   60,
   61,   62,   -1,   -1,   58,   59,   60,   61,   62,   41,
   -1,   43,   -1,   45,   41,   -1,   43,   -1,   45,   -1,
   -1,   41,  123,   43,  125,   45,   58,   59,   60,   61,
   62,   58,   59,   60,   61,   62,   -1,   -1,   58,   59,
   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,  258,  259,   -1,   -1,   41,   -1,   43,   -1,   45,
   -1,   -1,  123,   -1,  125,  256,  257,  258,  259,  123,
   -1,  125,   58,   59,   60,   61,   62,   -1,  256,  257,
  258,  259,  270,  271,  272,  338,  339,  340,  341,  342,
  343,  123,   -1,  125,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,  345,  346,  347,
   -1,  349,  350,  270,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  376,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  385,   -1,   -1,
   -1,   -1,  390,   -1,   -1,  256,   -1,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  331,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  345,  346,  347,  423,  349,  350,   -1,  427,
  428,  429,   -1,  431,  432,  256,   -1,   -1,   -1,  362,
   -1,  262,  256,   -1,   -1,   -1,   -1,   -1,  262,  270,
  271,  272,  450,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,  385,   -1,  256,   -1,  464,  390,   -1,  256,
  262,   -1,   -1,   -1,   -1,  262,  256,   -1,  270,  271,
  272,   -1,  262,  270,  271,  272,   -1,   -1,   -1,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  423,   -1,   -1,   -1,  427,  428,  429,   -1,  431,  432,
  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  270,  271,  272,  450,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  464,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"programa : ID conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno",
"cuerpo_funcion : retorno",
"cuerpo_funcion : error_bloque_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$1 :",
"factor : '-' CTE_INT $$1",
"$$2 :",
"factor : '-' CTE_DBL $$2",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$3 :",
"seleccion : IF condicion $$3 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$4 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$4 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$5 :",
"expresion_dountil : DO $$5 cuerpo_dountil",
"$$6 :",
"expresion_dountil : etiqueta ':' DO $$6 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$7 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$7 ':' asignacion_do_until ';'",
"cuerpo_dountil : error_cuerpo_dountil",
"$$8 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$8 ':' asignacion_do_until ';'",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : '(' asignacion ')'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion error",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_bloque_funcion : error",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion error asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_asignacion_do_until : asignacion ')'",
"error_asignacion_do_until : '(' ')'",
"error_asignacion_do_until : '(' asignacion",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 449 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
public Parser(AnalizadorLexico analizadorLexico)
{
  this.analizadorLexico = analizadorLexico;
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 948 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 14:
//#line 37 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");}
break;
case 16:
//#line 41 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 17:
//#line 42 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 18:
//#line 45 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);}
break;
case 19:
//#line 46 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);}
break;
case 21:
//#line 50 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");}
break;
case 28:
//#line 63 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);}
break;
case 31:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 33:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 38:
//#line 82 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 40:
//#line 86 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 41:
//#line 87 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 42:
//#line 89 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 45:
//#line 95 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 46:
//#line 97 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 49:
//#line 103 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 50:
//#line 105 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 51:
//#line 107 "gramatica.y"
{verificarRango();}
break;
case 52:
//#line 107 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 53:
//#line 109 "gramatica.y"
{verificarRango();}
break;
case 54:
//#line 109 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 55:
//#line 111 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 57:
//#line 117 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(3).sval);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 64:
//#line 131 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 65:
//#line 133 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 66:
//#line 134 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 67:
//#line 137 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 68:
//#line 138 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 69:
//#line 139 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 70:
//#line 140 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 71:
//#line 141 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 72:
//#line 142 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 80:
//#line 156 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 81:
//#line 159 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 83:
//#line 165 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 86:
//#line 172 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 87:
//#line 174 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 90:
//#line 182 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 93:
//#line 191 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 95:
//#line 196 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 97:
//#line 200 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 99:
//#line 201 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 103:
//#line 208 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 104:
//#line 211 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 106:
//#line 220 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 107:
//#line 223 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
															if (Main.polaca.existeBreak()){ /*Hay un Break*/
																Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
															Main.polaca.addElementPolaca(Main.polaca.desapilar());
															Main.polaca.addElementPolaca("BF");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 109:
//#line 233 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 111:
//#line 237 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 113:
//#line 242 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 115:
//#line 250 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 116:
//#line 254 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 118:
//#line 263 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 119:
//#line 264 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 120:
//#line 267 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 121:
//#line 268 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 122:
//#line 269 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 123:
//#line 270 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 124:
//#line 271 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 125:
//#line 272 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 126:
//#line 276 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 127:
//#line 277 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 128:
//#line 278 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 129:
//#line 279 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 130:
//#line 283 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 131:
//#line 284 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 132:
//#line 288 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 133:
//#line 289 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 134:
//#line 290 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 135:
//#line 291 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 136:
//#line 292 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 137:
//#line 293 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 138:
//#line 294 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 139:
//#line 295 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el cuerpo de la funcion");}
break;
case 140:
//#line 296 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de cierre del cuerpo de la funcion");}
break;
case 141:
//#line 299 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 142:
//#line 300 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 143:
//#line 301 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 144:
//#line 302 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 145:
//#line 305 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 146:
//#line 306 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 147:
//#line 309 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 148:
//#line 313 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 149:
//#line 314 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 150:
//#line 318 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 151:
//#line 319 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 152:
//#line 320 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 153:
//#line 324 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 154:
//#line 325 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 155:
//#line 326 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 156:
//#line 327 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 157:
//#line 328 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 158:
//#line 329 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 159:
//#line 330 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 160:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 161:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 162:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 163:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 164:
//#line 337 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 165:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 166:
//#line 341 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 167:
//#line 342 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 168:
//#line 343 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 169:
//#line 344 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 170:
//#line 347 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 171:
//#line 350 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 172:
//#line 351 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 173:
//#line 352 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 174:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 175:
//#line 356 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 176:
//#line 357 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 177:
//#line 358 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 178:
//#line 359 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 179:
//#line 362 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 180:
//#line 363 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el cuerpo de la seleccion");}
break;
case 181:
//#line 366 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 182:
//#line 367 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 183:
//#line 368 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 184:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 185:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 186:
//#line 371 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 187:
//#line 372 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 188:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 189:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 190:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 191:
//#line 378 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 192:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 193:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 194:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 195:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 196:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 197:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 198:
//#line 387 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 199:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 200:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 201:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la cadena en el mensaje por pantalla");}
break;
case 202:
//#line 393 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 203:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 204:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 205:
//#line 396 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 206:
//#line 399 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 207:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 208:
//#line 401 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 209:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 210:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 211:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 212:
//#line 409 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 213:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 214:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 215:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 216:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 217:
//#line 420 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 218:
//#line 421 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 219:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 220:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until con etiqueta");}
break;
case 221:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 222:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Error en la asignacion del do_until");}
break;
case 223:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 224:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 225:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 226:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 227:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 228:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 229:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 230:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 231:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 232:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 233:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 234:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 235:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1820 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
