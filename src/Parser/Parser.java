//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   34,   34,   34,   34,
   36,   36,   36,   36,   36,   36,   36,   36,   38,   38,
   40,   40,   40,   40,   42,   43,   43,   43,   43,   43,
   32,   32,   32,   32,   32,   32,    7,    7,   45,   45,
   45,   45,   45,   52,   46,   48,   48,   55,   49,   49,
   54,   59,   54,   54,   58,   58,   57,   50,   50,   47,
   47,   63,   63,   67,   51,   70,   51,   51,   68,   74,
   66,   66,   77,   69,   69,   73,   73,   79,   79,   72,
   72,   72,   72,   76,   76,   76,    3,    3,    5,    5,
    5,    5,    5,    5,   12,   12,   12,   12,   12,   13,
   13,   16,   16,   20,   20,   20,   20,   20,   23,   23,
   23,   23,   24,   24,   26,   26,   28,   28,   31,   31,
   31,   31,   33,   33,   33,   33,   33,   33,   33,   35,
   35,   35,   37,   37,   37,   37,   39,   39,   39,   41,
   44,   44,   44,   44,   53,   53,   53,   53,   53,   53,
   56,   56,   60,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   61,   61,   61,   61,   61,   61,
   62,   62,   62,   62,   62,   62,   62,   64,   64,   65,
   65,   65,   65,   71,   71,   71,   75,   75,   75,   75,
   75,   78,   78,   78,   78,   78,   80,   80,   80,   80,
   81,   81,   81,   82,   82,   82,   82,   83,   83,   83,
   83,   83,   83,   83,   83,   83,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    2,    2,    1,    1,    4,    1,    4,    1,
    3,    1,    0,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    4,    1,    0,    4,    1,
    6,    0,    6,    1,    6,    1,    1,    5,    1,    3,
    1,    4,    1,    0,    3,    0,    5,    1,    1,    0,
    7,    1,    0,    7,    1,    5,    1,    3,    1,    3,
    1,    2,    1,    5,    4,    1,    1,    1,    3,    1,
    1,    2,    2,    2,    2,    2,    3,    1,    2,    3,
    3,    2,    2,    6,    6,    6,    6,    6,    5,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    4,    4,    5,    4,    4,    3,    3,    3,
    3,    3,    2,    3,    2,    3,    4,    4,    3,    4,
    5,    2,    2,    2,    3,    3,    3,    4,    2,    3,
    2,    3,    4,    4,    4,    4,    5,    5,    5,    5,
    5,    5,    3,    4,    9,    9,    9,    9,    9,    9,
    4,    4,    4,    4,    4,    1,    2,    1,    2,    3,
    4,    3,    3,    9,   10,    2,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    7,    2,    3,    3,    4,
    2,    2,    3,    1,    3,    2,    1,    4,    4,    4,
    4,    3,    3,    3,    3,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  131,    0,  128,    3,    5,    0,    0,
    0,    0,    0,    0,   15,    0,   16,    0,  104,   84,
    0,    0,    0,    0,    0,    0,    0,    0,   14,   19,
   22,  218,   60,   77,   78,   79,   80,   81,   82,   83,
   87,   90,   99,  101,    0,  108,    0,  132,    0,  142,
    0,    0,    0,    0,    0,   51,   52,    0,    0,    0,
    0,    0,    0,    0,    0,   46,   49,   50,   56,   58,
  217,    0,    0,    0,    0,    0,    0,   42,  191,   94,
    0,    0,  143,   20,    0,  219,    0,    0,    0,    0,
  226,  129,    6,    7,   12,    0,   17,  139,    0,  136,
    0,    0,    0,    2,    4,    0,    0,    0,  244,   11,
    0,    0,  123,  140,  137,    0,    0,  187,    0,    0,
    0,   53,   54,  173,  175,   66,   67,   68,    0,    0,
    0,    0,    0,   64,    0,    0,  186,    0,    0,    0,
    0,    0,    0,    0,   72,   71,   76,   73,   74,   75,
    0,    0,  192,    0,    0,    0,    0,    0,    0,  185,
    0,    0,  100,  103,    0,  105,    0,  112,   85,    0,
   13,  141,   18,    0,  106,  122,    0,    0,   10,    0,
    0,  188,   86,    0,  179,    0,   69,   70,  182,  180,
   59,    0,  184,  170,    0,  171,    0,  174,   47,  176,
   48,    0,    0,    0,    0,    0,    0,  203,   96,    0,
  168,    0,    0,    0,   89,    0,  212,  213,    0,  215,
    0,    0,    0,    0,   21,    0,   25,    0,    0,   29,
   32,    0,    0,    0,    0,    0,    0,  211,    0,    0,
    0,    0,  126,    0,  245,  120,    0,  177,  178,   57,
    0,    0,  195,    0,    0,  196,    0,    0,  204,    0,
  194,    0,  193,    0,  166,    0,  164,  163,   98,  153,
  150,    0,  154,   31,    0,    0,  152,    0,  222,    0,
  220,    0,    0,    0,    0,  109,    0,    0,    0,    0,
    0,    0,    0,  107,    0,  115,    0,    0,  199,  200,
    0,  201,    0,    0,    0,  198,  197,  165,   41,    0,
    0,    0,    0,  221,  102,    0,    0,    0,    0,    0,
  254,    0,  253,  252,    0,    0,    0,    0,    0,    0,
    0,    0,  181,   91,   93,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  110,    0,    0,  125,  250,
    0,  249,  248,    0,    0,    0,    0,    0,    0,    0,
    0,  119,    0,    0,    0,    0,    0,    0,    0,    0,
  149,    0,    0,    0,  117,    0,    0,    0,    0,    0,
  124,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  224,    0,    0,    0,   95,    0,    0,    0,  147,    0,
   35,   37,   23,  148,  146,  145,  144,    0,    0,  228,
  237,  229,  231,  111,  230,  227,    0,    0,    0,    0,
  113,    0,    0,    0,    0,    0,    0,    0,    0,  156,
  158,    0,    0,   38,    0,   40,    0,  155,   34,    0,
  239,    0,  238,  225,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  161,    0,   36,  159,   33,
   24,  240,    0,  233,  234,  236,  114,  235,  232,  207,
  208,  210,  209,  206,  205,   39,  116,
};
final static short yydgoto[] = {                          5,
    6,   47,    7,  398,    8,   24,  110,  141,   26,   27,
   28,   29,   30,  225,  159,   31,  226,  399,  440,  227,
  228,  229,  230,  231,  400,  401,  433,  402,   76,   77,
  436,  152,   78,   65,   66,   67,   68,   69,   70,  131,
   33,  132,  133,  134,   34,   35,   36,   37,   38,   39,
   40,   89,   41,   79,  154,   42,  142,  208,  303,   80,
  209,   43,  163,   44,  164,  166,   88,   45,  294,  244,
   46,  112,  373,  378,  168,  242,  448,  296,  374,  375,
  362,  113,  243,
};
final static short yysindex[] = {                       423,
  601,    0,  469,    0,    0,    0,    0,    0,  135,   50,
    6,  -25,  -24,  -15,    0, 1072,    0,  326,    0,    0,
 -191, -193,  -20,  601,  601,   48,  180,   60,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -31,    0,  -61,    0,   -9,    0,
  702, -163,  102,   92,  141,    0,    0,  597,  -28,  378,
  -32,  -32,  244,  633,  463,    0,    0,    0,    0,    0,
    0,   92,  760,  941, 1033,   70,  924,    0,    0,    0,
  402,    2,    0,    0,  750,    0,   -6,  625,  758,  404,
    0,    0,    0,    0,    0,  434,    0,    0,  454,    0,
  425,  362,  220,    0,    0,  381,   50,  467,    0,    0,
  785,  410,    0,    0,    0,  120,   92,    0,  146, 1072,
  686,    0,    0,    0,    0,    0,    0,    0,  432,   98,
   97,  416,    0,    0, 1078, 1096,    0,  -35,   41,  808,
  941,  383,  422,  791,    0,    0,    0,    0,    0,    0,
  924, 1072,    0,  -62, 1072,  500,  111,  528,   -7,    0,
  236,  567,    0,    0,  663,    0,  489,    0,    0,  564,
    0,    0,    0,  831,    0,    0,   30,  570,    0,  358,
  463,    0,    0,  511,    0,   35,    0,    0,    0,    0,
    0,   98,    0,    0,  463,    0,  463,    0,    0,    0,
    0, -115,  400,  534,  538,  584,  477,    0,    0,  520,
    0,   69,  905,  626,    0,  668,    0,    0,  607,    0,
  413, -148,   49,  445,    0,  665,    0,  133,    0,    0,
    0,  682,  455,  673,  449,  -78,  474,    0,  -39, -211,
  855,  609,    0,  649,    0,    0,  498,    0,    0,    0,
  700,  706,    0,  707,  -48,    0,  941,  941,    0,  732,
    0,  737,    0,  763,    0,  776,    0,    0,    0,    0,
    0,   38,    0,    0,  741, -148,    0,  742,    0,  746,
    0,  498,  498,  393,  498,    0,  -53,  749,  751,  -22,
 -211,  556,  734,    0,  705,    0,  777,  581,    0,    0,
  780,    0,  452,  715,  716,    0,    0,    0,    0,   84,
  335,  335,  798,    0,    0,  786,  789,  429,  802,  815,
    0,  821,    0,    0,   59,  825,  828,  498,  599,  -73,
  613, -194,    0,    0,    0,  -81,  628,  -82,  781,  784,
  788,  644,  155,  155,  155,    0,  155,  155,    0,    0,
  849,    0,    0,  854,  498,  498,  437,  498,  983, 1072,
  857,    0,  890,  941,  858,  546,  502,  546,  546,  546,
    0,  -19,  862,  869,    0,  875,  876,  155,  878,  879,
    0,  155,  856,  891,  441,  893,  895, 1107,  615,  615,
    0,  914,  830,  832,    0,  507,  494,  691,    0,  -57,
    0,    0,    0,    0,    0,    0,    0,  137,  919,    0,
    0,    0,    0,    0,    0,    0,  902,  155,  155,  155,
    0,  155,  155,   92,  615,  709,  -71,  710,  712,    0,
    0,  593,  907,    0,   40,    0,  839,    0,    0,  546,
    0,  125,    0,    0,  911,  918,  923,  155,  928,  929,
  930,  933,  -45,  934,  937,    0,  114,    0,    0,    0,
    0,    0,  938,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    8,  998,    0,    0,    0,    0,    0,    0,  -14,
    9,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0, 1001,   25,   31,  324,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, 1002,    0,
    0,    0,    0,   71, 1185,    0,    0,    0,    0,    0,
    0,    0,  131,    0, 1163,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  282,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  942,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  350,    0,
    0,    0,    0,    0,    0,    0,  -18,  -69,    0,    0,
  -68,    0,    0,    0,    0,    0,  154,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  139,    0,    0,    0,    0,    0,    0,    0,
  523,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  963,    0,
  496,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -67,    0,    0,
 1215,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   58,    0,    0, 1237,    0, 1335,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  448,    0,    0,  190,    0,
    0,    0,  547,    0,    0,    0,    0,    0,   86,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -66,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   62,    0,    0,    0,  456,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0, 1248,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  554,    0,    0,    0,  255,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  301,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  555,    0,    0,    0,    0,    0,    0,    0,
    0,  -65,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   76,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   65,   87,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  144,  421,    0,    0,    0,    0,    0,
    0,    0,  316,    0,  366,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  375,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  958,    0,    0,  596,    0,    0,    4,  -33,    0,   -8,
  979,    0,    0,    0,    0,    0,  799,  459,    0,    0,
    0,  -59,    0,    0,  610,    0,    0,    0, 1145,   16,
    0,  -74,    0,  354,    0,  411,    0,   -1,    0,  -52,
    0,    0,  -79,    0,  920,    0,    0,    0,    0,    0,
    0,    0,    0,  877,    0,    0,  -70,  587,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  606,    0,    0,
    0,  -40, 1101,    0,    0,  149,    0,    0, -250,    0,
    0,    0,    0,
};
final static int YYTABLESIZE=1607;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         32,
   53,   32,  155,  143,   25,  321,   25,  127,  216,   60,
  302,  121,   60,  473,   75,   82,   61,  111,  287,   60,
  408,   62,   32,   32,    8,   64,  103,   25,   25,   17,
    9,   85,  223,  161,  162,  325,  222,  130,  129,  109,
  366,  364,  158,  109,   17,  286,  284,  167,  216,   32,
  189,  357,  193,  453,  111,  247,  121,  246,  256,  255,
   74,    3,  359,    4,   71,   91,  216,  439,   90,  203,
  189,   32,   32,  119,  360,  250,  213,  135,  310,  136,
  459,  361,  135,   91,  136,   60,   32,   32,  245,   63,
  151,   61,  222,  114,   60,  311,   62,   74,  183,  149,
  148,  150,   61,  101,   92,  242,   95,  221,  233,   32,
  189,  135,  251,  136,  179,  105,  183,  350,  100,   15,
   61,  409,   64,  242,  236,   17,   27,  241,  189,   30,
    1,  111,    1,  216,  116,  184,  186,  191,   32,   32,
  241,  338,  129,   27,  179,  241,  204,  205,  252,    8,
  224,  219,   51,  190,  476,    9,  135,  442,  136,  212,
  115,   61,  271,   32,   60,  463,   62,  214,  277,  218,
  216,   63,   32,  149,  148,  150,  276,  441,   52,   62,
   63,  363,   65,   65,  243,   15,  304,  305,  135,  214,
  136,   17,  452,  190,    1,  189,  283,   62,  438,   73,
  251,  356,  243,  286,  183,  247,  121,  246,  256,  255,
  241,  190,  372,  224,  224,  301,  313,  286,  472,  224,
  198,   55,   56,   57,   55,   56,   57,  120,  266,  214,
   72,   55,   56,   57,  286,   81,   73,  359,   98,   32,
   83,   84,   32,   59,  179,  102,   59,  214,  221,  360,
  126,  127,  128,   59,  223,   32,   32,   51,  109,  241,
   15,  157,  109,    1,  216,  216,   17,  224,  216,  216,
  216,  216,  216,  216,  216,  216,  216,  216,  190,  130,
  129,  216,  216,  216,  216,  216,  216,  130,  129,    8,
  249,   32,  393,  394,  223,    9,  200,   55,   56,   57,
  202,  339,  340,  341,  221,   54,   55,   56,   57,  145,
  146,  147,  223,  183,  214,  286,   15,   61,   58,   59,
  242,  427,   17,  138,  264,  153,  189,  189,   59,  367,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
  202,   30,  241,  189,  189,  189,  189,  189,  189,  135,
  251,   15,  190,   30,  126,  127,  128,   17,  202,   30,
  155,   32,   32,  138,   32,   32,   32,   32,   32,   25,
   25,   25,   25,   25,  389,  390,   55,   56,   57,  223,
  462,  138,  213,  145,  146,  147,   63,   53,  221,  135,
   32,   50,  295,  359,   62,   65,   65,   65,   59,  243,
   15,  182,   15,  425,   88,  360,   17,  135,   17,  190,
  190,  359,  435,  190,  190,  190,  190,  190,  190,  190,
  190,  190,  190,  360,  162,  202,  190,  190,  190,  190,
  190,  190,   75,  160,   61,   96,   97,   60,   32,   62,
  157,  330,  156,   25,  170,  214,  214,  457,  138,  214,
  214,  214,  214,  214,  214,  214,  214,  214,  214,  192,
  129,  118,  214,  214,  214,  214,  214,  214,   75,  181,
   61,  124,  125,   60,  135,   62,   75,   52,   61,  118,
   75,   60,   61,   62,  174,   60,  345,   62,  195,  197,
  162,  232,  126,  127,  128,  280,  175,  101,  420,  160,
  126,  127,  128,   51,  138,  169,  169,  207,   21,  139,
  223,  223,  171,  279,  223,  223,  223,  223,  223,  223,
  223,  223,  223,  223,  255,  176,   22,  223,  223,  223,
  223,  223,  223,  432,  180,   61,   63,   75,   60,   61,
   62,   21,   60,   88,   62,    3,  210,    4,  199,  201,
   52,  248,  431,  135,   63,  136,  202,  202,  217,   22,
  202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
  169,  157,  169,  202,  202,  202,  202,  202,  202,  138,
  138,   86,   87,  138,  138,   21,  220,   28,  138,  138,
  138,  138,  138,   48,  151,   26,   23,  138,   49,  138,
  138,  138,   15,   22,   28,  135,  135,  234,   17,  135,
  135,  151,   26,  237,  135,  135,  135,  135,  135,   93,
   94,  162,  238,  135,  403,  135,  135,  135,  246,   51,
  160,  430,  247,  456,   61,  122,  123,   60,   61,   62,
   21,   60,  259,   62,  204,  205,  206,   97,   72,   55,
   56,   57,  149,  148,  150,  118,  257,  135,   22,  136,
  258,  204,  205,  254,   21,  269,  267,  318,  135,  270,
  136,   59,  126,  127,  128,  135,  118,  136,    1,    2,
  172,  173,   22,  109,   72,   55,   56,   57,   21,  187,
  188,  137,   72,   55,   56,   57,   72,   55,   56,   57,
  273,  274,   21,  169,  169,  275,  240,   59,  268,  169,
  135,  385,  136,  204,  205,   59,  169,   92,   92,   59,
   22,  109,  278,  282,    9,   10,  185,   61,   11,   12,
   60,  281,   62,  292,   13,   14,   15,   16,  204,  205,
  260,   21,   17,  298,   18,   19,   20,  165,  285,   72,
   55,   56,   57,   72,   55,   56,   57,  396,   10,   22,
  109,   11,   12,   50,  299,  300,  397,   13,   14,   15,
   16,  293,   59,   21,   15,   17,   59,   18,   19,   20,
   17,  204,  205,  262,   97,   97,   97,  235,  253,  256,
  306,  240,  135,  261,  136,  307,  263,   21,  312,   21,
  314,  396,   10,  308,  315,   11,   12,  323,  160,  324,
  397,   13,   14,   15,   16,   22,  309,   22,  135,   17,
  136,   18,   19,   20,   21,  404,  405,  406,  407,  331,
  328,  211,   61,  116,  332,   60,  333,   62,  334,  336,
  337,  342,   22,  343,  288,  289,  344,   21,  144,   55,
   56,   57,  117,   55,   56,   57,    9,   10,  329,  347,
   11,   12,  145,  146,  147,   22,   13,   14,   15,   16,
   21,   59,  348,  355,   17,   59,   18,   19,   20,  349,
  106,  107,  140,  352,   11,   12,  353,  358,  240,  335,
   13,  365,  322,   16,   21,  326,  327,  108,  461,  371,
   18,   19,   20,  368,  106,  107,  369,  381,   11,   12,
  370,  382,  291,  418,   13,  391,  395,   16,  106,  107,
  410,  239,   11,   12,   18,   19,   20,  411,   13,   21,
  351,   16,  202,  412,  413,  108,  415,  416,   18,   19,
   20,   72,   55,   56,   57,  265,   61,   22,  419,   60,
  422,   62,  423,   21,  428,  397,  429,  106,  107,  443,
  444,   11,   12,  460,   59,  458,  135,   13,  136,  464,
   16,   22,  451,  454,  108,  455,  465,   18,   19,   20,
   21,  466,   63,  149,  148,  150,  468,  469,  470,  106,
  107,  471,  474,   11,   12,  475,  477,  130,   22,   13,
  133,  134,   16,   28,  104,   99,  239,  437,  169,   18,
   19,   20,  392,  106,  107,  106,  107,   11,   12,   11,
   12,  272,    0,   13,   61,   13,   16,   60,   16,   62,
  215,    0,    0,   18,   19,   18,   19,   20,  426,    0,
  177,  107,    0,    0,   11,   12,   72,   55,   56,   57,
   13,    0,    0,   16,    0,    0,    0,  178,    0,    0,
   18,   19,   20,  106,  107,    0,    0,   11,   12,   59,
    0,    0,    0,   13,   61,    0,   16,   60,    0,   62,
    0,    0,    0,   18,   19,   20,  106,  107,    0,    0,
   11,   12,  149,  148,  150,    0,   13,    0,    0,   16,
    0,    0,    0,  239,    0,    0,   18,   19,   20,    0,
  106,  107,    0,   61,   11,   12,   60,    0,   62,   61,
   13,    0,   60,   16,   62,    0,    0,  290,    0,    0,
   18,   19,   20,    0,    0,    0,    0,   61,    0,    0,
   60,    0,   62,    0,    0,  106,  107,    0,   61,   11,
   12,   60,    0,   62,    0,   13,    0,    0,   16,    0,
   72,   55,   56,   57,    0,   18,   19,   20,    0,  106,
  107,    0,    0,   11,   12,    0,    0,    0,    0,   13,
    0,    0,   16,   59,    0,    0,    0,    0,    0,   18,
   19,   20,    0,  145,  146,  147,  106,  107,    0,    0,
   11,   12,    0,   43,    0,   43,   13,   43,    0,   16,
    0,    0,    0,    0,    0,    0,   18,   19,   20,    0,
   43,   43,   43,   43,   43,   55,   55,   55,    0,   55,
    0,   55,    0,    0,    0,    0,    0,    0,   72,   55,
   56,   57,   55,   55,   55,   55,   55,    0,    0,    0,
    0,  388,    0,    0,    0,  172,    0,  172,    0,  172,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  172,  172,  172,  172,  172,   44,    0,   44,
    0,   44,    0,    0,    0,   43,    0,   43,  144,   55,
   56,   57,    0,    0,   44,   44,   44,   44,   44,    0,
    0,    0,  145,  146,  147,  167,  167,   55,    0,   55,
    0,   59,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   72,   55,   56,
   57,    0,    0,  194,   55,   56,   57,  172,    0,  172,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   59,  196,   55,   56,   57,    0,   59,    0,    0,   44,
    0,   44,  424,   55,   56,   57,    0,    0,    0,    0,
  167,    0,  167,    0,   59,   45,    0,   45,    0,   45,
    0,    0,    0,    0,    0,   59,    0,    0,    0,    0,
    0,  297,   45,   45,   45,   45,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   43,   43,
    0,    0,    0,    0,   43,    0,  316,  317,  319,  320,
    0,   43,   43,   43,   43,    0,    0,    0,    0,    0,
   55,   55,    0,    0,  376,  377,   55,  379,  380,    0,
    0,    0,    0,   55,   55,   55,   55,   45,    0,   45,
    0,    0,  346,    0,    0,    0,    0,    0,    0,    0,
  172,  172,  354,    0,    0,    0,  172,    0,  414,    0,
    0,    0,  417,  172,  172,  172,  172,    0,    0,    0,
    0,    0,   44,   44,    0,    0,    0,    0,   44,  383,
  384,  386,  387,  167,  167,   44,   44,   44,   44,  167,
    0,    0,    0,    0,    0,    0,  167,    0,  445,  446,
  447,    0,  449,  450,    0,    0,    0,    0,    0,  421,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  434,    0,    0,    0,    0,    0,    0,  467,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   45,   45,    0,    0,    0,    0,   45,    0,    0,    0,
    0,    0,    0,   45,   45,   45,   45,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
    9,    3,   77,   74,    1,   59,    3,    0,    0,   45,
   59,   40,   45,   59,   40,   40,   42,   51,   58,   45,
   40,   47,   24,   25,    0,   10,   58,   24,   25,   44,
    0,   16,   40,   40,   87,   58,   44,   44,   45,   58,
  123,  123,   41,   58,   59,  257,  125,   88,   40,   51,
  130,  125,  132,  125,   88,  125,  125,  125,  125,  125,
  123,  123,  257,  125,   59,  277,   58,  125,  260,  140,
    0,   73,   74,   58,  269,   41,  151,   43,   41,   45,
   41,  332,   43,  277,   45,   45,   88,   89,   59,   40,
   75,   42,   44,  257,   45,   58,   47,  123,   41,   60,
   61,   62,   41,   44,  125,   41,   59,  256,  161,  111,
   40,   43,  192,   45,  111,  125,   59,   59,   59,  268,
   59,  372,  107,   59,  165,  274,   41,   41,   58,   44,
  123,  165,  125,  125,   43,  120,  121,   41,  140,  141,
  174,   58,   45,   58,  141,   59,  262,  263,  264,  125,
  159,   41,  123,    0,   41,  125,   43,  408,   45,  144,
   59,   42,  222,  165,   45,   41,   47,  152,  228,   59,
  155,   41,  174,   60,   61,   62,   44,   41,   44,   41,
   40,  263,   44,   45,   41,  268,  257,  258,   43,    0,
   45,  274,  264,   40,  256,  125,  275,   59,  256,  262,
  125,  275,   59,  257,   59,  275,  275,  275,  275,  275,
  244,   58,   58,  222,  223,  264,  276,  257,  264,  228,
  256,  257,  258,  259,  257,  258,  259,  256,  213,   40,
  256,  257,  258,  259,  257,  260,  262,  257,   59,  241,
  256,  257,  244,  279,  241,  277,  279,   58,  256,  269,
  257,  258,  259,  279,    0,  257,  258,  123,  277,  293,
  268,  260,  277,  256,  256,  257,  274,  276,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  125,   44,
   45,  273,  274,  275,  276,  277,  278,   44,   45,  265,
  256,  293,  363,  364,   40,  265,  256,  257,  258,  259,
    0,  310,  311,  312,  256,  256,  257,  258,  259,  270,
  271,  272,   58,  256,  125,  257,  268,  256,  269,  279,
  256,  392,  274,    0,  256,  256,  256,  257,  279,  338,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   40,  256,  256,  273,  274,  275,  276,  277,  278,    0,
  275,  268,  256,  268,  257,  258,  259,  274,   58,  274,
  435,  363,  364,   40,  366,  367,  368,  369,  370,  366,
  367,  368,  369,  370,  359,  360,  257,  258,  259,  125,
  256,   58,  457,  270,  271,  272,  256,  396,  256,   40,
  392,  257,  244,  257,  256,  257,  258,  259,  279,  256,
  268,  256,  268,  388,  123,  269,  274,   58,  274,  256,
  257,  257,  397,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  269,   59,  125,  273,  274,  275,  276,
  277,  278,   40,   59,   42,  256,  257,   45,  440,   47,
  125,  293,   41,  440,   41,  256,  257,  432,  125,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   44,
   45,   41,  273,  274,  275,  276,  277,  278,   40,  116,
   42,   61,   62,   45,  125,   47,   40,   44,   42,   59,
   40,   45,   42,   47,  123,   45,   58,   47,  135,  136,
  125,  256,  257,  258,  259,   41,  277,   44,   58,  125,
  257,  258,  259,  123,   42,   58,   59,  125,   40,   47,
  256,  257,   59,   59,  260,  261,  262,  263,  264,  265,
  266,  267,  268,  269,  125,   59,   58,  273,  274,  275,
  276,  277,  278,   40,  125,   42,   41,   40,   45,   42,
   47,   40,   45,  262,   47,  123,  125,  125,  138,  139,
   44,   41,   59,   43,   59,   45,  256,  257,   59,   58,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  123,  256,  125,  273,  274,  275,  276,  277,  278,  256,
  257,  256,  257,  260,  261,   40,   59,   41,  265,  266,
  267,  268,  269,  125,   41,   41,    1,  274,    3,  276,
  277,  278,  268,   58,   58,  256,  257,   41,  274,  260,
  261,   58,   58,  125,  265,  266,  267,  268,  269,   24,
   25,  256,   59,  274,  123,  276,  277,  278,   59,  123,
  256,  125,  275,   41,   42,  258,  259,   45,   42,   47,
   40,   45,   59,   47,  262,  263,  264,  125,  256,  257,
  258,  259,   60,   61,   62,   59,  123,   43,   58,   45,
  123,  262,  263,  264,   40,   59,   41,  275,   43,  257,
   45,  279,  257,  258,  259,   43,  256,   45,  256,  257,
  256,  257,   58,   59,  256,  257,  258,  259,   40,  258,
  259,   59,  256,  257,  258,  259,  256,  257,  258,  259,
  256,  257,   40,  256,  257,   41,   58,  279,   41,  262,
   43,  275,   45,  262,  263,  279,  269,  262,  263,  279,
   58,   59,   41,  275,  256,  257,   41,   42,  260,  261,
   45,   59,   47,  125,  266,  267,  268,  269,  262,  263,
  264,   40,  274,   44,  276,  277,  278,  123,  275,  256,
  257,  258,  259,  256,  257,  258,  259,  256,  257,   58,
   59,  260,  261,  257,   59,   59,  265,  266,  267,  268,
  269,  123,  279,   40,  268,  274,  279,  276,  277,  278,
  274,  262,  263,  264,  262,  263,  264,  125,  202,  203,
   59,   58,   43,  207,   45,   59,  210,   40,   58,   40,
   59,  256,  257,   41,   59,  260,  261,   59,   59,   59,
  265,  266,  267,  268,  269,   58,   41,   58,   43,  274,
   45,  276,  277,  278,   40,  367,  368,  369,  370,  125,
  275,   41,   42,   43,   58,   45,  256,   47,   59,  125,
  125,   44,   58,   58,  239,  240,   58,   40,  256,  257,
  258,  259,  256,  257,  258,  259,  256,  257,  125,   58,
  260,  261,  270,  271,  272,   58,  266,  267,  268,  269,
   40,  279,   58,  275,  274,  279,  276,  277,  278,   59,
  256,  257,  123,   59,  260,  261,   59,  275,   58,  303,
  266,  264,  287,  269,   40,  290,  291,  273,  440,  256,
  276,  277,  278,  123,  256,  257,  123,   59,  260,  261,
  123,   58,   58,   58,  266,   59,   59,  269,  256,  257,
   59,  273,  260,  261,  276,  277,  278,   59,  266,   40,
  325,  269,  125,   59,   59,  273,   59,   59,  276,  277,
  278,  256,  257,  258,  259,   41,   42,   58,   58,   45,
   58,   47,   58,   40,  125,  265,  125,  256,  257,   41,
   59,  260,  261,  125,  279,   59,   43,  266,   45,   59,
  269,   58,  264,  264,  273,  264,   59,  276,  277,  278,
   40,   59,   41,   60,   61,   62,   59,   59,   59,  256,
  257,   59,   59,  260,  261,   59,   59,    0,   58,  266,
    0,    0,  269,   41,   47,   27,  273,  398,   89,  276,
  277,  278,  123,  256,  257,  256,  257,  260,  261,  260,
  261,  223,   -1,  266,   42,  266,  269,   45,  269,   47,
  154,   -1,   -1,  276,  277,  276,  277,  278,  125,   -1,
  256,  257,   -1,   -1,  260,  261,  256,  257,  258,  259,
  266,   -1,   -1,  269,   -1,   -1,   -1,  273,   -1,   -1,
  276,  277,  278,  256,  257,   -1,   -1,  260,  261,  279,
   -1,   -1,   -1,  266,   42,   -1,  269,   45,   -1,   47,
   -1,   -1,   -1,  276,  277,  278,  256,  257,   -1,   -1,
  260,  261,   60,   61,   62,   -1,  266,   -1,   -1,  269,
   -1,   -1,   -1,  273,   -1,   -1,  276,  277,  278,   -1,
  256,  257,   -1,   42,  260,  261,   45,   -1,   47,   42,
  266,   -1,   45,  269,   47,   -1,   -1,  273,   -1,   -1,
  276,  277,  278,   -1,   -1,   -1,   -1,   42,   -1,   -1,
   45,   -1,   47,   -1,   -1,  256,  257,   -1,   42,  260,
  261,   45,   -1,   47,   -1,  266,   -1,   -1,  269,   -1,
  256,  257,  258,  259,   -1,  276,  277,  278,   -1,  256,
  257,   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,  266,
   -1,   -1,  269,  279,   -1,   -1,   -1,   -1,   -1,  276,
  277,  278,   -1,  270,  271,  272,  256,  257,   -1,   -1,
  260,  261,   -1,   41,   -1,   43,  266,   45,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,  276,  277,  278,   -1,
   58,   59,   60,   61,   62,   41,   42,   43,   -1,   45,
   -1,   47,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
  258,  259,   58,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,  269,   -1,   -1,   -1,   41,   -1,   43,   -1,   45,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   58,   59,   60,   61,   62,   41,   -1,   43,
   -1,   45,   -1,   -1,   -1,  123,   -1,  125,  256,  257,
  258,  259,   -1,   -1,   58,   59,   60,   61,   62,   -1,
   -1,   -1,  270,  271,  272,   58,   59,  123,   -1,  125,
   -1,  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,  258,
  259,   -1,   -1,  256,  257,  258,  259,  123,   -1,  125,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  279,  256,  257,  258,  259,   -1,  279,   -1,   -1,  123,
   -1,  125,  256,  257,  258,  259,   -1,   -1,   -1,   -1,
  123,   -1,  125,   -1,  279,   41,   -1,   43,   -1,   45,
   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,   -1,   -1,
   -1,  247,   58,   59,   60,   61,   62,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,  262,   -1,  282,  283,  284,  285,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,  344,  345,  262,  347,  348,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,  123,   -1,  125,
   -1,   -1,  318,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,  328,   -1,   -1,   -1,  262,   -1,  378,   -1,
   -1,   -1,  382,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,  355,
  356,  357,  358,  256,  257,  269,  270,  271,  272,  262,
   -1,   -1,   -1,   -1,   -1,   -1,  269,   -1,  418,  419,
  420,   -1,  422,  423,   -1,   -1,   -1,   -1,   -1,  385,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  397,   -1,   -1,   -1,   -1,   -1,   -1,  448,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  256,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : error_expresion",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"factor : '-' CTE_INT",
"factor : '-' CTE_DBL",
"factor : ID",
"factor : invocacion",
"factor : TOF64 '(' expresion ')'",
"factor : error_factor",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"parametro_real : '-' CTE_INT",
"parametro_real : '-' CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : expresion_dountil",
"$$4 :",
"ejecutable_defer : DEFER $$4 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$5 :",
"seleccion : IF condicion $$5 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$6 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$6 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$7 :",
"expresion_dountil : DO $$7 cuerpo_dountil",
"$$8 :",
"expresion_dountil : etiqueta ':' DO $$8 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$9 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$9 cuerpo_asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$10 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$10 cuerpo_asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"cuerpo_asignacion_do_until : ':' '(' asignacion_do_until ')' ';'",
"cuerpo_asignacion_do_until : error_cuerpo_asignacion_do_until",
"asignacion_do_until : ID ASSIGN expresion",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_declarativa : tipo ';'",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_retorno_expresion : expresion",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_termino : '*' factor",
"error_termino : termino '*' error",
"error_termino : '/' factor",
"error_termino : termino '/' error",
"error_factor : TOF64 error expresion ')'",
"error_factor : TOF64 '(' expresion error",
"error_factor : TOF64 '(' ')'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_asignacion : ID error",
"error_asignacion : ID ASSIGN error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : invocacion",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : ':' asignacion_do_until ')'",
"error_cuerpo_asignacion_do_until : ':' '(' ')'",
"error_cuerpo_asignacion_do_until : ':' '(' asignacion_do_until error",
"error_asignacion_do_until : ASSIGN expresion",
"error_asignacion_do_until : ID expresion",
"error_asignacion_do_until : ID ASSIGN error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables",
};

//#line 613 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;
public static String nombre_funcion_invocacion = "";
public static ArrayList<String> parametros_declaracion_funcion;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
	this.parametros_declaracion_funcion = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
		int nro = Integer.parseInt(lexema); //SOLO SE PERMITEN NUMEROS POSITIVOS
		analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
		Main.polaca.addElementPolaca(nro);
		Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
		Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
		Main.polaca.addElementPolaca(flotante);
	}
	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}

public String ambitoReal(String nombre, String ambito){
	String lexema = nombre + "." + ambito;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	int posicion = lexema.lastIndexOf('.');
	while ((clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) && (posicion != -1)){
		lexema = lexema.substring(0, posicion);
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
		posicion = lexema.lastIndexOf('.');
	}
	return lexema;
}
					
					

	
	
					
					
					
//#line 1065 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 13:
//#line 41 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													if(lista_de_variables!=null){
														for(String lexema : lista_de_variables) /* por cada variable declarada*/
															incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
														lista_de_variables.clear();
													}}
break;
case 15:
//#line 53 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 57 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 60 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 67 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;
								Main.polaca.addElementPolaca(this.nombre_funcion + "." + this.ambito);
								Main.polaca.addElementPolaca("#FUN");}
break;
case 23:
//#line 74 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																	for (int i = 1; i <= parametros_declaracion_funcion.size(); i++)
																		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "parametro_" + i, this.parametros_declaracion_funcion.get(i-1));
																}
																this.parametros_declaracion_funcion.clear();
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 99 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);
								this.parametros_declaracion_funcion.add(ambitoReal(nombreParam, ambito_actual));}
break;
case 33:
//#line 110 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												Main.polaca.addElementPolaca("#RET");
												if (this.existeDefer){
													this.existeDefer = false;
													Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 34:
//#line 115 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.polaca.addElementPolaca("#RET");
									Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");
									if (this.existeDefer){
										this.existeDefer = false;
										Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 36:
//#line 124 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 41:
//#line 134 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 44:
//#line 139 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 141 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 47:
//#line 146 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 48:
//#line 148 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 51:
//#line 154 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 52:
//#line 159 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 53:
//#line 164 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									actualizarRango();}
break;
case 54:
//#line 166 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									actualizarRango();}
break;
case 55:
//#line 168 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 57:
//#line 175 "gramatica.y"
{Main.polaca.addElementPolaca("#TOF64");}
break;
case 59:
//#line 180 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
															Main.polaca.addElementPolaca("#CALL");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la funcion " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 66:
//#line 205 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 67:
//#line 211 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 68:
//#line 217 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 69:
//#line 223 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 70:
//#line 226 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 71:
//#line 231 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 72:
//#line 232 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 73:
//#line 233 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 74:
//#line 234 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 75:
//#line 235 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 76:
//#line 236 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 84:
//#line 250 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.addElementPolaca("#DEFER");}
break;
case 85:
//#line 252 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer"); 
											Main.polaca.addElementPolaca("#FINDEFER");}
break;
case 86:
//#line 256 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 88:
//#line 265 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("#BF");}
break;
case 91:
//#line 272 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 92:
//#line 275 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("#BI");
																Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 95:
//#line 284 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 98:
//#line 294 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.polaca.addElementPolaca("#OUT");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", "cadena");}}
break;
case 100:
//#line 304 "gramatica.y"
{String id = val_peek(1).sval;
														Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
														Main.polaca.addElementPolaca("#DISCARD");
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
														if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
															Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");
														}
														else{
														if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
															Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
														}
														this.cantidad_parametros_reales = 0;}
break;
case 102:
//#line 319 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 104:
//#line 323 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
						Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 106:
//#line 325 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);}
break;
case 110:
//#line 336 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("#BT");}
break;
case 111:
//#line 339 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 113:
//#line 349 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("#BT");}
break;
case 114:
//#line 352 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 118:
//#line 367 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion en la sentencia do-until");
												String id = val_peek(2).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 120:
//#line 376 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("#BI");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 122:
//#line 382 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("#BI");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 124:
//#line 391 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("#BI");
																					String nombre_etiqueta = val_peek(1).sval;
																					if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																						Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																					Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 125:
//#line 400 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("#BI");
																		String nombre_etiqueta = val_peek(1).sval;
																		if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																		Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 127:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 128:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 129:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 130:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 131:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 132:
//#line 420 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 133:
//#line 421 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 134:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 135:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 136:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 137:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 138:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 139:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable en la declaracion");}
break;
case 140:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 141:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 142:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 143:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 144:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 145:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 146:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 147:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 148:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 149:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 150:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 151:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 152:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 153:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 154:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 155:
//#line 460 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 156:
//#line 461 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 157:
//#line 465 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 158:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 159:
//#line 470 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion de retorno");}
break;
case 160:
//#line 471 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion de retorno");}
break;
case 161:
//#line 472 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio en la expresion de retorno");}
break;
case 162:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura y cierre de la expresion de retorno");}
break;
case 163:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 164:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 165:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 166:
//#line 480 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 167:
//#line 481 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 168:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 169:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 170:
//#line 486 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 171:
//#line 487 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 172:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 173:
//#line 491 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 174:
//#line 492 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 175:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 176:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 177:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion en la conversion tof64");}
break;
case 178:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion en la conversion tof64");}
break;
case 179:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion en la conversion tof64");}
break;
case 180:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 181:
//#line 505 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 182:
//#line 506 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 183:
//#line 507 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 184:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 185:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 186:
//#line 512 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 187:
//#line 513 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 188:
//#line 514 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 189:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, solo se define el identificador de la asignacion");}
break;
case 190:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se reconoce la expresion");}
break;
case 191:
//#line 519 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 192:
//#line 520 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 193:
//#line 523 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 194:
//#line 524 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 195:
//#line 525 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 196:
//#line 526 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 197:
//#line 527 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 198:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 199:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 200:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 201:
//#line 531 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 202:
//#line 532 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 203:
//#line 533 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 204:
//#line 534 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 205:
//#line 537 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 206:
//#line 538 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 207:
//#line 539 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 208:
//#line 540 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 209:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 210:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 211:
//#line 545 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 212:
//#line 546 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 213:
//#line 547 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 214:
//#line 548 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 215:
//#line 549 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 216:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 217:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 218:
//#line 554 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el discard antes de la invocacion a la funcion");}
break;
case 219:
//#line 555 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 220:
//#line 558 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 221:
//#line 559 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 222:
//#line 560 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 223:
//#line 561 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 224:
//#line 564 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el do en la sentencia do_until");}
break;
case 225:
//#line 565 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 226:
//#line 566 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 227:
//#line 570 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 228:
//#line 571 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 229:
//#line 572 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 230:
//#line 573 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 231:
//#line 574 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 232:
//#line 577 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 233:
//#line 578 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 234:
//#line 579 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 235:
//#line 580 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 236:
//#line 581 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 237:
//#line 584 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 238:
//#line 585 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 239:
//#line 586 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 240:
//#line 587 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 241:
//#line 590 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar en la sentencia do-until");}
break;
case 242:
//#line 591 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion en la sentencia do-until");}
break;
case 243:
//#line 592 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar en la sentencia do-until");}
break;
case 244:
//#line 595 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 245:
//#line 596 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia ejecutable");}
break;
case 246:
//#line 597 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 247:
//#line 598 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 248:
//#line 601 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia");}
break;
case 249:
//#line 602 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 250:
//#line 603 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 251:
//#line 604 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 252:
//#line 605 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break antes del ':'");}
break;
case 253:
//#line 606 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 254:
//#line 607 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 255:
//#line 608 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 256:
//#line 609 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break con etiqueta en el cuerpo del do-until con etiqueta");}
break;
//#line 2140 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
