//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   34,   34,   34,   34,
   36,   36,   38,   36,   39,   36,   36,   36,   36,   36,
   40,   40,   42,   42,   42,   42,   44,   45,   45,   45,
   32,   32,   32,   32,   32,   32,    7,    7,   47,   47,
   47,   47,   47,   54,   48,   50,   50,   57,   51,   51,
   56,   61,   56,   56,   60,   60,   59,   52,   52,   66,
   49,   49,   65,   65,   70,   53,   73,   53,   53,   71,
   77,   69,   69,   80,   72,   72,   76,   76,   82,   82,
   75,   75,   75,   75,   79,   79,   79,    3,    3,    5,
    5,    5,    5,    5,    5,   12,   12,   12,   12,   13,
   13,   16,   16,   20,   20,   20,   20,   20,   23,   23,
   23,   23,   24,   24,   26,   26,   28,   28,   31,   31,
   31,   31,   33,   33,   33,   33,   33,   33,   33,   35,
   35,   35,   37,   37,   37,   37,   41,   41,   41,   43,
   46,   46,   46,   46,   55,   55,   55,   55,   55,   58,
   58,   62,   62,   62,   62,   62,   62,   62,   62,   62,
   62,   62,   62,   63,   63,   63,   63,   63,   63,   64,
   64,   64,   64,   64,   64,   64,   67,   67,   68,   68,
   68,   68,   74,   74,   74,   78,   78,   78,   78,   78,
   81,   81,   81,   81,   81,   83,   83,   83,   83,   84,
   84,   84,   85,   85,   85,   85,   86,   86,   86,   86,
   86,   86,   86,   86,   86,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    0,    3,    0,    3,    1,    1,    4,    1,
    4,    1,    3,    1,    0,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    4,    1,    0,    4,    1,
    6,    0,    6,    1,    6,    1,    1,    5,    1,    0,
    4,    1,    4,    1,    0,    3,    0,    5,    1,    1,
    0,    7,    1,    0,    7,    1,    5,    1,    3,    1,
    3,    1,    2,    1,    5,    4,    1,    1,    1,    3,
    1,    1,    2,    2,    2,    2,    2,    3,    1,    3,
    3,    2,    2,    6,    6,    6,    6,    6,    5,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    4,    4,    5,    4,    4,    3,    3,    3,
    3,    3,    2,    3,    2,    3,    4,    4,    3,    4,
    5,    2,    2,    2,    3,    3,    3,    4,    2,    2,
    3,    4,    4,    4,    4,    5,    5,    5,    5,    5,
    5,    3,    4,    9,    9,    9,    9,    9,    9,    4,
    4,    4,    4,    4,    1,    2,    1,    2,    3,    4,
    3,    3,    9,   10,    2,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    2,    3,    3,    4,    2,
    2,    3,    1,    3,    2,    1,    4,    4,    4,    4,
    3,    3,    3,    3,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  132,    0,  129,    3,    5,    0,    0,
    0,    0,    0,    0,   15,    0,   16,    0,  105,   84,
    0,    0,    0,    0,    0,    0,    0,    0,   14,   19,
   22,  217,   62,   77,   78,   79,   80,   81,   82,   83,
   87,   90,   99,  102,    0,  109,    0,  133,    0,  142,
    0,    0,    0,    0,    0,   51,   52,    0,    0,    0,
    0,    0,    0,    0,    0,   46,   49,   50,   58,   60,
  216,    0,    0,    0,    0,    0,    0,   42,  190,   94,
    0,    0,  143,   20,    0,  218,  100,    0,    0,    0,
  225,  130,    6,    7,   12,    0,   17,    0,  137,    0,
    0,    0,    2,    4,    0,    0,    0,  243,   11,    0,
    0,  124,  140,  138,    0,  187,    0,    0,    0,   53,
   55,  173,  175,   68,   69,   70,    0,    0,    0,    0,
   66,    0,    0,  186,    0,    0,    0,    0,    0,    0,
    0,   72,   71,   76,   73,   74,   75,    0,    0,  191,
    0,    0,    0,    0,    0,    0,  185,    0,    0,  106,
    0,  113,   85,    0,   13,  141,   18,    0,  107,  123,
    0,    0,   10,    0,    0,  188,   86,    0,  179,    0,
   54,   56,  182,  180,   61,    0,  184,  170,    0,  171,
    0,  174,   47,  176,   48,    0,    0,    0,    0,    0,
    0,  202,   96,    0,  168,    0,    0,    0,   89,    0,
  211,  212,    0,  214,    0,    0,    0,    0,   21,    0,
   25,    0,    0,   29,   32,    0,    0,  101,  104,    0,
    0,    0,  210,    0,    0,    0,    0,  127,    0,  244,
  121,    0,  177,  178,   59,    0,    0,  194,    0,    0,
  195,    0,    0,  203,    0,  193,    0,  192,    0,  166,
    0,  164,  163,   98,  153,  150,    0,  154,   31,    0,
    0,  152,    0,    0,    0,    0,    0,    0,    0,  110,
    0,    0,    0,    0,    0,    0,    0,  108,    0,  116,
    0,    0,  198,  199,    0,  200,    0,    0,    0,  197,
  196,  165,   41,    0,    0,    0,    0,    0,  221,    0,
  219,    0,    0,    0,    0,    0,  253,    0,  252,  251,
    0,    0,    0,    0,    0,    0,    0,    0,  181,   91,
   93,    0,    0,    0,    0,    0,    0,    0,  220,  103,
    0,    0,    0,  111,    0,    0,  126,  249,    0,  248,
  247,    0,    0,    0,    0,    0,    0,    0,    0,  120,
    0,    0,    0,    0,    0,    0,    0,    0,  149,    0,
    0,    0,  118,    0,    0,    0,    0,    0,  125,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  223,    0,
    0,    0,   95,    0,    0,    0,  147,    0,   35,   37,
   23,  148,  146,  145,  144,    0,    0,  227,  236,  228,
  230,  112,  229,  226,    0,    0,    0,    0,  114,    0,
    0,    0,    0,    0,    0,    0,    0,  156,  158,    0,
    0,   38,    0,   40,    0,  155,   34,    0,  238,    0,
  237,  224,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  161,    0,   36,  159,   33,   24,  239,
    0,  232,  233,  235,  115,  234,  231,  206,  207,  209,
  208,  205,  204,   39,  117,
};
final static short yydgoto[] = {                          5,
    6,   47,    7,  396,    8,   24,  109,  138,   26,   27,
   28,   29,   30,  219,  156,   31,  220,  397,  438,  221,
  222,  223,  224,  225,  398,  399,  431,  400,   76,   77,
  434,  149,   78,   65,   66,   67,   68,  181,  182,   69,
   70,  128,   33,  129,  130,  131,   34,   35,   36,   37,
   38,   39,   40,   89,   41,   79,  151,   42,  139,  202,
  297,   80,  203,   43,  228,  158,   44,  229,  160,   88,
   45,  288,  239,   46,  111,  371,  376,  162,  237,  446,
  290,  372,  373,  360,  112,  238,
};
final static short yysindex[] = {                       506,
  514,    0,  376,    0,    0,    0,    0,    0,  504,    1,
   12,  -25,  -24,  201,    0,  927,    0,  332,    0,    0,
 -202, -183,   36,  514,  514,   51,  378,  110,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -48,    0,  446,    0,   60,    0,
  588,  -62,  132,  173,  165,    0,    0,  865,    5,  405,
  -10,  -10,  359,  631,  311,    0,    0,    0,    0,    0,
    0,  173,  675,  837,  946,   37,   84,    0,    0,    0,
  259,   -5,    0,    0,  767,    0,    0,  463,  810,  310,
    0,    0,    0,    0,    0,  338,    0,  148,    0,  403,
  257,  149,    0,    0,  322,    1,  374,    0,    0,  702,
  341,    0,    0,    0,  -33,    0,  450,  927,   48,    0,
    0,    0,    0,    0,    0,    0,  574,   62,  621,    0,
    0,  952,  977,    0,  -15,  490,  726,  837,  346,  343,
  671,    0,    0,    0,    0,    0,    0,   84,  927,    0,
  -96,  927,  413,   61,  439,    9,    0,  381,  561,    0,
  375,    0,    0,  449,    0,    0,    0,  757,    0,    0,
   33,  484,    0,  230,  311,    0,    0,  559,    0,  129,
    0,    0,    0,    0,    0,  574,    0,    0,  311,    0,
  311,    0,    0,    0,    0,  578,  481,  434,  447,  521,
  641,    0,    0,  747,    0,  134,  878,  897,    0,  902,
    0,    0,  532,    0,  350, -144,   20,  415,    0,  562,
    0,  228,    0,    0,    0,  366,  571,    0,    0,  351,
 -100,  355,    0,  -39, -161,  771,  496,    0,  615,    0,
    0,  452,    0,    0,    0,  597,  590,    0,  592,   -2,
    0,  837,  837,    0,  626,    0,  630,    0,  650,    0,
  955,    0,    0,    0,    0,    0,  139,    0,    0,  598,
 -144,    0,  656,  140,  648,  452,  452,  274,  452,    0,
  -38,  662,  663,  -18, -161,  455,  640,    0,  602,    0,
  679,  498,    0,    0,  696,    0,  419,  639,  642,    0,
    0,    0,    0,   49, -121, -121,  724,  717,    0,  718,
    0,  731,  743,  494,  748,  755,    0,  760,    0,    0,
   38,  761,  764,  452,  539,  -87,  549, -194,    0,    0,
    0,   26,  564,  -90,  723,  730,  735,  591,    0,    0,
  -47,  -47,  -47,    0,  -47,  -47,    0,    0,  800,    0,
    0,  804,  452,  452,  336,  452,  919,  927,  808,    0,
  785,  837,  814,  401,  427,  401,  401,  401,    0,   46,
  815,  824,    0,  828,  830,  -47,  831,  835,    0,  -47,
  811,  840,  500,  841,  844, 1008,   70,   70,    0,  812,
  786,  789,    0,  460,  156,  661,    0,  -66,    0,    0,
    0,    0,    0,    0,    0,   44,  874,    0,    0,    0,
    0,    0,    0,    0,  862,  -47,  -47,  -47,    0,  -47,
  -47,  173,   70,  669,  -91,  670,  682,    0,    0,  537,
  880,    0,   39,    0,  823,    0,    0,  401,    0,   91,
    0,    0,  890,  895,  896,  -47,  898,  901,  906,  908,
   17,  911,  914,    0,   78,    0,    0,    0,    0,    0,
  917,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   18,  981,    0,    0,    0,    0,    0,    0,    7,
   68,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  984,    3,    8,  162,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  985,    0,
    0,    0,    0,  131, 1104,    0,    0,    0,    0,    0,
    0,    0,  123,    0, 1067,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -86,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  299,    0,    0,
    0,    0,    0,    0,    0,  -11,  -81,    0,    0,  -69,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  546,
    0,    0,    0,    0,    0,    0,    0,  523,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  936,    0,  948,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -64,    0,    0, 1179,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -28,    0,    0, 1210,    0,
 1232,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  957,
    0,    0,  187,    0,    0,    0,  159,    0,    0,    0,
    0,    0,   11,    0,    0,  522,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -63,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   19,    0,    0,    0,  437,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1121,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  488,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  213,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  555,    0,    0,  250,
    0,    0,    0,    0,    0,    0,    0,   27,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  157,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  145,  281,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  318,  479,    0,    0,    0,    0,    0,    0,    0,
  295,    0,   96,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  358,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  943,    0,    0, 1108,    0,    0,    4,   -9,    0,   -8,
  974,    0,    0,    0,    0,    0,  788,  692,    0,    0,
    0, -111,    0,    0,  616,    0,    0,    0, 1032,   16,
    0,  -71,    0,  429,    0,  664,    0,    0,    0,   -1,
    0,  -75,    0,    0,  -23,    0,  931,    0,    0,    0,
    0,    0,    0,    0,    0,  870,    0,    0,  -70,  659,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  601,    0,    0,    0,  -34, 1022,    0,    0, -169,    0,
    0, -289,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1504;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         32,
   53,   32,    8,  140,   25,  152,   25,    9,   61,  102,
  370,   60,  183,   62,   75,   82,   61,  128,  281,   60,
  317,   62,   32,   32,  278,   64,   74,   25,   25,   60,
  183,   85,  364,  451,   60,  155,   88,  355,  359,  321,
   63,  110,   61,  246,  119,   60,  110,   62,  217,   32,
   17,   27,  216,  161,   30,  122,  296,   90,  437,   63,
  245,  255,  357,  216,  110,   17,  197,  215,   27,  289,
   71,   32,   32,  117,  358,  471,  207,   63,  110,  457,
  407,  132,  227,  133,  439,  406,   32,   32,  179,   61,
  148,  240,   60,   91,   62,  280,  348,   74,  146,  145,
  147,  213,  185,  183,  266,  187,  334,  215,   32,   95,
  272,  215,  132,  173,  133,   91,  440,  326,  474,  212,
  132,   64,  133,   15,  231,  215,  132,    8,  133,   17,
  189,  461,    9,  178,  180,   32,   32,  146,  145,  147,
    1,  173,    1,  146,  145,  147,   15,  218,  362,  110,
  274,  254,   17,  100,  162,   51,  206,   32,  236,  307,
   92,  139,  246,   65,  208,   73,   32,  210,   99,  245,
  189,  132,  450,  133,  277,   88,  132,   15,  133,  304,
  310,  298,  299,   17,  104,  241,  213,  354,  189,  436,
  114,  100,  215,  246,  113,  430,  305,   61,  309,   28,
   60,  139,   62,  241,   63,  122,  165,  218,  218,  357,
  245,  255,  201,  218,  429,  115,   28,  280,  280,  139,
  162,  358,  261,   55,   56,   57,  213,  183,  101,  236,
   72,   55,   56,   57,   32,   81,   73,   32,  280,  173,
  192,   55,   56,   57,  213,   59,   55,   56,   57,  222,
   32,   32,  201,   59,  154,  189,   54,   55,   56,   57,
  118,  295,  218,   59,  215,  110,   30,    8,   59,   58,
  201,  271,    9,    1,   63,  215,   15,  236,   30,   59,
  470,  250,   17,  110,   30,   32,  139,   15,  361,  222,
  391,  392,  150,   17,  280,  335,  336,  337,  136,  153,
  357,  254,  357,   72,   55,   56,   57,  222,  142,  143,
  144,  213,  358,   75,  358,   61,   15,  184,   60,  425,
   62,  240,   17,  215,  215,  365,   59,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  201,  136,  240,
  215,  215,  215,  215,  215,  215,  460,  142,  143,  144,
  164,  162,  135,  142,  143,  144,  136,  136,  242,   32,
   32,  152,   32,   32,   32,   32,   32,   25,   25,   25,
   25,   25,  387,  388,  222,   75,  242,   61,   65,  168,
   60,   52,   62,  207,  244,   53,  189,  189,   32,  259,
  189,  189,  189,  189,  189,  189,  189,  189,  189,  189,
  241,  423,  127,  189,  189,  189,  189,  189,  189,  127,
  433,   72,   55,   56,   57,   21,  160,  139,  139,  157,
  226,  139,  139,  136,  127,  169,  139,  139,  139,  139,
  139,  250,  170,   22,   59,  139,   32,  139,  139,  139,
   21,   25,  213,  213,   51,  455,  213,  213,  213,  213,
  213,  213,  213,  213,  213,  213,   83,   84,   22,  213,
  213,  213,  213,  213,  213,  174,   21,  204,  201,  201,
  201,  211,  201,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  160,  215,   22,  201,  201,  201,  201,  201,
  201,   75,  132,   61,  133,   15,   60,  214,   62,  232,
   48,   17,   21,   52,  242,  222,  222,  233,  177,  222,
  222,  222,  222,  222,  222,  222,  222,  222,  222,  119,
   22,  108,  222,  222,  222,  222,  222,  222,  151,   72,
   55,   56,   57,   75,   60,   61,  240,  119,   60,   75,
   62,   61,  241,  175,   60,  151,   62,   52,  314,  401,
  157,  343,   59,   21,  136,  136,  252,  418,  136,  136,
  189,  191,   65,  136,  136,  136,  136,  136,    3,  253,
    4,   22,  136,  242,  136,  136,  136,  454,   61,  254,
   65,   60,   51,   62,  428,  159,   64,   86,   87,   67,
  264,   72,   55,   56,   57,   26,  146,  145,  147,  243,
   21,  132,  270,  133,   64,  250,  265,  198,  199,  200,
  383,  275,   26,  160,   59,  124,  125,  126,   22,  108,
  286,  273,  124,  125,  126,  276,   51,   21,    3,  279,
    4,    9,   10,   96,   97,   11,   12,  124,  125,  126,
  292,   13,   14,   15,   16,   22,  108,   97,  293,   17,
  294,   18,   19,   20,   21,  306,  394,   10,  166,  167,
   11,   12,  120,  121,  186,  395,   13,   14,   15,   16,
  268,  269,  235,  132,   17,  133,   18,   19,   20,   21,
  198,  199,  394,   10,  300,  230,   11,   12,  301,  134,
  302,  395,   13,   14,   15,   16,  308,  235,   92,   92,
   17,    1,   18,   19,   20,  176,  311,   72,   55,   56,
   57,  205,   61,  115,   21,   60,   50,   62,  105,  106,
  319,  320,   11,   12,  122,  123,  327,   15,   13,  324,
   59,   16,   22,   17,  119,  107,  328,  287,   18,   19,
   20,   21,  198,  199,  249,  194,   55,   56,   57,   72,
   55,   56,   57,  329,  330,   72,   55,   56,   57,   22,
   50,    1,    2,  332,  325,   21,  333,  338,   59,    9,
   10,   15,   59,   11,   12,  339,  340,   17,   59,   13,
   14,   15,   16,   22,   97,   97,   97,   17,  341,   18,
   19,   20,  141,   55,   56,   57,   21,  137,  193,  195,
  342,   64,   67,   67,   67,  345,  142,  143,  144,  132,
   21,  133,  346,  353,  235,   59,  105,  106,  347,  350,
   11,   12,  351,  356,   21,  157,   13,  363,  285,   16,
  124,  125,  126,  107,  282,  283,   18,   19,   20,  198,
  199,  247,   22,  105,  106,  366,  369,   11,   12,   21,
  196,   21,  367,   13,  248,  251,   16,  368,  379,  256,
  107,  380,  258,   18,   19,   20,  389,   22,  416,   22,
  105,  106,  393,  408,   11,   12,   21,  124,  125,  126,
   13,  318,  409,   16,  322,  323,  410,  234,  411,  413,
   18,   19,   20,  414,   22,  105,  106,  417,  420,   11,
   12,  421,  198,  199,  255,   13,   61,  390,   16,   60,
  426,   62,  234,  427,  441,   18,   19,   20,  260,   61,
  442,  349,   60,  116,   62,  395,   72,   55,   56,   57,
  105,  106,  449,  452,   11,   12,  424,  262,  456,  132,
   13,  133,  263,   16,  132,  453,  133,  458,  462,   59,
   18,   19,   20,  463,  464,  331,  466,  171,  106,  467,
   61,   11,   12,   60,  468,   62,  469,   13,   61,  472,
   16,   60,  473,   62,  172,  475,   28,   18,   19,   20,
  131,  105,  106,  134,  135,   11,   12,   61,   65,  103,
   60,   13,   62,   61,   16,  303,   60,  132,   62,  133,
   98,   18,   19,   20,  267,  146,  145,  147,  198,  199,
  257,  435,  105,  106,  169,  169,   11,   12,   61,  163,
  209,   60,   13,   62,    0,   16,  105,  106,    0,  234,
   11,   12,   18,   19,   20,    0,   13,    0,    0,   16,
  105,  106,    0,  284,   11,   12,   18,   19,   20,   61,
   13,    0,   60,   16,   62,    0,  402,  403,  404,  405,
   18,   19,   20,    0,    0,  105,  106,  105,  106,   11,
   12,   11,   12,    0,    0,   13,    0,   13,   16,  169,
   16,  169,    0,    0,    0,   18,   19,   18,   19,   20,
    0,    0,  105,  106,    0,    0,   11,   12,    0,    0,
    0,    0,   13,    0,    0,   16,    0,   43,   23,   43,
   49,   43,   18,   19,   20,    0,    0,    0,    0,    0,
   72,   55,   56,   57,   43,   43,   43,   43,   43,  459,
    0,   93,   94,   72,   55,   56,   57,    0,    0,    0,
    0,    0,    0,   59,   57,   57,   57,    0,   57,    0,
   57,    0,    0,    0,    0,    0,   59,    0,    0,    0,
    0,   57,   57,   57,   57,   57,    0,    0,    0,    0,
    0,    0,    0,    0,   72,   55,   56,   57,  167,  167,
    0,    0,   72,   55,   56,   57,    0,  386,    0,   43,
    0,   43,    0,    0,    0,    0,    0,   59,    0,    0,
    0,  141,   55,   56,   57,   59,    0,  188,   55,   56,
   57,    0,  169,  169,    0,  142,  143,  144,  169,  172,
    0,  172,    0,  172,   59,  169,   57,    0,   57,    0,
   59,    0,  190,   55,   56,   57,  172,  172,  172,  172,
  172,    0,    0,  167,    0,  167,    0,    0,    0,    0,
   44,    0,   44,    0,   44,   59,    0,    0,    0,    0,
    0,    0,    0,  422,   55,   56,   57,   44,   44,   44,
   44,   44,   45,  291,   45,    0,   45,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   59,    0,    0,   45,
   45,   45,   45,   45,    0,    0,    0,    0,    0,    0,
    0,  172,    0,  172,    0,    0,    0,  312,  313,  315,
  316,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   43,   43,    0,    0,    0,    0,   43,    0,
    0,    0,   44,    0,   44,   43,   43,   43,   43,    0,
    0,    0,    0,    0,    0,  344,    0,    0,    0,    0,
    0,    0,    0,    0,   45,  352,   45,    0,    0,   57,
   57,    0,    0,  374,  375,   57,  377,  378,    0,    0,
    0,    0,   57,   57,   57,   57,  167,  167,    0,    0,
    0,    0,  167,    0,  381,  382,  384,  385,    0,  167,
    0,    0,    0,    0,    0,    0,    0,  412,    0,    0,
    0,  415,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  419,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  432,    0,    0,    0,
    0,    0,    0,    0,  172,  172,    0,  443,  444,  445,
  172,  447,  448,    0,    0,    0,    0,  172,  172,  172,
  172,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   44,   44,  465,    0,    0,
    0,   44,    0,    0,    0,    0,    0,    0,   44,   44,
   44,   44,    0,    0,    0,    0,    0,   45,   45,    0,
    0,    0,    0,   45,    0,    0,    0,    0,    0,    0,
   45,   45,   45,   45,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
    9,    3,    0,   74,    1,   77,    3,    0,   42,   58,
   58,   45,   41,   47,   40,   40,   42,    0,   58,   45,
   59,   47,   24,   25,  125,   10,  123,   24,   25,   45,
   59,   16,  123,  125,   45,   41,  123,  125,  328,   58,
   40,   51,   42,  125,   40,   45,   58,   47,   40,   51,
   44,   41,   44,   88,   44,  125,   59,  260,  125,   41,
  125,  125,  257,   44,   58,   59,  137,    0,   58,  239,
   59,   73,   74,   58,  269,   59,  148,   59,   88,   41,
  370,   43,  158,   45,   41,   40,   88,   89,   41,   42,
   75,   59,   45,  277,   47,  257,   59,  123,   60,   61,
   62,   41,   41,  127,  216,  129,   58,   40,  110,   59,
  222,  256,   43,  110,   45,  277,  406,  287,   41,   59,
   43,  106,   45,  268,  159,   58,   43,  125,   45,  274,
    0,   41,  125,  118,  119,  137,  138,   60,   61,   62,
  123,  138,  125,   60,   61,   62,  268,  156,  123,  159,
  226,  125,  274,   44,   59,  123,  141,  159,  168,  271,
  125,    0,  186,   41,  149,  262,  168,  152,   59,   41,
   40,   43,  264,   45,  275,  262,   43,  268,   45,   41,
   41,  252,  253,  274,  125,   41,    0,  275,   58,  256,
   59,   44,  125,  275,  257,   40,   58,   42,   59,   41,
   45,   40,   47,   59,   40,  275,   59,  216,  217,  257,
  275,  275,    0,  222,   59,   43,   58,  257,  257,   58,
  125,  269,  207,  257,  258,  259,   40,  256,  277,  239,
  256,  257,  258,  259,  236,  260,  262,  239,  257,  236,
  256,  257,  258,  259,   58,  279,  257,  258,  259,    0,
  252,  253,   40,  279,  260,  125,  256,  257,  258,  259,
  256,  264,  271,  279,  256,  277,  256,  265,  279,  269,
   58,   44,  265,  256,  256,  256,  268,  287,  268,  279,
  264,  125,  274,  277,  274,  287,  125,  268,  263,   40,
  361,  362,  256,  274,  257,  304,  305,  306,    0,   41,
  257,  275,  257,  256,  257,  258,  259,   58,  270,  271,
  272,  125,  269,   40,  269,   42,  268,  256,   45,  390,
   47,   41,  274,  256,  257,  334,  279,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  125,   40,   59,
  273,  274,  275,  276,  277,  278,  256,  270,  271,  272,
   41,  256,   42,  270,  271,  272,   58,   47,   41,  361,
  362,  433,  364,  365,  366,  367,  368,  364,  365,  366,
  367,  368,  357,  358,  125,   40,   59,   42,  256,  123,
   45,   44,   47,  455,  256,  394,  256,  257,  390,  256,
  260,  261,  262,  263,  264,  265,  266,  267,  268,  269,
  256,  386,   44,  273,  274,  275,  276,  277,  278,   44,
  395,  256,  257,  258,  259,   40,   59,  256,  257,  125,
   40,  260,  261,  125,   44,  277,  265,  266,  267,  268,
  269,  275,   59,   58,  279,  274,  438,  276,  277,  278,
   40,  438,  256,  257,  123,  430,  260,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  256,  257,   58,  273,
  274,  275,  276,  277,  278,  125,   40,  125,  256,  257,
  125,   59,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  125,  256,   58,  273,  274,  275,  276,  277,
  278,   40,   43,   42,   45,  268,   45,   59,   47,  125,
  125,  274,   40,   44,  275,  256,  257,   59,   59,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   41,
   58,   59,  273,  274,  275,  276,  277,  278,   41,  256,
  257,  258,  259,   40,   45,   42,  256,   59,   45,   40,
   47,   42,   59,  115,   45,   58,   47,   44,  275,  123,
  256,   58,  279,   40,  256,  257,  123,   58,  260,  261,
  132,  133,   41,  265,  266,  267,  268,  269,  123,  123,
  125,   58,  274,  256,  276,  277,  278,   41,   42,   59,
   59,   45,  123,   47,  125,  123,   41,  256,  257,   44,
   59,  256,  257,  258,  259,   41,   60,   61,   62,   41,
   40,   43,   41,   45,   59,  125,  257,  262,  263,  264,
  275,   41,   58,  256,  279,  257,  258,  259,   58,   59,
  125,  256,  257,  258,  259,  275,  123,   40,  123,  275,
  125,  256,  257,  256,  257,  260,  261,  257,  258,  259,
   44,  266,  267,  268,  269,   58,   59,  125,   59,  274,
   59,  276,  277,  278,   40,   58,  256,  257,  256,  257,
  260,  261,  258,  259,   44,  265,  266,  267,  268,  269,
  256,  257,   58,   43,  274,   45,  276,  277,  278,   40,
  262,  263,  256,  257,   59,  125,  260,  261,   59,   59,
   41,  265,  266,  267,  268,  269,   41,   58,  262,  263,
  274,  256,  276,  277,  278,  256,   59,  256,  257,  258,
  259,   41,   42,   43,   40,   45,  257,   47,  256,  257,
   59,   59,  260,  261,   61,   62,  125,  268,  266,  275,
  279,  269,   58,  274,  256,  273,   58,  123,  276,  277,
  278,   40,  262,  263,  264,  256,  257,  258,  259,  256,
  257,  258,  259,  256,   59,  256,  257,  258,  259,   58,
  257,  256,  257,  125,  125,   40,  125,   44,  279,  256,
  257,  268,  279,  260,  261,   59,   59,  274,  279,  266,
  267,  268,  269,   58,  262,  263,  264,  274,   58,  276,
  277,  278,  256,  257,  258,  259,   40,  123,  135,  136,
   58,  256,  257,  258,  259,   58,  270,  271,  272,   43,
   40,   45,   58,  275,   58,  279,  256,  257,   59,   59,
  260,  261,   59,  275,   40,   59,  266,  264,   58,  269,
  257,  258,  259,  273,  234,  235,  276,  277,  278,  262,
  263,  264,   58,  256,  257,  123,  256,  260,  261,   40,
  125,   40,  123,  266,  196,  197,  269,  123,   59,  201,
  273,   58,  204,  276,  277,  278,   59,   58,   58,   58,
  256,  257,   59,   59,  260,  261,   40,  257,  258,  259,
  266,  281,   59,  269,  284,  285,   59,  273,   59,   59,
  276,  277,  278,   59,   58,  256,  257,   58,   58,  260,
  261,   58,  262,  263,  264,  266,   42,  123,  269,   45,
  125,   47,  273,  125,   41,  276,  277,  278,   41,   42,
   59,  321,   45,   59,   47,  265,  256,  257,  258,  259,
  256,  257,  264,  264,  260,  261,  125,   41,   59,   43,
  266,   45,   41,  269,   43,  264,   45,  125,   59,  279,
  276,  277,  278,   59,   59,  297,   59,  256,  257,   59,
   42,  260,  261,   45,   59,   47,   59,  266,   42,   59,
  269,   45,   59,   47,  273,   59,   41,  276,  277,  278,
    0,  256,  257,    0,    0,  260,  261,   42,   41,   47,
   45,  266,   47,   42,  269,   41,   45,   43,   47,   45,
   27,  276,  277,  278,  217,   60,   61,   62,  262,  263,
  264,  396,  256,  257,   58,   59,  260,  261,   42,   89,
  151,   45,  266,   47,   -1,  269,  256,  257,   -1,  273,
  260,  261,  276,  277,  278,   -1,  266,   -1,   -1,  269,
  256,  257,   -1,  273,  260,  261,  276,  277,  278,   42,
  266,   -1,   45,  269,   47,   -1,  365,  366,  367,  368,
  276,  277,  278,   -1,   -1,  256,  257,  256,  257,  260,
  261,  260,  261,   -1,   -1,  266,   -1,  266,  269,  123,
  269,  125,   -1,   -1,   -1,  276,  277,  276,  277,  278,
   -1,   -1,  256,  257,   -1,   -1,  260,  261,   -1,   -1,
   -1,   -1,  266,   -1,   -1,  269,   -1,   41,    1,   43,
    3,   45,  276,  277,  278,   -1,   -1,   -1,   -1,   -1,
  256,  257,  258,  259,   58,   59,   60,   61,   62,  438,
   -1,   24,   25,  256,  257,  258,  259,   -1,   -1,   -1,
   -1,   -1,   -1,  279,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,  258,  259,   58,   59,
   -1,   -1,  256,  257,  258,  259,   -1,  269,   -1,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,
   -1,  256,  257,  258,  259,  279,   -1,  256,  257,  258,
  259,   -1,  256,  257,   -1,  270,  271,  272,  262,   41,
   -1,   43,   -1,   45,  279,  269,  123,   -1,  125,   -1,
  279,   -1,  256,  257,  258,  259,   58,   59,   60,   61,
   62,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,   -1,
   41,   -1,   43,   -1,   45,  279,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  258,  259,   58,   59,   60,
   61,   62,   41,  242,   43,   -1,   45,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  279,   -1,   -1,   58,
   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  123,   -1,  125,   -1,   -1,   -1,  276,  277,  278,
  279,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,  123,   -1,  125,  269,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,  314,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  123,  324,  125,   -1,   -1,  256,
  257,   -1,   -1,  342,  343,  262,  345,  346,   -1,   -1,
   -1,   -1,  269,  270,  271,  272,  256,  257,   -1,   -1,
   -1,   -1,  262,   -1,  353,  354,  355,  356,   -1,  269,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  376,   -1,   -1,
   -1,  380,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  383,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  395,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  256,  257,   -1,  416,  417,  418,
  262,  420,  421,   -1,   -1,   -1,   -1,  269,  270,  271,
  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,  446,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : error_expresion",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$4 :",
"factor : '-' CTE_INT $$4",
"$$5 :",
"factor : '-' CTE_DBL $$5",
"factor : ID",
"factor : invocacion",
"factor : TOF64 '(' expresion ')'",
"factor : error_factor",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : expresion_dountil",
"$$6 :",
"ejecutable_defer : DEFER $$6 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$7 :",
"seleccion : IF condicion $$7 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$8 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$8 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"$$9 :",
"invocacion_discard : DISCARD ID $$9 parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$10 :",
"expresion_dountil : DO $$10 cuerpo_dountil",
"$$11 :",
"expresion_dountil : etiqueta ':' DO $$11 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$12 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$12 cuerpo_asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$13 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$13 cuerpo_asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"cuerpo_asignacion_do_until : ':' '(' asignacion_do_until ')' ';'",
"cuerpo_asignacion_do_until : error_cuerpo_asignacion_do_until",
"asignacion_do_until : ID ASSIGN expresion",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_retorno_expresion : expresion",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_termino : '*' factor",
"error_termino : termino '*' error",
"error_termino : '/' factor",
"error_termino : termino '/' error",
"error_factor : TOF64 error expresion ')'",
"error_factor : TOF64 '(' expresion error",
"error_factor : TOF64 '(' ')'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_asignacion : ID error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : invocacion",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : ':' asignacion_do_until ')'",
"error_cuerpo_asignacion_do_until : ':' '(' ')'",
"error_cuerpo_asignacion_do_until : ':' '(' asignacion_do_until error",
"error_asignacion_do_until : ASSIGN expresion",
"error_asignacion_do_until : ID expresion",
"error_asignacion_do_until : ID ASSIGN error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables",
};

//#line 583 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
	  Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
	  Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
	}
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}
					
					

	
	
					
					
					
//#line 1026 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
												Main.polaca.addElementPolaca("JBD");}}
break;
case 13:
//#line 43 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													for(String lexema : lista_de_variables) /* por cada variable declarada*/
														incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
													lista_de_variables.clear();}
break;
case 15:
//#line 53 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 57 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 60 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 67 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;}
break;
case 23:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "nombre de funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 93 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);}
break;
case 33:
//#line 103 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												if (this.existeDefer){
													this.existeDefer = false;
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
													Main.polaca.addElementPolaca("JBD");}}
break;
case 34:
//#line 109 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");
									if (this.existeDefer){
										this.existeDefer = false;
										Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
										Main.polaca.addElementPolaca(Main.polaca.desapilar()); /* Apilo el comienzo del defer*/
										Main.polaca.addElementPolaca("JBD");}}
break;
case 36:
//#line 119 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 41:
//#line 129 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 44:
//#line 134 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 136 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 47:
//#line 141 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 48:
//#line 143 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 51:
//#line 149 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 52:
//#line 154 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 53:
//#line 159 "gramatica.y"
{actualizarRango();}
break;
case 54:
//#line 159 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									String cte = yyval.sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 55:
//#line 164 "gramatica.y"
{actualizarRango();}
break;
case 56:
//#line 164 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									String cte = yyval.sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 57:
//#line 169 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 61:
//#line 180 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(id);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 68:
//#line 204 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 69:
//#line 210 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 70:
//#line 211 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 71:
//#line 214 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 72:
//#line 215 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 73:
//#line 216 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 74:
//#line 217 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 75:
//#line 218 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 76:
//#line 219 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 84:
//#line 233 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.apilar(Main.polaca.getSize() + 2); /*Se apila para marcar el inicio del defer*/
								Main.polaca.apilar(Main.polaca.getSize()); /*Se apila para continuar la ejecutacion y luego ir al defer*/
								Main.polaca.addElementPolaca(""); 
								Main.polaca.addElementPolaca("JED");}
break;
case 85:
//#line 238 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer");
											Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
											Main.polaca.apilar(Main.polaca.getSize());
											Main.polaca.addElementPolaca(""); 
											Main.polaca.addElementPolaca("JS");}
break;
case 86:
//#line 245 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(id);
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 88:
//#line 254 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 91:
//#line 261 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 92:
//#line 263 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 95:
//#line 271 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 98:
//#line 280 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "cadena");}}
break;
case 100:
//#line 289 "gramatica.y"
{String id = val_peek(0).sval;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 103:
//#line 296 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 105:
//#line 300 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 107:
//#line 301 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);}
break;
case 111:
//#line 311 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 112:
//#line 314 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("BF");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 114:
//#line 323 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 115:
//#line 326 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("BF");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 119:
//#line 340 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion en la sentencia do-until");
												String id = val_peek(2).sval;
												Main.polaca.addElementPolaca(id);
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 121:
//#line 349 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 123:
//#line 355 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 125:
//#line 364 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");
																					String nombre_etiqueta = val_peek(1).sval;
																					if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																						Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																					Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 126:
//#line 373 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");
																		String nombre_etiqueta = val_peek(1).sval;
																		if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																		Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 128:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 129:
//#line 387 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 130:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 131:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 132:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 133:
//#line 393 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 134:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 135:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 136:
//#line 399 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 137:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 138:
//#line 401 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 139:
//#line 402 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 140:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 141:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 142:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 143:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 144:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 145:
//#line 416 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 146:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 147:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 148:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 149:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 150:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 151:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 152:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 153:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 154:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 155:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 156:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 157:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 158:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 159:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion de retorno");}
break;
case 160:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion de retorno");}
break;
case 161:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio en la expresion de retorno");}
break;
case 162:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura y cierre de la expresion de retorno");}
break;
case 163:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 164:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 165:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 166:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 167:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 168:
//#line 454 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 169:
//#line 455 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 170:
//#line 458 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 171:
//#line 459 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 172:
//#line 460 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 173:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 174:
//#line 464 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 175:
//#line 465 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 176:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 177:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion en la conversion tof64");}
break;
case 178:
//#line 470 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion en la conversion tof64");}
break;
case 179:
//#line 471 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion en la conversion tof64");}
break;
case 180:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 181:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 182:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 183:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 184:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 185:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 186:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 187:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 188:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 189:
//#line 486 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, solo se define el identificador de la asignacion");}
break;
case 190:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 191:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 192:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 193:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 194:
//#line 495 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 195:
//#line 496 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 196:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 197:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 198:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 199:
//#line 500 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 200:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 201:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 202:
//#line 503 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 203:
//#line 504 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 204:
//#line 507 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 205:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 206:
//#line 509 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 207:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 208:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 209:
//#line 512 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 210:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 211:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 212:
//#line 517 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 213:
//#line 518 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 214:
//#line 519 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 215:
//#line 520 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 216:
//#line 521 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 217:
//#line 524 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 218:
//#line 525 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 219:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 220:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 221:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 222:
//#line 531 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 223:
//#line 534 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el do en la sentencia do_until");}
break;
case 224:
//#line 535 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 225:
//#line 536 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 226:
//#line 540 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 227:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 228:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 229:
//#line 543 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 230:
//#line 544 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 231:
//#line 547 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 232:
//#line 548 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 233:
//#line 549 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 234:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 235:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 236:
//#line 554 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 237:
//#line 555 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 238:
//#line 556 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 239:
//#line 557 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 240:
//#line 560 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar en la sentencia do-until");}
break;
case 241:
//#line 561 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion en la sentencia do-until");}
break;
case 242:
//#line 562 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar en la sentencia do-until");}
break;
case 243:
//#line 565 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 244:
//#line 566 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia ejecutable");}
break;
case 245:
//#line 567 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 246:
//#line 568 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 247:
//#line 571 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia");}
break;
case 248:
//#line 572 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 249:
//#line 573 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 250:
//#line 574 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 251:
//#line 575 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break antes del ':'");}
break;
case 252:
//#line 576 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 253:
//#line 577 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 254:
//#line 578 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 255:
//#line 579 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break con etiqueta en el cuerpo del do-until con etiqueta");}
break;
//#line 2064 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
