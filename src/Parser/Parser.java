//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    6,
    6,    7,    7,    8,   13,    8,    8,   11,   11,   12,
   12,   12,   18,   10,   10,   16,   16,   16,   16,   20,
   21,   21,   17,   17,   17,   24,   24,   26,   26,   26,
   28,   28,   29,   29,   29,   29,   29,   33,   33,   33,
   33,   35,   35,   37,   35,   38,   35,   35,   35,   39,
   39,   40,   40,   40,   40,   42,   43,   43,   43,   31,
   31,   31,   31,   31,   31,    9,    9,   45,   45,   45,
   45,   45,   46,   47,   47,   54,   48,   48,   53,   58,
   53,   53,   57,   57,   56,   49,   49,   50,   50,   64,
   51,   67,   51,   51,   65,   70,   63,   63,   74,   66,
   66,   71,   71,   69,   69,   69,   69,   73,   73,   73,
    3,    3,    5,    5,    5,    5,    5,    5,   14,   14,
   14,   14,   15,   15,   19,   19,   19,   19,   19,   19,
   19,   22,   22,   22,   22,   23,   23,   25,   25,   27,
   27,   30,   30,   30,   32,   32,   32,   32,   32,   32,
   32,   34,   34,   34,   34,   34,   34,   36,   36,   36,
   36,   41,   44,   44,   44,   44,   52,   52,   52,   52,
   55,   55,   59,   59,   59,   59,   59,   59,   59,   59,
   59,   59,   60,   60,   60,   60,   60,   60,   61,   61,
   61,   61,   61,   62,   62,   62,   62,   68,   68,   68,
   72,   72,   72,   72,   72,   72,   75,   75,   75,   75,
   75,   75,   76,   76,   76,   77,   77,   77,   77,   78,
   78,   78,   78,   78,   78,   78,   78,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    1,    2,    0,    4,    1,    1,    1,    1,
    3,    1,    0,   10,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    4,    1,    5,    5,    1,
    1,    1,    1,    0,    3,    0,    3,    1,    1,    4,
    1,    3,    1,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    4,    1,    0,    4,    1,    6,    0,
    6,    1,    6,    1,    1,    5,    1,    6,    1,    0,
    3,    0,    5,    1,    1,    0,    9,    1,    0,    9,
    1,    3,    1,    3,    1,    2,    1,    5,    4,    1,
    1,    1,    2,    1,    1,    2,    2,    3,    2,    2,
    3,    1,    3,    3,    8,    8,    8,    8,    8,    8,
    8,    5,    2,    2,    2,    2,    2,    2,    1,    2,
    2,    2,    2,    2,    4,    4,    5,    4,    4,    3,
    3,    3,    3,    3,    4,    4,    3,    2,    2,    2,
    2,    4,    5,    2,    2,    2,    3,    3,    3,    4,
    2,    3,    4,    4,    4,    4,    5,    5,    5,    5,
    5,    5,    9,    9,    9,    9,    9,    9,    4,    4,
    4,    4,    4,    5,    5,    5,    5,    9,   10,    2,
    7,    7,    7,    7,    7,    8,    7,    7,    7,    7,
    7,    8,    2,    2,    2,    1,    3,    2,    1,    4,
    4,    4,    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  125,    0,  122,    3,    5,    0,    0,
    0,    0,    0,   18,    0,   19,    0,  100,    0,    0,
    0,    0,    0,    0,   11,   13,    0,    0,    0,   17,
   22,   25,   76,   77,   78,   79,   80,   81,   82,   85,
   88,   97,   99,    0,  104,    0,  126,    0,    0,    0,
    0,    0,    0,   52,   53,    0,    0,    0,    0,    0,
    0,    0,    0,   47,   50,   51,   59,   61,    0,    0,
    0,    0,    0,   42,  181,   92,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   83,    0,  210,  128,
    0,   10,    0,   12,   14,    0,   20,    0,    0,  130,
    0,    0,    0,    2,    4,    0,  226,    0,    0,  117,
  133,  131,    0,    0,  179,    0,    0,    0,   54,   56,
  168,  170,    0,    0,    0,    0,    0,    0,   29,   32,
    0,    0,  178,    0,    0,    0,    0,    0,    0,    0,
   71,   70,   75,   72,   73,   74,    0,    0,  182,    0,
    0,    0,    0,    0,    0,    0,    0,  177,   67,   68,
   69,    0,    0,    0,    0,    0,   65,    0,    0,  101,
    0,  108,    0,    0,    0,    0,  134,   21,    0,  102,
  116,    0,    0,    0,    0,    0,  180,   84,    0,  167,
    0,   55,   57,  146,  143,  147,   31,    0,    0,  145,
  162,    0,  163,    0,    0,    0,    0,    0,    0,    0,
  160,    0,    0,    0,   87,    0,  200,  201,    0,  203,
    0,    0,    0,  174,    0,    0,    0,  176,    0,    0,
    0,    0,  199,   16,    0,    0,    0,    0,  120,    0,
  227,  114,    0,  172,   60,  165,  166,   46,    0,    0,
    0,    0,    0,    0,    0,  185,   94,    0,    0,  186,
    0,  184,    0,  183,    0,  158,    0,  156,  155,   96,
    0,    0,    0,    0,  206,    0,  205,    0,  204,    0,
    0,    0,    0,  105,    0,    0,    0,    0,    0,    0,
    0,  103,    0,  111,    0,    0,    0,   48,   49,    0,
    0,  189,  190,    0,  191,    0,  188,  187,  157,   41,
    0,    0,    0,    0,    0,   98,    0,    0,    0,    0,
    0,    0,  236,    0,  235,  234,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  142,    0,    0,   89,   91,
    0,    0,    0,    0,    0,    0,  173,    0,    0,    0,
    0,    0,    0,  119,  232,    0,  231,  230,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  113,    0,  149,
    0,  135,    0,   35,   37,    0,    0,  140,   23,  141,
  139,  138,  137,  136,    0,    0,    0,    0,    0,    0,
    0,  118,    0,    0,    0,    0,    0,    0,  224,    0,
  223,  208,  151,    0,    0,   38,    0,   40,    0,  148,
   34,    0,    0,    0,    0,  212,  213,  215,    0,    0,
  214,  211,    0,    0,    0,    0,    0,    0,    0,  112,
  154,    0,   36,  152,   33,    0,    0,    0,   93,   24,
  216,    0,  209,    0,    0,    0,    0,    0,    0,    0,
   39,    0,    0,    0,    0,  107,  218,  219,  221,    0,
    0,  220,  217,    0,    0,    0,    0,    0,  222,    0,
  195,  196,  198,  197,  194,  193,  110,
};
final static short yydgoto[] = {                          5,
    6,   46,    7,  371,    8,   23,   24,   25,   26,   27,
   28,   29,   99,   30,   31,  126,  372,  415,   32,  127,
  128,  129,  130,  373,  374,  405,  375,   72,   73,  408,
  148,   74,   63,   64,   65,   66,  192,  193,   67,  164,
   68,  165,  166,  167,   33,   34,   35,   36,   37,   38,
   39,   40,   75,  150,   41,  138,  256,  306,   76,  257,
   42,   43,  170,   84,   44,  292,  240,   45,  109,  389,
  367,  172,  238,  448,  294,  368,  110,  239,
};
final static short yysindex[] = {                       421,
  308,    0,  384,    0,    0,    0,    0,    0,  163,   -7,
  -18,  -17,  -28,    0,  821,    0,  -20,    0,  655, -189,
 -184,   13,  308,  308,    0,    0,   61,  135,  114,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -43,    0,  -42,    0,   27,  476, -145,
   75,  125,  179,    0,    0,  304,  -10,  167,  293,  293,
  263,  528,   74,    0,    0,    0,    0,    0,  430,  626,
  791,   99,  877,    0,    0,    0,  318,  -24,  223,  263,
  580,  121,   95,  398,  245,  815,    0,  346,    0,    0,
  626,    0,  717,    0,    0,  350,    0,  400,  135,    0,
  261,  289,  188,    0,    0,  408,    0,  514,  364,    0,
    0,    0,  435,   95,    0,   83,  821,  699,    0,    0,
    0,    0,  237,  180,  286,  458,  264,    0,    0,    0,
  424,  839,    0,  463,  485,  540,  626,  411,  422,  757,
    0,    0,    0,    0,    0,    0,  877,  821,    0,  -87,
  821,  496,   43,  509,  263,  526,  529,    0,    0,    0,
    0,  385,   95,  548,  243,    0,    0,  550,  453,    0,
  456,    0,  537,  230,  557,  201,    0,    0,  554,    0,
    0,  336,  547,  341,   74,   23,    0,    0,  570,    0,
   17,    0,    0,    0,    0,    0,    0,  559,  180,    0,
    0,   74,    0,   74,  293,  293,  406,  -76,  504,  531,
    0,   80,  731,  682,    0,  762,    0,    0,  565,    0,
  109,  574,  576,    0,   60,  569,  385,    0,  578,  360,
 -112,  372,    0,    0,  -37, -170,  568,  523,    0,  482,
    0,    0,  -31,    0,    0,    0,    0,    0, -176,  613,
  638,  644,  566,  575,  629,    0,    0,  641,  -51,    0,
  646,    0,  652,    0,  656,    0,  882,    0,    0,    0,
   53, -176, -176, -176,    0,  653,    0,  674,    0,  -31,
  -31,  164,  -31,    0,  100,  661,  669,   93, -170,  459,
  508,    0,  610,    0,  689,  627,  500,    0,    0,  626,
  626,    0,    0,  702,    0, -118,    0,    0,    0,    0,
  -89,  639,  640,  659,  665,    0,  533,  721,  750,   -3,
  754,  761,    0,  763,    0,    0,  103,  767,  769,  -31,
  546, -106,  560,   42,  353,    0,  714,  715,    0,    0,
  353,  207,  353,  353,  353,  353,    0,   42,   42,   42,
  586,   42,   42,    0,    0,  784,    0,    0,  789,  -31,
  -31,  270,  -31,  815,   59,  807,  790,    0,  176,    0,
  585,    0,   85,    0,    0,  -92,  592,    0,    0,    0,
    0,    0,    0,    0,  799,  806,  810,   42,  812,  813,
  818,    0,   42,  827,  832,  300,  833,  836,    0,  830,
    0,    0,    0,  445,  837,    0,  129,    0,  772,    0,
    0,  598,  626,  840,  353,    0,    0,    0,  841,   42,
    0,    0,  848,   42,   42,   42,  657,   42,   42,    0,
    0,  874,    0,    0,    0,  632,  793,  801,    0,    0,
    0,  855,    0,  869,  870,  871,   42,  883,  881,  886,
    0,  686,  -84,  688,  690,    0,    0,    0,    0,  894,
   42,    0,    0,  910,  912,   -5,  923,  924,    0,  927,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   32,  933,    0,    0,    0,    0,    0,    0,   21,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  980,    4,    5,    0,    0,   57,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  997,    0,    0,
    0,    0,  901,    0,    0,    0,    0,    0,    0,    0,
  957,    0,  906,    0,    0,    0,    0,    0,    0,    0,
    0,  -67,    0,    0,    0,    0,    0,    0,  957,  957,
    0,  958,  958,    0,    0,  -13,    0,    0,    0,    0,
    6,    0,   10,    0,    0,    0,    0,  184,    0,    0,
    0,    0,    0,    0,    0,  -82,    0,  -75,    0,    0,
    0,    0,    0,   73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  605,    0,    0,
    0,    0,    0,  934,  960,    0,  -66,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  136,    0,    0,    0,    0,    0,
    0,    0,   65,    0,    0,  171,    0,    0,    0,    0,
    0,    0,    0,    0,  451,    0,    0,    0,    0,    0,
    0,    0,  -74,    0,  982,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  455,    0,
    0,  994,    0, 1063,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  755,    0,    0,   28,    0,
    0,    0,    0,    0,    0,    0,   44,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  483,
    0,    0,    0,    0,    0,    0,    0,    0,  252,    0,
    0,    0,    0,    0,    0,    0,  847,    0,    0,    0,
    0,    0,    0,    0,    0,  108,    0,   63,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  141,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -73,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  942,    0,    0,    0,    0,  -72,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  945,
    0,    0,    0,    0,  132,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  948,    0,    0,    0,
    0,  -34,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  962,    0,    0,  175,    0,  985,  -23,   67,  499,    0,
    9,   38,    0,    0,    0,   -6,  258,    0,    0,    0,
  -52,    0,    0,  662,    0,    0,    0,  849,   -8,    0,
  -70,    0,  -14,    0,  387,    0,    0,    0,    0,  425,
    0,    0,  368,    0,  993,    0,  921,    0,    0,    0,
    0,    0,  878,    0,    0,  -69, -114,    0,    0,    0,
    0,    0,    0,    0,  853,    0,    0,    0,  -15,    0,
  875,    0, -164,    0,    0,    0,    0,    0,
};
final static int YYTABLESIZE=1382;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         91,
  139,   62,  151,    8,    9,    6,   81,  305,   71,    7,
   59,   80,  282,   58,  103,   60,  154,   51,  362,   83,
  285,   71,   78,   59,  153,  108,   58,  202,   60,  118,
  413,  121,   61,  341,   59,   70,   71,   58,   59,   60,
  466,   58,  229,   60,  105,  137,  137,  116,  259,  115,
  228,  237,  233,  474,  350,   86,  132,  248,   95,  131,
  108,  132,  147,  245,   20,   98,  208,  202,  171,  125,
   88,  195,  156,  157,  200,  293,  213,   62,  105,   20,
    3,  365,    4,  219,  175,  202,  284,  125,  125,   92,
  153,   14,   89,  260,  262,  264,  132,   16,  185,  399,
  276,  218,  175,   62,   70,   64,   89,  207,  189,  191,
  311,  111,  137,   64,  132,  134,  202,  204,  275,   95,
  135,   62,  131,   64,  132,  131,  332,  132,    8,    9,
    6,  212,  125,  112,    7,  125,  176,   90,  162,  214,
  192,  188,  216,  253,  254,  108,  250,  207,  221,  271,
  327,  105,  202,  231,    1,  237,    1,  101,  323,   92,
  163,  355,  281,  125,  162,  207,  272,  113,  361,  434,
  412,  131,  100,  132,   69,   22,   28,   48,   14,  465,
  192,  132,   51,  129,   16,  253,  254,  258,  145,  144,
  146,  340,  229,   28,   86,   95,   95,   95,  192,  115,
  228,  237,  233,   71,  267,   59,   50,  125,   58,  411,
   60,   63,  304,    1,   66,  404,  237,   59,  114,  284,
   58,  153,   60,  129,   52,   53,   54,   55,   79,   63,
  337,  338,  207,  102,  403,  153,   82,   52,   53,   54,
   55,  129,   77,   69,  101,  117,   20,   57,   52,   53,
   54,   55,   52,   53,   54,   55,  150,  296,  473,  234,
   57,   56,  155,  105,   21,  192,  124,  237,    8,    9,
    6,   57,  247,   50,    7,   57,  137,  137,  244,  312,
  313,  314,  315,  202,  202,   49,  227,    1,  202,  202,
  202,  202,  202,  202,  202,  202,  202,  105,  364,  175,
  202,  202,  202,  202,  202,  202,  124,  199,  129,   71,
   15,   59,  132,  132,   58,  364,   60,  132,   62,  342,
   14,  132,  132,  132,  132,  132,   16,   15,   64,  379,
  132,  370,  132,  132,  132,  265,  151,   58,  187,   71,
  410,   59,  437,  438,   58,   59,   60,   20,   58,  284,
   60,  159,  160,  161,  149,   62,  284,  426,  152,  284,
  407,  213,  115,  207,  207,   21,  453,   49,  207,  207,
  207,  207,  207,  207,  207,  207,  207,  159,  160,  161,
  207,  207,  207,  207,  207,  207,  173,  150,  137,  137,
   96,   97,   20,   50,  241,  432,  192,  192,  141,  142,
  143,  192,  192,  192,  192,  192,  192,  192,  192,  192,
   21,  179,  137,  192,  192,  192,  192,  192,  192,   52,
   53,   54,   55,   20,  119,  120,   63,   66,   66,   66,
   14,   52,   53,   54,   55,  123,   16,   20,  320,  129,
  129,   21,   57,  101,  129,  121,  122,   14,  129,  129,
  129,  129,  129,   16,   57,   21,  107,  129,   49,  129,
  129,  129,    9,   10,  180,   59,  181,   11,   58,   20,
   60,  369,   12,   13,   14,   15,   59,  370,  123,   58,
   16,   60,   17,   18,   19,  431,   59,   21,  184,   58,
   14,   60,   20,  194,   20,  144,   16,   14,  198,  159,
  160,  161,  205,   16,  145,  144,  146,  168,   47,   20,
   21,  107,  144,   90,   90,   20,  177,  178,  123,  123,
  169,   20,   94,   26,  206,   52,   53,   54,   55,  224,
   14,   14,  228,   21,  107,  209,   16,   16,  186,  236,
   26,  196,  197,    3,  396,    4,  210,   20,   57,   53,
   54,   55,  136,   20,  217,   52,   53,   54,   55,   52,
   53,   54,   55,    9,   10,  236,  222,  220,   11,  223,
  131,   21,  132,   12,   13,   14,   15,  230,   57,   20,
  232,   16,   57,   17,   18,   19,  133,  225,  226,   94,
  229,  251,  252,   20,  278,  233,   61,   21,  378,  380,
  381,  382,  383,  384,  291,  242,   94,   20,    9,   10,
  246,  236,  131,   11,  132,  243,  249,  369,   12,   13,
   14,   15,  131,  270,  132,  289,   16,  277,   17,   18,
   19,  273,  331,  274,  280,   94,  279,   20,  158,    9,
   10,  159,  160,  161,   11,   27,  283,  290,   30,   12,
   13,   14,   15,   85,   86,   21,  297,   16,   11,   17,
   18,   19,   27,   12,  207,   20,   15,  253,  254,  255,
  106,   20,  440,   17,   18,   19,    1,    2,  298,  201,
   53,   54,   55,   21,  299,   85,   86,  302,  300,   21,
   11,   53,   54,   55,   20,   12,  309,  301,   15,  303,
  140,   53,   54,   55,  307,   17,   18,   19,   85,   86,
  308,  316,   21,   11,  141,  142,  143,  317,   12,  325,
  436,   15,  268,   57,  131,  106,  132,  326,   17,   18,
   19,   85,   86,  330,  333,   94,   11,   85,   86,  190,
   59,   12,   11,   58,   15,   60,  334,   12,  106,  335,
   15,   17,   18,   19,  235,  336,  452,   17,   18,   19,
  339,  343,  344,   85,   86,  253,  254,  261,   11,  182,
   86,  266,   59,   12,   11,   58,   15,   60,  348,   12,
  235,  345,   15,   17,   18,   19,  183,  346,  347,   17,
   18,   19,  253,  254,  263,   85,   86,  211,   59,  113,
   11,   58,  269,   60,  131,   12,  132,  349,   15,   85,
   86,  352,  161,  161,   11,   17,   18,   19,  353,   12,
  360,  354,   15,   85,   86,  357,  235,  358,   11,   17,
   18,   19,   59,   12,  363,   58,   15,   60,  376,  377,
  288,  388,  392,   17,   18,   19,  393,  401,  402,  369,
  145,  144,  146,   85,   86,  414,   59,  416,   11,   58,
   30,   60,   59,   12,  417,   58,   15,   60,  418,  420,
  430,  421,   30,   17,   18,   19,  422,  161,   30,  161,
   59,   85,   86,   58,  424,   60,   11,   85,   86,  425,
  428,   12,   11,  429,   15,  433,  435,   12,  439,  441,
   15,   17,   18,   19,  159,  159,  443,   17,   18,   19,
   85,   86,  447,  456,  451,   11,  131,  454,  132,  131,
   12,  132,  310,   15,  131,  455,  132,  457,  458,  459,
   17,   18,  124,  145,  144,  146,  145,  144,  146,  462,
  461,   58,   58,   58,  463,   58,   43,   58,   43,  464,
   43,  467,  469,  468,   52,   53,   54,   55,   58,   58,
   58,   58,   58,   43,   43,   43,   43,   43,  471,  159,
  472,  159,  174,  175,  169,  169,  169,   57,  169,  127,
  169,  475,  476,   13,   14,  477,   52,   53,   54,   55,
   16,  169,  169,  169,  169,  169,  123,   28,   64,  106,
  171,  171,  171,  225,  171,  109,  171,  104,   93,   57,
  161,   87,   52,   53,   54,   55,  161,  171,  171,  171,
  171,  171,  164,   58,  164,   58,  164,  215,   43,    0,
   43,    0,  409,    0,   44,   57,   44,    0,   44,  164,
  164,  164,  164,  164,    0,    0,  140,   53,   54,   55,
    0,   44,   44,   44,   44,   44,  169,    0,  169,    0,
  141,  142,  143,    0,    0,    0,    0,    0,    0,   57,
   52,   53,   54,   55,    0,    0,   52,   53,   54,   55,
    0,    0,  171,   56,  171,    0,    0,  286,  287,    0,
    0,  295,    0,   57,  203,   53,   54,   55,    0,   57,
    0,    0,  159,   45,  164,   45,  164,   45,  159,    0,
    0,    0,    0,    0,    0,    0,   44,    0,   44,    0,
   45,   45,   45,   45,   45,    0,    0,    0,  318,  319,
  321,  322,    0,    0,    0,    0,    0,  324,    0,    0,
  328,  329,    0,  141,  142,  143,  141,  142,  143,    0,
    0,    0,    0,    0,    0,    0,   58,    0,    0,    0,
    0,   43,   58,    0,    0,    0,    0,   43,  351,    0,
   58,   58,   58,    0,    0,   43,   43,   43,  359,  356,
    0,    0,    0,    0,    0,   45,    0,   45,    0,  169,
    0,    0,    0,    0,    0,  169,    0,    0,    0,    0,
    0,    0,    0,  169,  169,  169,    0,    0,  394,  395,
  397,  398,    0,    0,    0,  171,    0,  406,    0,    0,
    0,  171,  385,  386,  387,    0,  390,  391,    0,  171,
  171,  171,    0,    0,    0,    0,    0,  164,    0,    0,
    0,    0,    0,  164,  427,    0,    0,    0,    0,   44,
    0,  164,  164,  164,  366,   44,    0,    0,    0,    0,
    0,    0,  419,   44,   44,   44,    0,  423,  366,  366,
  366,    0,  366,  366,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  400,    0,    0,    0,    0,
    0,    0,    0,    0,  442,    0,    0,    0,  444,  445,
  446,    0,  449,  450,    0,    0,    0,    0,  366,    0,
    0,    0,    0,  366,    0,    0,    0,    0,   45,    0,
    0,  460,    0,    0,   45,    0,    0,    0,    0,    0,
    0,    0,   45,   45,   45,  470,    0,    0,    0,    0,
  366,    0,    0,    0,  366,  366,  366,    0,  366,  366,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  366,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  366,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         23,
   70,   10,   73,    0,    0,    0,   15,   59,   40,    0,
   42,   40,  125,   45,   58,   47,   41,    9,  125,   40,
   58,   40,   40,   42,   59,   49,   45,    0,   47,   40,
  123,    0,   40,  123,   42,  123,   40,   45,   42,   47,
  125,   45,  125,   47,   58,   69,   70,   56,  125,  125,
  125,  125,  125,   59,   58,  123,    0,   41,  125,   43,
   84,   45,   71,   41,   44,   28,  136,   40,   84,   61,
  260,  124,   79,   80,  127,  240,  147,   86,   58,   59,
  123,   40,  125,   41,   41,   58,  257,   79,   80,   23,
  125,  268,  277,  208,  209,  210,   40,  274,  113,   41,
   41,   59,   59,   41,  123,   41,  277,    0,  117,  118,
   58,  257,  136,   41,   58,   42,  131,  132,   59,   59,
   47,   59,   43,   59,   45,   43,  291,   45,  125,  125,
  125,  140,  124,   59,  125,  127,   99,  125,   44,  148,
    0,   59,  151,  262,  263,  169,  199,   40,  155,   41,
   58,  125,  125,  169,  123,  179,  125,   44,   59,   93,
   40,   59,  275,  155,   44,   58,   58,   43,  275,   41,
  263,   43,   59,   45,  262,    1,   41,    3,  268,  264,
   40,  125,  174,    0,  274,  262,  263,  264,   60,   61,
   62,  306,  275,   58,  262,  262,  263,  264,   58,  275,
  275,  275,  275,   40,  213,   42,   44,  199,   45,  125,
   47,   41,  264,  256,   44,   40,  240,   42,   40,  257,
   45,  256,   47,   40,  256,  257,  258,  259,  257,   59,
  300,  301,  125,  277,   59,  260,  257,  256,  257,  258,
  259,   58,  260,  262,   44,  256,   40,  279,  256,  257,
  258,  259,  256,  257,  258,  259,  125,  249,  264,   59,
  279,  269,   40,  277,   58,  125,   44,  291,  265,  265,
  265,  279,  256,   44,  265,  279,  300,  301,  256,  271,
  272,  273,  274,  256,  257,  123,   44,  256,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  277,  257,  256,
  273,  274,  275,  276,  277,  278,   44,   44,  125,   40,
  269,   42,  256,  257,   45,  257,   47,  261,  256,  311,
  268,  265,  266,  267,  268,  269,  274,  269,  256,  123,
  274,  125,  276,  277,  278,  256,  407,   45,  256,   40,
  256,   42,  412,  413,   45,   42,   47,   40,   45,  257,
   47,  257,  258,  259,  256,  364,  257,   58,   41,  257,
  369,  432,   59,  256,  257,   58,  436,  123,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  257,  258,  259,
  273,  274,  275,  276,  277,  278,   41,  256,  412,  413,
  256,  257,   40,   44,   59,  404,  256,  257,  270,  271,
  272,  261,  262,  263,  264,  265,  266,  267,  268,  269,
   58,  123,  436,  273,  274,  275,  276,  277,  278,  256,
  257,  258,  259,   40,  258,  259,  256,  257,  258,  259,
  268,  256,  257,  258,  259,  256,  274,   40,  275,  256,
  257,   58,  279,   44,  261,   59,   60,  268,  265,  266,
  267,  268,  269,  274,  279,   58,   59,  274,  123,  276,
  277,  278,  256,  257,  277,   42,   59,  261,   45,   40,
   47,  265,  266,  267,  268,  269,   42,  125,  256,   45,
  274,   47,  276,  277,  278,   41,   42,   58,  125,   45,
  268,   47,   40,  257,   44,   41,  274,  268,   41,  257,
  258,  259,   40,  274,   60,   61,   62,   83,  125,   59,
   58,   59,   58,  262,  263,   40,  256,  257,  256,  256,
  123,   40,   24,   41,   40,  256,  257,  258,  259,  162,
  268,  268,  165,   58,   59,  125,  274,  274,  114,   58,
   58,  256,  257,  123,  275,  125,  125,   40,  279,  257,
  258,  259,  123,   40,   59,  256,  257,  258,  259,  256,
  257,  258,  259,  256,  257,   58,   41,   59,  261,   41,
   43,   58,   45,  266,  267,  268,  269,  125,  279,   40,
  125,  274,  279,  276,  277,  278,   59,  163,   41,   91,
   41,  205,  206,   40,  227,   59,   40,   58,  341,  342,
  343,  344,  345,  346,  123,   59,  108,   40,  256,  257,
   41,   58,   43,  261,   45,  275,   58,  265,  266,  267,
  268,  269,   43,   59,   45,   58,  274,   59,  276,  277,
  278,   58,  125,   58,  275,  137,   59,   40,   59,  256,
  257,  257,  258,  259,  261,   41,  275,  125,   44,  266,
  267,  268,  269,  256,  257,   58,   44,  274,  261,  276,
  277,  278,   58,  266,  125,   40,  269,  262,  263,  264,
  273,   40,  415,  276,  277,  278,  256,  257,   41,  256,
  257,  258,  259,   58,   41,  256,  257,   59,  123,   58,
  261,  257,  258,  259,   40,  266,   41,  123,  269,   59,
  256,  257,  258,  259,   59,  276,  277,  278,  256,  257,
   59,   59,   58,  261,  270,  271,  272,   44,  266,   59,
  123,  269,   41,  279,   43,  273,   45,   59,  276,  277,
  278,  256,  257,  275,  125,  237,  261,  256,  257,   41,
   42,  266,  261,   45,  269,   47,   58,  266,  273,  123,
  269,  276,  277,  278,  273,  256,  125,  276,  277,  278,
   59,  123,  123,  256,  257,  262,  263,  264,  261,  256,
  257,   41,   42,  266,  261,   45,  269,   47,   58,  266,
  273,  123,  269,  276,  277,  278,  273,  123,  256,  276,
  277,  278,  262,  263,  264,  256,  257,   41,   42,   43,
  261,   45,   41,   47,   43,  266,   45,   58,  269,  256,
  257,   58,   58,   59,  261,  276,  277,  278,   58,  266,
  275,   59,  269,  256,  257,   59,  273,   59,  261,  276,
  277,  278,   42,  266,  275,   45,  269,   47,  125,  125,
  273,  256,   59,  276,  277,  278,   58,   41,   59,  265,
   60,   61,   62,  256,  257,  264,   42,   59,  261,   45,
  256,   47,   42,  266,   59,   45,  269,   47,   59,   58,
   41,   59,  268,  276,  277,  278,   59,  123,  274,  125,
   42,  256,  257,   45,   58,   47,  261,  256,  257,   58,
   58,  266,  261,   58,  269,   59,  125,  266,   59,   59,
  269,  276,  277,  278,   58,   59,   59,  276,  277,  278,
  256,  257,  256,   59,   41,  261,   43,  125,   45,   43,
  266,   45,   41,  269,   43,  125,   45,   59,   59,   59,
  276,  277,    0,   60,   61,   62,   60,   61,   62,   59,
   58,   41,   42,   43,   59,   45,   41,   47,   43,  264,
   45,  264,   59,  264,  256,  257,  258,  259,   58,   59,
   60,   61,   62,   58,   59,   60,   61,   62,   59,  123,
   59,  125,  256,  257,   41,   42,   43,  279,   45,    0,
   47,   59,   59,  267,  268,   59,  256,  257,  258,  259,
  274,   58,   59,   60,   61,   62,    0,   41,   41,   58,
   41,   42,   43,   59,   45,   58,   47,   46,   24,  279,
  256,   19,  256,  257,  258,  259,  262,   58,   59,   60,
   61,   62,   41,  123,   43,  125,   45,  150,  123,   -1,
  125,   -1,  371,   -1,   41,  279,   43,   -1,   45,   58,
   59,   60,   61,   62,   -1,   -1,  256,  257,  258,  259,
   -1,   58,   59,   60,   61,   62,  123,   -1,  125,   -1,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,  279,
  256,  257,  258,  259,   -1,   -1,  256,  257,  258,  259,
   -1,   -1,  123,  269,  125,   -1,   -1,  235,  236,   -1,
   -1,  243,   -1,  279,  256,  257,  258,  259,   -1,  279,
   -1,   -1,  256,   41,  123,   43,  125,   45,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   58,   59,   60,   61,   62,   -1,   -1,   -1,  280,  281,
  282,  283,   -1,   -1,   -1,   -1,   -1,  285,   -1,   -1,
  288,  289,   -1,  270,  271,  272,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,   -1,
   -1,  256,  262,   -1,   -1,   -1,   -1,  262,  320,   -1,
  270,  271,  272,   -1,   -1,  270,  271,  272,  330,  327,
   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  360,  361,
  362,  363,   -1,   -1,   -1,  256,   -1,  369,   -1,   -1,
   -1,  262,  348,  349,  350,   -1,  352,  353,   -1,  270,
  271,  272,   -1,   -1,   -1,   -1,   -1,  256,   -1,   -1,
   -1,   -1,   -1,  262,  396,   -1,   -1,   -1,   -1,  256,
   -1,  270,  271,  272,  334,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  388,  270,  271,  272,   -1,  393,  348,  349,
  350,   -1,  352,  353,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  365,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  420,   -1,   -1,   -1,  424,  425,
  426,   -1,  428,  429,   -1,   -1,   -1,   -1,  388,   -1,
   -1,   -1,   -1,  393,   -1,   -1,   -1,   -1,  256,   -1,
   -1,  447,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  270,  271,  272,  461,   -1,   -1,   -1,   -1,
  420,   -1,   -1,   -1,  424,  425,  426,   -1,  428,  429,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  447,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  461,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"$$2 :",
"declarativa : tipo $$2 lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$3 :",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$4 :",
"factor : '-' CTE_INT $$4",
"$$5 :",
"factor : '-' CTE_DBL $$5",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$6 :",
"seleccion : IF condicion $$6 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$7 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$7 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$8 :",
"expresion_dountil : DO $$8 cuerpo_dountil",
"$$9 :",
"expresion_dountil : etiqueta ':' DO $$9 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$10 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$10 ':' asignacion_do_until ';'",
"cuerpo_dountil : error_cuerpo_dountil",
"$$11 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$11 ':' asignacion_do_until ';'",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : '(' asignacion ')'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion error asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_asignacion_do_until : asignacion ')'",
"error_asignacion_do_until : '(' ')'",
"error_asignacion_do_until : '(' asignacion",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 493 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static String ambito;
public static boolean declarando = true;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 948 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 14:
//#line 42 "gramatica.y"
{ this.declarando = false;}
break;
case 15:
//#line 43 "gramatica.y"
{ this.declarando = true;}
break;
case 16:
//#line 43 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													this.declarando = true;
													String tipoVar = val_peek(3).sval;
													lista_de_variables = (ArrayList<String>)val_peek(2).obj;
													for(String lexema : lista_de_variables) {   /* por cada variable declarada*/
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema); /*se obtiene la clave*/
														if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
															this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoVar); /* se agrega el tipo a la tabla de simbolos*/
															this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "variable"); /* se agrega el uso a la tabla de simbolos*/
															this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, lexema + "." + ambito);	/* se actualiza el nombre de la variable en la tabla de simbolos*/
														}
													}
													lista_de_variables.clear();
													this.declarando = false;}
break;
case 18:
//#line 61 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 19:
//#line 62 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 20:
//#line 65 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 21:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 23:
//#line 75 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion"); 
																		String tipoFunc = val_peek(4).sval;
																		String nombreFunc = val_peek(6).sval;
																		this.declarando = true;
																		int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc); /*se obtiene la clave*/
																		if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoFunc);
																			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de funcion");	
																			this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreFunc + "." + ambito);	/* se actualiza el nombre de la funcion en la tabla de simbolos*/
																		this.ambito = ambito + "." + nombreFunc;
																		};}
break;
case 31:
//#line 99 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreParam); /*se obtiene la clave*/
								if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoParam);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de parametro");
									this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreParam + "." + ambito);	/* se actualiza el nombre de la funcion en la tabla de simbolos									*/
								};}
break;
case 33:
//#line 111 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));}
break;
case 34:
//#line 112 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
								Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 36:
//#line 117 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 41:
//#line 127 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 43:
//#line 131 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 44:
//#line 132 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 134 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 48:
//#line 140 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 49:
//#line 142 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 52:
//#line 148 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 53:
//#line 150 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 54:
//#line 152 "gramatica.y"
{verificarRango();}
break;
case 55:
//#line 152 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 56:
//#line 154 "gramatica.y"
{verificarRango();}
break;
case 57:
//#line 154 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 58:
//#line 156 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 60:
//#line 162 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(3).sval);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 67:
//#line 176 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 68:
//#line 178 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 69:
//#line 179 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 70:
//#line 182 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 71:
//#line 183 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 72:
//#line 184 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 73:
//#line 185 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 74:
//#line 186 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 75:
//#line 187 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 83:
//#line 201 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 84:
//#line 204 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 86:
//#line 210 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 89:
//#line 217 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 90:
//#line 219 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 93:
//#line 227 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 96:
//#line 236 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 98:
//#line 241 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 100:
//#line 245 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 102:
//#line 246 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 106:
//#line 253 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 107:
//#line 256 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 109:
//#line 265 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 110:
//#line 268 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
															if (Main.polaca.existeBreak()){ /*Hay un Break*/
																Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
															Main.polaca.addElementPolaca(Main.polaca.desapilar());
															Main.polaca.addElementPolaca("BF");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 112:
//#line 278 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 114:
//#line 282 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 116:
//#line 287 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 118:
//#line 295 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 119:
//#line 299 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 121:
//#line 308 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 122:
//#line 309 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 123:
//#line 312 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 124:
//#line 313 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 125:
//#line 314 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 126:
//#line 315 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 127:
//#line 316 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 128:
//#line 317 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 129:
//#line 321 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 130:
//#line 322 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 131:
//#line 323 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 132:
//#line 324 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 133:
//#line 328 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 134:
//#line 329 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 135:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 136:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 137:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 138:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 139:
//#line 337 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 140:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 141:
//#line 339 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 142:
//#line 342 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 143:
//#line 343 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 144:
//#line 344 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 145:
//#line 345 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 146:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 147:
//#line 349 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 148:
//#line 352 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta la llave de cierre");}
break;
case 149:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 150:
//#line 357 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 151:
//#line 358 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 152:
//#line 362 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 153:
//#line 363 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 154:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 155:
//#line 368 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 156:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 157:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 158:
//#line 371 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 159:
//#line 372 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 160:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 161:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 162:
//#line 377 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 163:
//#line 378 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 164:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 165:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 166:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 167:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 168:
//#line 385 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 169:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 170:
//#line 387 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 171:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 172:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 173:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 174:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 175:
//#line 396 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 176:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 177:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 178:
//#line 401 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 179:
//#line 402 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 180:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 181:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 182:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el cuerpo de la seleccion");}
break;
case 183:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 184:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 185:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 186:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 187:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 188:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 189:
//#line 416 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 190:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 191:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 192:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 193:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 194:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 195:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 196:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 197:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 198:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 199:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 200:
//#line 431 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 201:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 202:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 203:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la cadena en el mensaje por pantalla");}
break;
case 204:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 205:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 206:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 207:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 208:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 209:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 210:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 211:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 212:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 213:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 214:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 215:
//#line 454 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 216:
//#line 455 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 217:
//#line 462 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 218:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 219:
//#line 464 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 220:
//#line 465 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 221:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 222:
//#line 467 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until con etiqueta");}
break;
case 223:
//#line 471 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 224:
//#line 472 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Error en la asignacion del do_until");}
break;
case 225:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 226:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 227:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 228:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 229:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 230:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 231:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 232:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 233:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 234:
//#line 486 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 235:
//#line 487 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 236:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 237:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1873 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
