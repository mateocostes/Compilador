//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.*;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    5,    1,    1,    4,    4,    4,    4,
    9,    9,    7,    7,    7,   11,   11,   12,   12,   12,
   16,   10,   10,   20,   15,   15,   18,   18,   18,   18,
   22,   23,   23,   27,   19,   19,   19,   26,   26,   29,
   29,   29,   31,   31,   32,   32,   32,   32,   36,   36,
   36,   36,   38,   38,   38,   38,   38,   38,   38,   38,
   40,   40,   42,   42,   42,   42,   44,   45,   45,   45,
   45,   45,   34,   34,   34,   34,   34,   34,    8,    8,
    8,    8,   47,   47,   47,   47,   47,   55,   48,   51,
   51,   58,   52,   52,   57,   62,   57,   57,   61,   61,
   60,   53,   53,   50,   50,   66,   66,   70,   54,   72,
   54,   54,   49,   75,   69,   69,   77,   71,   71,   74,
   74,   79,   79,    3,    3,    6,    6,    6,    6,    6,
    6,   13,   13,   13,   13,   13,   14,   14,   17,   17,
   21,   21,   21,   21,   21,   24,   24,   24,   24,   25,
   25,   28,   28,   30,   30,   33,   33,   33,   33,   35,
   35,   35,   35,   35,   35,   35,   37,   37,   37,   39,
   39,   39,   39,   41,   41,   41,   43,   46,   46,   46,
   46,   56,   56,   56,   56,   56,   56,   59,   59,   63,
   63,   63,   63,   63,   63,   63,   63,   63,   63,   63,
   63,   64,   64,   64,   64,   64,   64,   65,   65,   65,
   65,   65,   65,   65,   67,   67,   68,   68,   68,   68,
   73,   73,   73,   76,   76,   76,   76,   76,   78,   78,
   78,   78,   78,   80,   80,   80,   80,   81,   81,   81,
};
final static short yylen[] = {                            2,
    0,    3,    1,    0,    4,    1,    2,    2,    1,    1,
    2,    1,    2,    3,    1,    1,    1,    1,    3,    1,
    0,    4,    1,    0,    8,    1,    3,    1,    0,    1,
    1,    2,    1,    0,    4,    2,    1,    3,    1,    1,
    3,    1,    5,    1,    1,    3,    3,    1,    3,    3,
    1,    1,    1,    1,    2,    2,    1,    1,    4,    1,
    4,    1,    3,    1,    0,    1,    1,    1,    1,    1,
    2,    2,    1,    1,    1,    1,    1,    1,    1,    1,
    2,    4,    1,    1,    1,    1,    1,    0,    3,    4,
    1,    0,    4,    1,    6,    0,    6,    1,    6,    1,
    1,    5,    1,    3,    1,    4,    1,    0,    3,    0,
    5,    1,    1,    0,    7,    1,    0,    7,    1,    5,
    1,    3,    1,    1,    1,    3,    1,    1,    2,    2,
    2,    2,    2,    3,    1,    2,    3,    3,    2,    2,
    6,    6,    6,    6,    6,    5,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    1,    4,
    4,    5,    4,    4,    3,    3,    3,    3,    3,    2,
    3,    2,    3,    4,    4,    3,    4,    5,    2,    2,
    2,    3,    3,    3,    4,    2,    3,    2,    3,    4,
    4,    4,    4,    5,    5,    5,    5,    5,    5,    3,
    4,    9,    9,    9,    9,    9,    9,    4,    4,    4,
    4,    4,    1,    2,    1,    2,    3,    4,    3,    3,
    2,    2,    2,    7,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    2,    3,    3,    4,    2,    2,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  128,    0,  125,    3,    6,    0,    0,
    0,    0,    0,    0,   16,    0,    0,   17,    0,    0,
   88,    0,    0,    0,    0,    0,    0,    0,    0,   15,
   20,   23,  215,   62,   79,   80,    0,   83,   84,   85,
   86,   87,   91,   94,  103,  105,  112,    0,  129,    0,
  139,    0,    0,    0,    0,   53,   54,    0,    0,    0,
    0,    0,    0,    0,    0,   48,   51,   52,   58,   60,
  214,    0,    0,    0,    0,    0,    0,   44,  188,   98,
    0,    0,  140,   21,    0,   81,    0,  216,    0,  221,
    0,    0,    0,  222,  126,    7,    8,   13,    0,   18,
  136,    0,  133,    0,  223,    0,    2,    0,  137,  134,
    0,    0,  184,    0,    0,    0,   55,   56,  170,  172,
   68,   69,   70,    0,    0,    0,    0,    0,   66,    0,
    0,  183,    0,    0,    0,    0,   12,    0,    0,    0,
    0,   74,   73,   78,   75,   76,   77,    0,    0,  189,
    0,    0,    0,    0,    0,    0,  182,  113,    0,    0,
    0,  104,  107,    0,    0,  109,  116,   89,    0,   14,
  138,   19,  110,    5,    0,  185,   90,    0,  176,    0,
   71,   72,  179,  177,   61,    0,  181,  167,    0,  168,
    0,  171,   49,  173,   50,    0,    0,   11,    0,    0,
    0,    0,  200,  100,    0,  165,    0,    0,    0,   93,
    0,  209,  210,    0,  212,    0,    0,    0,    0,   22,
    0,   26,    0,    0,   30,   33,   82,    0,    0,    0,
    0,    0,    0,  208,    0,  174,  175,   59,    0,    0,
  192,    0,    0,  193,    0,    0,  201,    0,  191,    0,
  190,    0,  163,    0,  161,  160,  102,  150,  147,    0,
  151,   32,    0,    0,  149,    0,  219,    0,  217,    0,
    0,    0,    0,    0,    0,  111,  119,    0,  196,  197,
    0,  198,    0,    0,    0,  195,  194,  162,   43,    0,
    0,    0,    0,  218,  106,    0,    0,    0,    0,    0,
    0,    0,    0,  178,   95,   97,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  114,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  146,    0,    0,    0,    0,    0,  121,  123,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   99,    0,    0,   34,  144,    0,   37,   39,
   24,  145,  143,  142,  141,    0,    0,    0,    0,    0,
  225,  234,  226,  228,  115,  227,  224,    0,    0,    0,
  117,    0,    0,    0,    0,    0,    0,  153,  155,    0,
    0,   40,    0,   42,    0,  152,   36,    0,    0,    0,
  236,    0,  235,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  158,    0,   38,  156,    0,   25,
  237,    0,  230,  231,  233,  118,  232,  229,  204,  205,
  207,  206,  203,  202,   41,   35,  120,
};
final static short yydgoto[] = {                          5,
    6,   48,    7,  356,  108,    8,   25,  137,  138,   27,
   28,   29,   30,   31,  220,  156,   32,  221,  357,  398,
  222,  223,  224,  225,  226,  358,  395,  359,  391,  360,
   76,   77,  394,  149,   78,   65,   66,   67,   68,   69,
   70,  126,   34,  127,  128,  129,   35,   36,   37,   38,
   39,   40,   41,   42,   92,   43,   79,  151,   44,  139,
  203,  283,   80,  204,   45,  162,   46,  163,  166,   91,
  276,  235,   47,  336,  342,  167,  407,  277,  337,  338,
  339,
};
final static short yysindex[] = {                       -44,
  575,    0,  432,    0,    0,    0,    0,    0,   89,  459,
  -27,   -9,  -28,  158,    0,  989,  393,    0,  207, -213,
    0, -214, -194,  -21,  575,  575,   33,  -41,  306,    0,
    0,    0,    0,    0,    0,    0,  -38,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  386,    0,    0,
    0, -135,   75,  118,  146,    0,    0,  961,  -26,  216,
  -36,  -36,  137,  535,   -3,    0,    0,    0,    0,    0,
    0,  118,  638,  915, 1018,   56,   37,    0,    0,    0,
  197,  -20,    0,    0,  636,    0,   68,    0,   63,    0,
  674,   28,  226,    0,    0,    0,    0,    0,  213,    0,
    0,  381,    0,  222,    0,   39,    0,  243,    0,    0,
  630,  118,    0,   57,  989,  955,    0,    0,    0,    0,
    0,    0,    0,  233,   95,   44,  303,    0,    0, 1045,
 1051,    0,  103,  368,  459,  708,    0,  915,  -67,  276,
  948,    0,    0,    0,    0,    0,    0,   37,  989,    0,
 -106,  989,  382,   35,  441,   13,    0,    0,  469,  506,
  310,    0,    0,  752,  766,    0,    0,    0,  477,    0,
    0,    0,    0,    0,   -3,    0,    0,   80,    0,   19,
    0,    0,    0,    0,    0,   95,    0,    0,   -3,    0,
   -3,    0,    0,    0,    0,  -73,  -60,    0,  424,  426,
  494,  372,    0,    0,  449,    0,  108, 1004,  548,    0,
  684,    0,    0,  497,    0,  324,  270,  271,  312,    0,
  570,    0,  429,    0,    0,    0,    0,  578,   54,  569,
  354,  512,  356,    0,  798,    0,    0,    0,  595,  584,
    0,  596,  -37,    0,  915,  915,    0,  600,    0,  606,
    0,  613,    0,  690,    0,    0,    0,    0,    0,   -4,
    0,    0,  608,  270,    0,  609,    0,  614,    0,  463,
  463,  495,  463,  828,  842,    0,    0,  418,    0,    0,
  617,    0,  336,  555,  561,    0,    0,    0,    0,    9,
  154,  154,  643,    0,    0,  644,  646,    5,  649,  666,
  419,  598,  451,    0,    0,    0,  -96,  466,  -89,  611,
  616,  618,  480,  -43,  -43,  -43,    0,  -43,  -43,  463,
  463,  501,  463,  865,  915,  678,  552,  384,  552,  552,
  552,    0,  972,  989,  -32,  681,  685,    0,    0,  686,
  687,  -43,  688,  691,  697,  698,  537,  709,  710,  879,
  624,  650,    0,  -16,  543,    0,    0,  -90,    0,    0,
    0,    0,    0,    0,    0, 1082,  115,  115,  -40,  702,
    0,    0,    0,    0,    0,    0,    0,  -43,  -43,  -43,
    0,  -43,  -43,  507,  -77,  513,  515,    0,    0,  622,
  723,    0, 1334,    0,  518,    0,    0,  552,  118,  115,
    0,   83,    0,  725,  727,  732,  -43,  739,  744,  745,
  746,   18,  748,  755,    0, 1339,    0,    0,  712,    0,
    0,  756,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   16,  811,    0,    0,    0,    0,    0,    0,  -18,
  110,    0,    0,    0,    0,    0,    0,    0,    0,  901,
    0,    0,    0,  823,    6,   11,  298,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   59,
    0,    0,    0,  143, 1211,    0,    0,    0,    0,    0,
    0,    0,   85,    0, 1253,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -68,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  786,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  340,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  170,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  133,    0,    0,
    0,    0,    0,    0,  -35,    0,    0,  -55,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  793,    0,    0,    0,  113,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1284,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   10,    0,    0, 1306,    0,
 1328,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
 1024,    0,    0,  193,    0,    0,    0,   91,    0,    0,
    0,    0,    0,   43,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,   30,    0,
    0,    0,  341,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1101,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  104,    0,    0,    0,  220,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  256,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  147,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   34,   47,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  -83,    0,  -10,    0,    0,    0,    0,    0,   87,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,   46,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  791,    0,    0,  645,    0,    0,    0,    4,  338,    0,
    1,  812,    0,    0,    0,    0,    0,  627,  292,    0,
    0,    0,  -58,    0,    0,  452,    0,    0,    0,    0,
 1149,    3,    0,  -74,    0,   69,    0,  453,    0,   -1,
    0,  -33,    0,    0,  505,    0,  754,    0,  763,    0,
    0,    0,    0,    0,    0,    0,  703,    0,    0,  -70,
  -85,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0, 1096,    0,    0,    0,    0, -239,    0,
    0,
};
final static int YYTABLESIZE=1611;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         33,
  401,   33,  152,  140,   26,    9,   26,  369,   60,   53,
   10,   82,   64,  116,  335,  124,   74,  101,   85,  106,
  155,  282,  113,   33,   33,   18,  325,   52,   26,   26,
   75,   71,   61,  327,  397,   60,  290,   62,  133,  113,
   18,  154,   90,  134,   75,   93,   61,  412,  159,   60,
  180,   62,  218,  291,   92,  161,  217,  202,  131,  238,
  114,  130,  316,  131,  243,  197,  309,   22,  180,  101,
   63,   33,   33,  208,  239,  214,  432,  148,    3,  130,
    4,  131,   94,   28,  185,   23,   31,  238,   63,   33,
   33,   98,  239,  213,  268,  370,  146,  145,  147,  130,
   28,  131,  160,   95,  157,  238,  125,  124,  388,  213,
  241,  244,  267,   74,  159,  177,  249,  178,  180,  251,
  236,  109,  130,  422,  131,   65,  229,  240,  122,  402,
    9,   29,   52,  110,   33,   10,   33,   64,    1,  124,
    1,  198,  186,  207,  148,  240,  122,   60,   29,  213,
  130,  209,  131,   65,  211,   73,  219,  130,  259,  131,
  111,  148,   33,   33,  265,  396,  324,  213,  198,  187,
  157,   65,  154,   64,  284,  285,   67,   67,   15,  175,
  125,  124,  186,    4,   18,   63,  411,   27,  199,  200,
  240,   64,  211,   92,  199,  200,  201,  306,  189,  191,
  186,  199,  200,  242,   27,  293,  101,  101,  101,  187,
  254,    1,    2,  333,   99,  100,  333,  219,  219,  220,
   55,   56,   57,  219,  333,  334,  281,  187,  334,  115,
   33,   81,  211,   33,  213,  198,  334,  153,  105,  154,
   51,  113,   59,   33,   33,  159,   72,   55,   56,   57,
  211,   15,   73,  351,  352,  199,   52,   18,  113,  220,
   72,   55,   56,   57,  219,  180,  169,  186,  216,   59,
    9,    1,   33,   33,  237,   10,   15,  220,  198,  385,
   15,  431,   18,   59,  135,   63,   18,   11,   12,  239,
  310,  311,  312,   13,  187,  199,   16,  135,   31,  184,
   33,  157,  238,   19,   20,  198,  142,  143,  144,  328,
   31,  150,  176,  199,  217,  173,   31,  211,  152,  121,
  122,  123,   33,   33,  158,   33,   33,   33,   33,   33,
   26,   26,   26,   26,   26,  367,  368,  135,  421,  132,
   65,  208,  240,  122,  220,   51,  186,  124,   33,  104,
  230,  121,  122,  123,   53,  135,   15,  393,  192,   55,
   56,   57,   18,  252,  103,  213,  213,  174,  400,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  213,  132,
  199,   59,  213,  213,  213,  213,  213,  213,   64,   67,
   67,   67,  416,  121,  122,  123,   33,  132,  186,  186,
  205,   26,  186,  186,  186,  186,  186,  186,  186,  186,
  186,  186,   60,   83,   84,  186,  186,  186,  186,  186,
  186,   15,  135,   22,  104,  187,  187,   18,  165,  187,
  187,  187,  187,  187,  187,  187,  187,  187,  187,  170,
  212,   23,  187,  187,  187,  187,  187,  187,  211,  211,
   87,   86,  211,  211,  211,  211,  211,  211,  211,  211,
  211,  211,   88,   89,  132,  211,  211,  211,  211,  211,
  211,   22,  264,  117,  118,  220,  220,  171,  172,  220,
  220,  220,  220,  220,  220,  220,  220,  220,  220,   23,
  181,  182,  220,  220,  220,  220,  220,  220,   63,  215,
   61,  232,   75,   60,   61,   62,  361,   60,    3,   62,
    4,  199,  199,  119,  120,  199,  199,  199,  199,  199,
  199,  199,  199,  199,  199,  216,  216,  227,  199,  199,
  199,  199,  199,  199,   75,  234,   61,   15,   15,   60,
   75,   62,   61,   18,   18,   60,  245,   62,  246,  125,
  124,   22,  247,  135,  135,  257,   49,  135,  135,  121,
  122,  123,  135,  135,  135,  135,  135,  261,  262,   23,
  135,  135,  275,  135,  135,  135,   75,  130,   61,  131,
  258,   60,  390,   62,   61,  193,  195,   60,  255,   62,
  130,   22,  131,  132,  380,  132,  132,  199,  200,  132,
  132,  389,   96,   96,  132,  132,  132,  132,  132,   23,
  263,  302,  132,  132,   22,  132,  132,  132,  266,  362,
  363,  364,  365,  194,   55,   56,   57,  269,  270,  183,
  273,  187,   23,  199,  200,  248,  272,   22,  278,  354,
   10,    1,  279,   11,   12,   24,   59,   50,  355,   13,
   14,   15,   16,  288,  280,   23,   17,   18,  286,   19,
   20,   21,  415,   61,  287,  292,   60,  294,   62,   96,
   97,   61,  295,  304,   60,  305,   62,   22,  130,  307,
  131,  146,  145,  147,  216,  308,  313,    9,   10,  420,
  239,   11,   12,  320,  157,   23,   15,   13,   14,   15,
   16,  314,   18,  315,   17,   18,  318,   19,   20,   21,
  199,  200,  250,   22,   54,   55,   56,   57,   72,   55,
   56,   57,  322,  319,  256,  323,  130,   58,  131,  326,
  289,   23,  130,  329,  131,  332,  353,   59,  330,  371,
  331,   59,  403,  372,  373,  374,  376,   22,  386,  377,
   72,   55,   56,   57,  378,  379,   72,   55,   56,   57,
  136,  228,  121,  122,  123,   23,  382,  383,  135,  298,
  410,   11,   12,   59,  387,  347,  413,   13,  414,   59,
   16,  417,  355,  423,   17,  424,  271,   19,   20,   21,
  425,   22,   72,   55,   56,   57,  164,  427,   72,   55,
   56,   57,  428,  429,  430,   22,  433,  354,   10,   23,
  127,   11,   12,  434,  437,   59,  355,   13,   14,   15,
   16,   59,  130,   23,   17,   18,   65,   19,   20,   21,
    9,   10,  196,   29,   11,   12,  436,   22,  107,  102,
   13,   14,   15,   16,  260,  168,  419,   17,   18,  159,
   19,   20,   21,  210,  135,   23,    0,   11,   12,    0,
    0,    0,    0,   13,    0,    0,   16,   22,    0,    0,
   17,    0,  321,   19,   20,   21,  231,  141,   55,   56,
   57,   22,    0,    0,    0,   23,   55,   56,   57,    0,
  233,  142,  143,  144,  135,    0,    0,   11,   12,   23,
   59,    0,    0,   13,   22,    0,   16,    0,   59,    0,
   17,    0,    0,   19,   20,   21,    0,    0,   22,    0,
  274,    0,   23,    0,    0,    0,    0,    0,    0,    0,
  135,    0,    0,   11,   12,    0,   23,    0,    0,   13,
  108,    0,   16,    0,    0,    0,   17,    0,    0,   19,
   20,   21,  301,    0,   22,    0,    0,    0,  108,    0,
    0,    0,    0,    0,  135,    0,  303,   11,   12,    0,
    0,    0,   23,   13,    0,    0,   16,    0,    0,    0,
   17,    0,    0,   19,   20,   21,    0,  350,  206,   61,
  111,    0,   60,    0,   62,  179,   61,    0,    0,   60,
    0,   62,   61,  384,    0,   60,    0,   62,  135,    0,
    0,   11,   12,   61,    0,    0,   60,   13,   62,  113,
   16,    0,  135,  108,   17,   11,   12,   19,   20,   21,
   61,   13,    0,   60,   16,   62,    0,    0,   17,    0,
    0,   19,   20,   21,  253,   61,    0,    0,   60,    0,
   62,    0,    0,    0,  135,    0,    0,   11,   12,   61,
    0,    0,   60,   13,   62,    0,   16,    0,    0,    0,
   17,    0,    0,   19,   20,   21,    0,  146,  145,  147,
    0,  166,  166,    0,  135,    0,   61,   11,   12,   60,
    0,   62,   61,   13,    0,   60,   16,   62,  135,    0,
   17,   11,   12,   19,   20,   21,    0,   13,    0,    0,
   16,    0,    0,    0,   17,    0,    0,   19,   20,   21,
    0,  135,    0,   61,   11,   12,   60,    0,   62,    0,
   13,    0,    0,   16,    0,  135,    0,   17,   11,   12,
   19,   20,   21,    0,   13,    0,  166,   16,  166,    0,
    0,   17,    0,    0,   19,   20,   21,  108,  164,  164,
  108,  108,    0,    0,    0,    0,  108,    0,    0,  108,
    0,  135,    0,  108,   11,   12,  108,  108,  108,    0,
   13,    0,    0,   16,    0,    0,    0,   17,    0,    0,
   19,   20,   21,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   72,   55,   56,   57,    0,    0,    0,
   72,   55,   56,   57,    0,    0,  112,   55,   56,   57,
    0,    0,    0,  164,    0,  164,   59,   72,   55,   56,
   57,    0,    0,   59,    0,    0,    0,    0,    0,   59,
  366,    0,    0,    0,   72,   55,   56,   57,    0,    0,
   59,   57,   57,   57,    0,   57,    0,   57,    0,   72,
   55,   56,   57,    0,    0,    0,    0,   59,   57,   57,
   57,   57,   57,  141,   55,   56,   57,    0,    0,  166,
  166,    0,   59,    0,    0,  166,    0,  142,  143,  144,
    0,    0,  166,   45,    0,   45,   59,   45,    0,    0,
  188,   55,   56,   57,    0,    0,  190,   55,   56,   57,
   45,   45,   45,   45,   45,    0,    0,    0,    0,    0,
    0,    0,    0,   59,  169,    0,  169,    0,  169,   59,
    0,    0,    0,   57,    0,   57,    0,  399,   55,   56,
   57,  169,  169,  169,  169,  169,   46,    0,   46,    0,
   46,    0,    0,    0,    0,    0,  164,  164,    0,    0,
   59,    0,  164,   46,   46,   46,   46,   46,   47,  164,
   47,    0,   47,    0,  418,   45,  130,   45,  131,  435,
    0,  130,    0,  131,    0,   47,   47,   47,   47,   47,
    0,    0,    0,  146,  145,  147,    0,    0,  146,  145,
  147,    0,    0,    0,    0,    0,  169,    0,  169,    0,
  340,  341,    0,  343,  344,    0,    0,    0,  296,  297,
  299,  300,    0,    0,    0,    0,    0,    0,   46,    0,
   46,    0,    0,    0,    0,    0,    0,  375,    0,    0,
    0,    0,    0,    0,    0,    0,  317,    0,    0,    0,
   47,    0,   47,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   57,   57,  345,  346,
  348,  349,   57,  404,  405,  406,    0,  408,  409,   57,
   57,   57,   57,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  381,    0,    0,    0,    0,
    0,    0,  426,  392,    0,    0,    0,    0,   45,   45,
    0,    0,    0,    0,   45,    0,    0,    0,    0,    0,
    0,   45,   45,   45,   45,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  169,
  169,    0,    0,    0,    0,  169,    0,    0,    0,    0,
    0,    0,  169,  169,  169,  169,    0,    0,    0,    0,
    0,   46,   46,    0,    0,    0,    0,   46,    0,    0,
    0,    0,    0,    0,   46,   46,   46,   46,    0,    0,
    0,    0,    0,   47,   47,    0,    0,    0,    0,   47,
    0,    0,    0,    0,    0,    0,   47,   47,   47,   47,
    0,    0,    0,  142,  143,  144,    0,    0,  142,  143,
  144,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
   41,    3,   77,   74,    1,    0,    3,   40,   45,    9,
    0,   40,   10,   40,   58,    0,  123,   59,   16,   58,
   41,   59,   58,   25,   26,   44,  123,   44,   25,   26,
   40,   59,   42,  123,  125,   45,   41,   47,   42,   58,
   59,  125,  256,   47,   40,  260,   42,  125,   59,   45,
   41,   47,   40,   58,  123,   89,   44,  125,    0,   41,
   58,   43,   58,   45,  125,  136,   58,   40,   59,  125,
   41,   73,   74,  148,   41,   41,   59,   75,  123,   43,
  125,   45,  277,   41,   41,   58,   44,   41,   59,   91,
   92,   59,   59,   59,   41,  335,   60,   61,   62,   43,
   58,   45,   40,  125,   59,   59,   44,   45,  125,    0,
  196,  197,   59,  123,  125,   59,  202,  115,  116,  205,
   41,  257,   43,   41,   45,   41,  160,   41,   41,  369,
  125,   41,   44,   59,  136,  125,  138,  135,  123,   45,
  125,  138,    0,  141,   41,   59,   59,   45,   58,   40,
   43,  149,   45,   41,  152,  262,  156,   43,  217,   45,
   43,   58,  164,  165,  223,  256,  263,   58,  165,    0,
  125,   59,  256,   41,  245,  246,   44,   45,  268,  111,
   44,   45,   40,  125,  274,   40,  264,   41,  262,  263,
  264,   59,    0,  262,  262,  263,  264,  283,  130,  131,
   58,  262,  263,  264,   58,  264,  262,  263,  264,   40,
  208,  256,  257,  257,  256,  257,  257,  217,  218,    0,
  257,  258,  259,  223,  257,  269,  264,   58,  269,  256,
  232,  260,   40,  235,  125,  232,  269,   41,  277,  260,
  257,  277,  279,  245,  246,  256,  256,  257,  258,  259,
   58,  268,  262,  324,  325,    0,   44,  274,  277,   40,
  256,  257,  258,  259,  264,  256,   41,  125,  256,  279,
  265,  256,  274,  275,  256,  265,  268,   58,  275,  350,
  268,  264,  274,  279,  257,  256,  274,  260,  261,  256,
  290,  291,  292,  266,  125,   40,  269,    0,  256,  256,
  302,  256,  256,  276,  277,  302,  270,  271,  272,  309,
  268,  256,  256,   58,   44,  277,  274,  125,  393,  257,
  258,  259,  324,  325,  257,  327,  328,  329,  330,  331,
  327,  328,  329,  330,  331,  333,  334,   40,  256,    0,
  256,  416,  256,  256,  125,  257,   44,   45,  350,   44,
   41,  257,  258,  259,  354,   58,  268,  355,  256,  257,
  258,  259,  274,  256,   59,  256,  257,  125,  366,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   40,
  125,  279,  273,  274,  275,  276,  277,  278,  256,  257,
  258,  259,  390,  257,  258,  259,  398,   58,  256,  257,
  125,  398,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,   45,  256,  257,  273,  274,  275,  276,  277,
  278,  268,  125,   40,   44,  256,  257,  274,   91,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   59,
   59,   58,  273,  274,  275,  276,  277,  278,  256,  257,
   58,   59,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,  256,  257,  125,  273,  274,  275,  276,  277,
  278,   40,   44,  258,  259,  256,  257,  256,  257,  260,
  261,  262,  263,  264,  265,  266,  267,  268,  269,   58,
  258,  259,  273,  274,  275,  276,  277,  278,   40,   59,
   42,  164,   40,   45,   42,   47,  123,   45,  123,   47,
  125,  256,  257,   61,   62,  260,  261,  262,  263,  264,
  265,  266,  267,  268,  269,  256,  256,   59,  273,  274,
  275,  276,  277,  278,   40,   59,   42,  268,  268,   45,
   40,   47,   42,  274,  274,   45,  123,   47,  123,   44,
   45,   40,   59,  256,  257,   59,  125,  260,  261,  257,
  258,  259,  265,  266,  267,  268,  269,  256,  257,   58,
  273,  274,  235,  276,  277,  278,   40,   43,   42,   45,
  257,   45,   40,   47,   42,  133,  134,   45,   41,   47,
   43,   40,   45,   59,   58,  256,  257,  262,  263,  260,
  261,   59,  262,  263,  265,  266,  267,  268,  269,   58,
   41,  274,  273,  274,   40,  276,  277,  278,   41,  328,
  329,  330,  331,  256,  257,  258,  259,   59,  275,  125,
  275,  127,   58,  262,  263,  264,  125,   40,   44,  256,
  257,  256,   59,  260,  261,    1,  279,    3,  265,  266,
  267,  268,  269,   41,   59,   58,  273,  274,   59,  276,
  277,  278,   41,   42,   59,   58,   45,   59,   47,   25,
   26,   42,   59,  256,   45,   59,   47,   40,   43,  125,
   45,   60,   61,   62,  256,  125,   44,  256,  257,  398,
  186,  260,  261,  275,   59,   58,  268,  266,  267,  268,
  269,   58,  274,   58,  273,  274,   58,  276,  277,  278,
  262,  263,  264,   40,  256,  257,  258,  259,  256,  257,
  258,  259,  125,   58,   41,  275,   43,  269,   45,  264,
   41,   58,   43,  123,   45,  256,   59,  279,  123,   59,
  123,  279,   41,   59,   59,   59,   59,   40,  125,   59,
  256,  257,  258,  259,   58,   58,  256,  257,  258,  259,
  123,  256,  257,  258,  259,   58,   58,   58,  257,  275,
  264,  260,  261,  279,  125,  275,  264,  266,  264,  279,
  269,   59,  265,   59,  273,   59,  275,  276,  277,  278,
   59,   40,  256,  257,  258,  259,  123,   59,  256,  257,
  258,  259,   59,   59,   59,   40,   59,  256,  257,   58,
    0,  260,  261,   59,   59,  279,  265,  266,  267,  268,
  269,  279,    0,   58,  273,  274,   41,  276,  277,  278,
  256,  257,  125,   41,  260,  261,  125,   40,   48,   28,
  266,  267,  268,  269,  218,   92,  395,  273,  274,   87,
  276,  277,  278,  151,  257,   58,   -1,  260,  261,   -1,
   -1,   -1,   -1,  266,   -1,   -1,  269,   40,   -1,   -1,
  273,   -1,  275,  276,  277,  278,  125,  256,  257,  258,
  259,   40,   -1,   -1,   -1,   58,  257,  258,  259,   -1,
  125,  270,  271,  272,  257,   -1,   -1,  260,  261,   58,
  279,   -1,   -1,  266,   40,   -1,  269,   -1,  279,   -1,
  273,   -1,   -1,  276,  277,  278,   -1,   -1,   40,   -1,
  123,   -1,   58,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
  257,   -1,   -1,  260,  261,   -1,   58,   -1,   -1,  266,
   40,   -1,  269,   -1,   -1,   -1,  273,   -1,   -1,  276,
  277,  278,  125,   -1,   40,   -1,   -1,   -1,   58,   -1,
   -1,   -1,   -1,   -1,  257,   -1,  125,  260,  261,   -1,
   -1,   -1,   58,  266,   -1,   -1,  269,   -1,   -1,   -1,
  273,   -1,   -1,  276,  277,  278,   -1,  123,   41,   42,
   43,   -1,   45,   -1,   47,   41,   42,   -1,   -1,   45,
   -1,   47,   42,  125,   -1,   45,   -1,   47,  257,   -1,
   -1,  260,  261,   42,   -1,   -1,   45,  266,   47,   59,
  269,   -1,  257,  123,  273,  260,  261,  276,  277,  278,
   42,  266,   -1,   45,  269,   47,   -1,   -1,  273,   -1,
   -1,  276,  277,  278,   41,   42,   -1,   -1,   45,   -1,
   47,   -1,   -1,   -1,  257,   -1,   -1,  260,  261,   42,
   -1,   -1,   45,  266,   47,   -1,  269,   -1,   -1,   -1,
  273,   -1,   -1,  276,  277,  278,   -1,   60,   61,   62,
   -1,   58,   59,   -1,  257,   -1,   42,  260,  261,   45,
   -1,   47,   42,  266,   -1,   45,  269,   47,  257,   -1,
  273,  260,  261,  276,  277,  278,   -1,  266,   -1,   -1,
  269,   -1,   -1,   -1,  273,   -1,   -1,  276,  277,  278,
   -1,  257,   -1,   42,  260,  261,   45,   -1,   47,   -1,
  266,   -1,   -1,  269,   -1,  257,   -1,  273,  260,  261,
  276,  277,  278,   -1,  266,   -1,  123,  269,  125,   -1,
   -1,  273,   -1,   -1,  276,  277,  278,  257,   58,   59,
  260,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,  269,
   -1,  257,   -1,  273,  260,  261,  276,  277,  278,   -1,
  266,   -1,   -1,  269,   -1,   -1,   -1,  273,   -1,   -1,
  276,  277,  278,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,  258,  259,   -1,   -1,   -1,
  256,  257,  258,  259,   -1,   -1,  256,  257,  258,  259,
   -1,   -1,   -1,  123,   -1,  125,  279,  256,  257,  258,
  259,   -1,   -1,  279,   -1,   -1,   -1,   -1,   -1,  279,
  269,   -1,   -1,   -1,  256,  257,  258,  259,   -1,   -1,
  279,   41,   42,   43,   -1,   45,   -1,   47,   -1,  256,
  257,  258,  259,   -1,   -1,   -1,   -1,  279,   58,   59,
   60,   61,   62,  256,  257,  258,  259,   -1,   -1,  256,
  257,   -1,  279,   -1,   -1,  262,   -1,  270,  271,  272,
   -1,   -1,  269,   41,   -1,   43,  279,   45,   -1,   -1,
  256,  257,  258,  259,   -1,   -1,  256,  257,  258,  259,
   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  279,   41,   -1,   43,   -1,   45,  279,
   -1,   -1,   -1,  123,   -1,  125,   -1,  256,  257,  258,
  259,   58,   59,   60,   61,   62,   41,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
  279,   -1,  262,   58,   59,   60,   61,   62,   41,  269,
   43,   -1,   45,   -1,   41,  123,   43,  125,   45,   41,
   -1,   43,   -1,   45,   -1,   58,   59,   60,   61,   62,
   -1,   -1,   -1,   60,   61,   62,   -1,   -1,   60,   61,
   62,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
  315,  316,   -1,  318,  319,   -1,   -1,   -1,  270,  271,
  272,  273,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,
  125,   -1,   -1,   -1,   -1,   -1,   -1,  342,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  298,   -1,   -1,   -1,
  123,   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,  320,  321,
  322,  323,  262,  378,  379,  380,   -1,  382,  383,  269,
  270,  271,  272,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  347,   -1,   -1,   -1,   -1,
   -1,   -1,  407,  355,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,
   -1,  256,  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,
   -1,   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,
   -1,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,  272,
   -1,   -1,   -1,  270,  271,  272,   -1,   -1,  270,  271,
  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"$$2 :",
"conjunto_sentencias : '{' sentencias $$2 '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$3 :",
"funcion : FUN ID $$3 funcion_parametros",
"funcion : error_funcion",
"$$4 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$4 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"$$5 :",
"cuerpo_funcion : sentencias $$5 retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : error_expresion",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"factor : '-' CTE_INT",
"factor : '-' CTE_DBL",
"factor : ID",
"factor : invocacion",
"factor : TOF64 '(' expresion ')'",
"factor : error_factor",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"parametro_real : '-' CTE_INT",
"parametro_real : '-' CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable : BREAK ';'",
"ejecutable : BREAK ':' etiqueta ';'",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : expresion_dountil",
"$$6 :",
"ejecutable_defer : DEFER $$6 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$7 :",
"seleccion : IF condicion $$7 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$8 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$8 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$9 :",
"expresion_dountil : DO $$9 cuerpo_dountil",
"$$10 :",
"expresion_dountil : etiqueta ':' DO $$10 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$11 :",
"cuerpo_dountil : '{' ejecutables '}' UNTIL condicion $$11 cuerpo_asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$12 :",
"cuerpo_dountil_etiqueta : '{' ejecutables '}' UNTIL condicion $$12 cuerpo_asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"cuerpo_asignacion_do_until : ':' '(' asignacion_do_until ')' ';'",
"cuerpo_asignacion_do_until : error_cuerpo_asignacion_do_until",
"asignacion_do_until : ID ASSIGN expresion",
"asignacion_do_until : error_asignacion_do_until",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_declarativa : tipo ';'",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_retorno_expresion : expresion",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_termino : '*' factor",
"error_termino : termino '*' error",
"error_termino : '/' factor",
"error_termino : termino '/' error",
"error_factor : TOF64 error expresion ')'",
"error_factor : TOF64 '(' expresion error",
"error_factor : TOF64 '(' ')'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_asignacion : ID error",
"error_asignacion : ID ASSIGN error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : invocacion",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : DO error",
"error_dountil : ':' DO",
"error_dountil : etiqueta DO",
"error_cuerpo_dountil : ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : ':' asignacion_do_until ')'",
"error_cuerpo_asignacion_do_until : ':' '(' ')'",
"error_cuerpo_asignacion_do_until : ':' '(' asignacion_do_until error",
"error_asignacion_do_until : ASSIGN expresion",
"error_asignacion_do_until : ID expresion",
"error_asignacion_do_until : ID ASSIGN error",
};

//#line 587 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;
public static String nombre_funcion_invocacion = "";
public static ArrayList<String> parametros_declaracion_funcion;
public static boolean contiene_break = false;
public static Stack<Boolean> esta_do_until = new Stack<>();
public static Stack<Boolean> esta_do_until_etiqueta = new Stack<>();
public static Stack<String> etiqueta_actual = new Stack<>();

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
	this.parametros_declaracion_funcion = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
		int nro = Integer.parseInt(lexema); //SOLO SE PERMITEN NUMEROS POSITIVOS
		analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
		Main.polaca.addElementPolaca(nro);
		Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
		Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
		Main.polaca.addElementPolaca(flotante);
	}
	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}

public String ambitoReal(String nombre, String ambito){
	String lexema = nombre + "." + ambito;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	int posicion = lexema.lastIndexOf('.');
	while ((clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) && (posicion != -1)){
		lexema = lexema.substring(0, posicion);
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
		posicion = lexema.lastIndexOf('.');
	}
	return lexema;
}


public void agregarInformacionBreak(String etiqueta, int posicion){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(etiqueta + "." + this.ambito);
	String pos = String.valueOf(posicion);
	if (clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
		String atributo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "posiciones break");
		if (atributo.equals("-1")){
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", pos);
		}
		else
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", atributo + "." + pos);
	}
}

public void actualizarPolacaBreaks(){
	String etiqueta = this.etiqueta_actual.pop();
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(etiqueta + "." + this.ambito);
	if (clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
		String atributo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "posiciones break");
		if (!atributo.equals("-1")){
			int valor = -1;
			int pos = atributo.indexOf(".");
			while (pos != -1){
				valor = Integer.parseInt(atributo.substring(0, pos));
				Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, valor);
				atributo = atributo.substring(pos+1, atributo.length());
				pos = atributo.indexOf(".");
			}
			valor = Integer.parseInt(atributo);
			Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, valor);
		}
	}
}
					
					

	
	
					
					
					
//#line 1073 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 14:
//#line 42 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													if(lista_de_variables!=null){
														for(String lexema : lista_de_variables) /* por cada variable declarada*/
															incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
														lista_de_variables.clear();
													}}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 17:
//#line 55 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 18:
//#line 58 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 19:
//#line 61 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 21:
//#line 68 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;
								Main.polaca.addElementPolaca(this.nombre_funcion + "." + this.ambito);
								Main.polaca.addElementPolaca("#FUN");}
break;
case 24:
//#line 75 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																	for (int i = 1; i <= parametros_declaracion_funcion.size(); i++)
																		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "parametro_" + i, this.parametros_declaracion_funcion.get(i-1));
																}
																this.parametros_declaracion_funcion.clear();
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 32:
//#line 100 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);
								this.parametros_declaracion_funcion.add(ambitoReal(nombreParam, ambito_actual));}
break;
case 34:
//#line 111 "gramatica.y"
{if (this.existeDefer){
									this.existeDefer = false;
									Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 35:
//#line 114 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												Main.polaca.addElementPolaca("#RET");}
break;
case 36:
//#line 116 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.polaca.addElementPolaca("#RET");
									Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");}
break;
case 38:
//#line 122 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 43:
//#line 132 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 46:
//#line 137 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 47:
//#line 139 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 49:
//#line 144 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 50:
//#line 146 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 53:
//#line 152 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 54:
//#line 157 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 55:
//#line 162 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									actualizarRango();}
break;
case 56:
//#line 164 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									actualizarRango();}
break;
case 57:
//#line 166 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 59:
//#line 173 "gramatica.y"
{Main.polaca.addElementPolaca("#TOF64");}
break;
case 61:
//#line 178 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
															Main.polaca.addElementPolaca("#CALL");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la funcion " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 68:
//#line 203 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 69:
//#line 209 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 70:
//#line 215 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 71:
//#line 221 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 72:
//#line 224 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 73:
//#line 229 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 74:
//#line 230 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 75:
//#line 231 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 76:
//#line 232 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 77:
//#line 233 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 78:
//#line 234 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 81:
//#line 239 "gramatica.y"
{if (!esta_do_until.isEmpty()){
										contiene_break = true;
										Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca("");
										Main.polaca.addElementPolaca("#BI");
										Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");
									}
									else
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede declarar un Break fuera de un do-until");}
break;
case 82:
//#line 248 "gramatica.y"
{if (!esta_do_until_etiqueta.isEmpty()){
													String nombre_etiqueta = val_peek(1).sval;
													agregarInformacionBreak(nombre_etiqueta, Main.polaca.getSize());
													Main.polaca.addElementPolaca("");
													Main.polaca.addElementPolaca("#BI");
													if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
														Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");
												}
												else
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede declarar un Break con Etiqueta fuera de un do-until con etiqueta");}
break;
case 88:
//#line 268 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.addElementPolaca("#DEFER");}
break;
case 89:
//#line 270 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer"); 
											Main.polaca.addElementPolaca("#FINDEFER");}
break;
case 90:
//#line 274 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 92:
//#line 283 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("#BF");}
break;
case 95:
//#line 290 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 96:
//#line 293 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("#BI");
																Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 99:
//#line 302 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 102:
//#line 312 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.polaca.addElementPolaca("#OUT");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", "cadena");}}
break;
case 104:
//#line 322 "gramatica.y"
{String id = val_peek(1).sval;
														Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
														Main.polaca.addElementPolaca("#DISCARD");
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
														if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
															Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la variable " + id + ", no fue declarada en ese ambito");
														}
														else{
														if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
															Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
														}
														this.cantidad_parametros_reales = 0;}
break;
case 106:
//#line 337 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 108:
//#line 341 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
						Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
						esta_do_until.push(true);}
break;
case 110:
//#line 344 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_etiqueta + "." + this.ambito);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "posiciones break", "-1");
										esta_do_until_etiqueta.push(true);
										etiqueta_actual.push(nombre_etiqueta);}
break;
case 114:
//#line 359 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("#BT");
																				esta_do_until.pop();}
break;
case 115:
//#line 363 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (contiene_break){ /*Hay un Break*/
													contiene_break = false;
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 117:
//#line 374 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("#BT");
																								esta_do_until_etiqueta.pop();}
break;
case 118:
//#line 378 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												actualizarPolacaBreaks();
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 122:
//#line 392 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion en la sentencia do-until");
												String id = val_peek(2).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSemanticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error semantico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 124:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 125:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 126:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 127:
//#line 409 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 128:
//#line 410 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 129:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 130:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 131:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 132:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 133:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 134:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 135:
//#line 420 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 136:
//#line 421 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable en la declaracion");}
break;
case 137:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 138:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 139:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 140:
//#line 431 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 141:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 142:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 143:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 144:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 145:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 146:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 147:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 148:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 149:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 150:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 151:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 152:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 153:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 154:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 155:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 156:
//#line 461 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion de retorno");}
break;
case 157:
//#line 462 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion de retorno");}
break;
case 158:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio en la expresion de retorno");}
break;
case 159:
//#line 464 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura y cierre de la expresion de retorno");}
break;
case 160:
//#line 468 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 161:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 162:
//#line 470 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 163:
//#line 471 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 164:
//#line 472 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 165:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 166:
//#line 474 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 167:
//#line 477 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 168:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 169:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 170:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 171:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 172:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 173:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 174:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion en la conversion tof64");}
break;
case 175:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion en la conversion tof64");}
break;
case 176:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion en la conversion tof64");}
break;
case 177:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 178:
//#line 496 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 179:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 180:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 181:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 182:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 183:
//#line 503 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 184:
//#line 504 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 185:
//#line 505 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 186:
//#line 506 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, solo se define el identificador de la asignacion");}
break;
case 187:
//#line 507 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se reconoce la expresion");}
break;
case 188:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 189:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 190:
//#line 514 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 191:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 192:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 193:
//#line 517 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 194:
//#line 518 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 195:
//#line 519 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 196:
//#line 520 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 197:
//#line 521 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 198:
//#line 522 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 199:
//#line 523 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 200:
//#line 524 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 201:
//#line 525 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 202:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 203:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 204:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 205:
//#line 531 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 206:
//#line 532 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 207:
//#line 533 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 208:
//#line 536 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 209:
//#line 537 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 210:
//#line 538 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 211:
//#line 539 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 212:
//#line 540 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 213:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 214:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 215:
//#line 545 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el discard antes de la invocacion a la funcion");}
break;
case 216:
//#line 546 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 217:
//#line 549 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 218:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 219:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 220:
//#line 552 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 221:
//#line 556 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la sentencia do_until");}
break;
case 222:
//#line 557 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta de la sentencia do_until");}
break;
case 223:
//#line 558 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ':' en la sentencia do_until");}
break;
case 224:
//#line 562 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 225:
//#line 563 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 226:
//#line 564 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 227:
//#line 565 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 228:
//#line 566 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 229:
//#line 569 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 230:
//#line 570 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 231:
//#line 571 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 232:
//#line 572 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 233:
//#line 573 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 234:
//#line 576 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 235:
//#line 577 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 236:
//#line 578 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 237:
//#line 579 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 238:
//#line 582 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar en la sentencia do-until");}
break;
case 239:
//#line 583 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion en la sentencia do-until");}
break;
case 240:
//#line 584 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar en la sentencia do-until");}
break;
//#line 2091 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
