//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   30,   34,   34,   34,
   34,   36,   36,   38,   36,   39,   36,   36,   36,   40,
   40,   41,   41,   41,   41,   43,   44,   44,   44,   32,
   32,   32,   32,   32,   32,    7,    7,   46,   46,   46,
   46,   46,   47,   48,   48,   55,   49,   49,   54,   59,
   54,   54,   58,   58,   57,   50,   50,   64,   51,   51,
   63,   63,   68,   52,   71,   52,   52,   69,   75,   67,
   67,   78,   70,   70,   74,   74,   73,   73,   73,   73,
   77,   77,   77,    3,    3,    5,    5,    5,    5,    5,
    5,   12,   12,   12,   12,   13,   13,   16,   16,   20,
   20,   20,   20,   20,   23,   23,   23,   23,   24,   24,
   26,   26,   28,   28,   31,   31,   31,   33,   33,   33,
   33,   33,   33,   33,   35,   35,   35,   35,   35,   35,
   37,   37,   37,   37,   42,   45,   45,   45,   45,   53,
   53,   53,   53,   56,   56,   60,   60,   60,   60,   60,
   60,   60,   60,   60,   60,   61,   61,   61,   61,   61,
   61,   62,   62,   62,   62,   62,   65,   66,   66,   66,
   66,   72,   72,   72,   76,   76,   76,   76,   76,   79,
   79,   79,   79,   79,   80,   80,   80,   80,   81,   81,
   81,   81,   82,   82,   82,   82,   82,   82,   82,   82,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    4,    1,    5,    5,    1,
    1,    1,    1,    0,    3,    0,    3,    1,    1,    4,
    1,    3,    1,    0,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    2,    4,    1,    0,    4,    1,    6,    0,
    6,    1,    6,    1,    1,    5,    1,    0,    4,    1,
    4,    1,    0,    3,    0,    5,    1,    1,    0,    7,
    1,    0,    7,    1,    5,    1,    3,    1,    2,    1,
    5,    4,    1,    1,    1,    2,    1,    1,    2,    2,
    3,    2,    2,    3,    1,    3,    3,    2,    2,    6,
    6,    6,    6,    6,    5,    2,    2,    2,    2,    2,
    2,    2,    2,    2,    2,    2,    2,    4,    4,    5,
    4,    4,    3,    3,    3,    3,    3,    4,    4,    3,
    2,    2,    2,    2,    4,    5,    2,    2,    2,    3,
    3,    3,    4,    2,    3,    4,    4,    4,    4,    5,
    5,    5,    5,    5,    5,    9,    9,    9,    9,    9,
    9,    4,    4,    4,    4,    4,    2,    3,    4,    3,
    3,    9,   10,    2,    7,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    2,    3,    3,    3,    1,    3,
    2,    1,    4,    4,    4,    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  128,    0,  125,    3,    5,    0,    0,
    0,    0,    0,   15,    0,   16,    0,  103,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   14,   19,   22,
   76,   77,   78,   79,   80,   81,   82,   85,   88,   97,
  100,    0,  107,    0,  129,    0,  138,    0,    0,    0,
    0,    0,   52,   53,    0,    0,    0,    0,    0,    0,
    0,   47,   50,   51,   59,   61,    0,    0,    0,    0,
    0,   42,  184,   92,    0,    0,  139,   20,    0,  207,
   98,    0,    0,    0,   83,    0,  214,  131,    6,    7,
   12,    0,   17,    0,  133,    0,    0,    0,    2,    4,
    0,  229,   11,    0,    0,  120,  136,  134,    0,    0,
  182,    0,    0,    0,   54,   56,  171,  173,    0,    0,
  181,    0,    0,    0,    0,    0,    0,    0,   71,   70,
   75,   72,   73,   74,    0,    0,  185,    0,    0,    0,
    0,    0,    0,  180,    0,    0,  104,    0,  111,    0,
   13,  137,   18,    0,  105,  119,    0,    0,   10,    0,
    0,   67,   68,   69,    0,    0,    0,    0,   65,  183,
   84,    0,  170,    0,   55,   57,  165,    0,  166,    0,
    0,    0,    0,    0,    0,    0,  163,    0,    0,    0,
   87,    0,  203,  204,    0,  206,    0,    0,    0,    0,
   21,    0,   25,    0,    0,   29,   32,    0,    0,   99,
  102,    0,    0,    0,  202,    0,    0,    0,    0,  123,
    0,  230,  117,    0,  177,  175,   60,    0,  179,  168,
  169,   46,    0,    0,    0,    0,    0,  188,   94,    0,
    0,  189,    0,  187,    0,  186,    0,  161,    0,  159,
  158,   96,  149,  146,    0,  150,   31,    0,    0,  148,
    0,    0,    0,    0,    0,    0,    0,  108,    0,    0,
    0,    0,    0,    0,    0,  106,    0,  114,    0,    0,
   48,   49,    0,    0,  192,  193,    0,  194,    0,  191,
  190,  160,   41,    0,    0,    0,    0,    0,  210,    0,
  208,    0,    0,    0,    0,    0,  239,    0,  238,  237,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   89,   91,    0,    0,    0,    0,    0,  209,  101,
    0,    0,    0,  109,    0,    0,  122,  235,    0,  234,
  233,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  116,  176,    0,    0,    0,    0,    0,    0,    0,  145,
    0,    0,    0,    0,    0,    0,  121,    0,    0,    0,
    0,    0,    0,    0,    0,  225,  212,    0,    0,    0,
    0,    0,    0,  143,    0,   35,   37,   23,  144,  142,
  141,  140,  216,  217,  219,  110,  218,  215,    0,    0,
    0,    0,  112,    0,    0,  227,    0,  226,    0,    0,
    0,   93,  152,  154,    0,    0,   38,    0,   40,    0,
  151,   34,    0,  213,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  157,    0,   36,  155,   33,
   24,  221,  222,  224,  113,  223,  220,  115,    0,    0,
    0,    0,    0,   39,  198,  199,  201,  200,  197,  196,
};
final static short yydgoto[] = {                          5,
    6,   44,    7,  383,    8,   23,  103,  125,   25,   26,
   27,   28,   29,  201,  143,   30,  202,  384,  423,  203,
  204,  205,  206,  207,  385,  386,  416,  387,   70,   71,
  419,  136,   72,   61,   62,   63,   64,  175,  176,   65,
  166,   66,  167,  168,  169,   31,   32,   33,   34,   35,
   36,   37,   38,   73,  138,   39,  126,  238,  289,   74,
  239,   40,  210,  145,   41,  211,  147,   82,   42,  276,
  221,   43,  105,  350,  364,  149,  219,  428,  278,  351,
  106,  220,
};
final static short yysindex[] = {                       240,
  389,    0,  351,    0,    0,    0,    0,    0,  276,  690,
   -2,  -13,  -85,    0,  772,    0,  171,    0,  723, -178,
 -162,   29,  389,  389,   64,  199,   27,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  -29,    0,  -51,    0,   49,    0,  470,  -80,  128,
  139,  150,    0,    0,  746,  -31,  224,  615,  615,  449,
  123,    0,    0,    0,    0,    0,  546,  675,  801,  -57,
   97,    0,    0,    0,  163,    1,    0,    0,  512,    0,
    0,  447,   85,  690,    0,  190,    0,    0,    0,    0,
    0,  275,    0,  109,    0,  232,  205,  -34,    0,    0,
  277,    0,    0,  552,  254,    0,    0,    0,  448,  308,
    0,   -4,  772,  -30,    0,    0,    0,    0,  915,  941,
    0,  367,  370,  575,  675,  293,  296,  717,    0,    0,
    0,    0,    0,    0,   97,  772,    0,  -46,  772,  365,
   35,  376,  -24,    0,  202,  414,    0,  346,    0,  415,
    0,    0,    0,  581,    0,    0,    3,  426,    0,  223,
  123,    0,    0,    0,  206,  -16,  330,    0,    0,    0,
    0,  550,    0,    9,    0,    0,    0,  123,    0,  123,
  615,  615,  571,  -52,  602,  605,    0,    6,  708,  556,
    0,  633,    0,    0,  444,    0,  250, -146,   73,  285,
    0,  479,    0,  152,    0,    0,    0,  257,  483,    0,
    0,  252,  -81,  281,    0,  -27, -121,  614,  455,    0,
  500,    0,    0,  319,    0,    0,    0,  206,    0,    0,
    0,    0,  543,  549,  441,  471,  537,    0,    0,  541,
  -25,    0,  544,    0,  547,    0,  561,    0,  697,    0,
    0,    0,    0,    0,   51,    0,    0,  551, -146,    0,
  564,   52,  555,  319,  319,  144,  319,    0,   82,  557,
  565,  -23, -121,  336,  523,    0,  501,    0,  572,  590,
    0,    0,  675,  675,    0,    0,  576,    0,  286,    0,
    0,    0,    0,  -50, -107, -107,  593,  579,    0,  588,
    0,  601,  604,  -21,  623,  624,    0,  625,    0,    0,
   92,  629,  630,  319,  398,  -72,  418,  148,  438,  574,
  577,    0,    0,  -95,  589,  591,  598,  466,    0,    0,
  148,  148,  148,    0,  148,  148,    0,    0,  670,    0,
    0,  672,  319,  319,  155,  319,  690,   45,  682,  685,
    0,    0,  -87,  481,  375,  269,  375,  375,  375,    0,
  695,  706,  709,  148,  711,  712,    0,  148,  714,  716,
  295,  724,  725,  147,  726,    0,    0,  628,  675,  728,
  460,  303,  510,    0,  246,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  731,  148,
  148,  148,    0,  148,  148,    0,  744,    0,  661,  669,
  673,    0,    0,    0,  439,  736,    0,  950,    0,  679,
    0,    0,  375,    0,  738,  751,  752,  148,  757,  761,
  767,  563,  -42,  585,  592,    0,  977,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  780,  781,
   47,  786,  796,    0,    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,   10,  860,    0,    0,    0,    0,    0,    0,  -26,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  881,   13,   14,   56,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  882,    0,    0,    0,    0,
    0,  974,    0,    0,    0,    0,    0,    0,    0,    0,
 1045,    0,    0,    0,    0,    0,    0,    0,    0,  -39,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  -10,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  201,    0,    0,    0,    0,    0,    0,
  -68,    0,    0,  -66,    0,    0,    0,    0,    0,   88,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0, 1003, 1034,    0,  255,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  845,    0,  847,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  -62,    0,    0,
 1071,    0,    0,    0,    0,    0,    0,  620,    0,    0,
    0,    0,    0,    0,    0,    0,    0, 1082,    0, 1093,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  994,    0,    0,   30,    0,    0,    0,   60,    0,
    0,    0,    0,    0,  104,    0,    0,   66,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,   54,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  310,    0,    0,    0,    0,    0,    0,    0, 1024,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  108,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,   75,
    0,    0,    0,    0,    0,    0,  120,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  111,    0,    0,  175,
    0,    0,    0,    0,    0,    0,    0,  -61,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  -56,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
    0,    0,    0,    0,    0,  265,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  366,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  849,    0,    0,  508,    0,    0,   -1,  531,    0,   -6,
  869,    0,    0,    0,    0,    0,  699, -259,    0,    0,
    0,  -96,    0,    0,  513,    0,    0,    0,  844,   -9,
    0,  -67,    0,  403,    0,  387,    0,    0,    0,    0,
  -64,    0,    0,  -78,    0,  880,    0, 1038,    0,    0,
    0,    0,    0,  762,    0,    0,  -63, -106,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0, -126,    0,
    0,    0,  -15, 1046,    0,    0, -163,    0,    0,    0,
    0,    0,
};
final static int YYTABLESIZE=1474;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         24,
   60,   24,   50,  139,  127,   79,  228,  324,  114,  124,
  173,   58,    8,    9,   57,  199,   59,   17,   69,  198,
   58,   24,   24,   57,  227,   59,   76,  355,   98,  205,
  269,  108,   17,  288,  311,  379,  333,   69,  119,   58,
  120,  142,   57,  266,   59,  112,  228,  108,  119,  232,
  120,  119,  345,  120,  171,  135,  232,  277,  118,  135,
  184,  222,  231,  240,  228,  228,  148,  189,  236,  205,
   96,    3,  241,    4,   60,  195,   68,  242,  244,  246,
  209,   86,  451,   86,  374,   95,  225,  205,  229,  270,
  271,  294,  300,  194,  178,  135,  389,  390,  391,  392,
   28,  254,  159,  172,  174,  458,   64,  260,  295,  197,
  299,  316,  178,  135,   87,   62,  198,   28,  188,  195,
   68,   14,   91,  159,   64,   48,  190,   16,   64,  192,
  213,  228,    1,   62,    1,  268,  200,    8,    9,  119,
  307,  120,  308,  262,   27,  312,  313,   30,  147,  280,
  338,   26,   96,   88,  205,   87,  133,  132,  134,  195,
   14,   27,  297,  441,  122,  147,   16,  151,   26,  123,
   77,   78,   14,  100,  211,  378,  107,  195,   16,  249,
  135,  109,  323,   69,  339,   58,  108,  406,   57,  110,
   59,  200,  200,  265,   69,  259,   58,  200,  137,   57,
  132,   59,  344,  140,    1,  348,  232,   48,  118,  235,
  236,  240,  231,  240,  211,   67,  159,   14,  236,  320,
  321,  450,   86,   16,  113,   51,   52,   53,   54,  268,
  150,  197,  211,  268,   51,   52,   53,   54,  287,  226,
  132,  208,  155,   14,  195,  165,   75,   97,   56,   16,
  108,  170,  200,   51,   52,   53,   54,   56,  132,   67,
  141,  247,  228,  228,  231,    1,  108,  228,  228,  228,
  228,  228,  228,  228,  228,  228,   56,    8,    9,  228,
  228,  228,  228,  228,  228,  205,  205,  325,  326,  327,
  205,  205,  205,  205,  205,  205,  205,  205,  205,  211,
  165,  347,  205,  205,  205,  205,  205,  205,   20,  178,
  457,  135,  135,   15,  410,  411,  135,  356,   49,   49,
  135,  135,  135,  135,  135,  132,   21,  154,  197,  135,
   62,  135,  135,  135,   69,  156,   58,   60,  268,   57,
   14,   59,  415,   64,   58,  433,   16,   57,  268,   59,
  139,  165,  402,   24,   24,   24,   24,   24,   69,   30,
   58,  414,    3,   57,    4,   59,  129,  130,  131,  189,
  422,   30,  418,  228,   50,  195,  195,   30,  160,   95,
  195,  195,  195,  195,  195,  195,  195,  195,  195,  153,
   20,  388,  195,  195,  195,  195,  195,  195,   48,   51,
   52,   53,   54,  347,  347,  437,  181,  197,   21,  182,
   51,   52,   53,   54,   20,   15,   15,  185,  304,   14,
  186,   24,   56,  193,  156,   16,   80,   81,   20,  371,
  211,  211,   21,   56,  196,  211,  211,  211,  211,  211,
  211,  211,  211,  211,  117,  118,   21,  211,  211,  211,
  211,  211,  211,   20,   92,   93,  132,  132,  162,  163,
  164,  132,  162,  163,  164,  132,  132,  132,  132,  132,
  214,   21,  102,  215,  132,   45,  132,  132,  132,  436,
   58,  115,  116,   57,  223,   59,   20,  152,  153,   58,
  156,  119,   57,  120,   59,    1,    2,  224,  133,  132,
  134,  421,  252,   49,   21,  102,  253,  121,   22,   20,
   46,  161,  261,  162,  163,  164,   95,   95,   95,  258,
  153,  178,  180,  263,  381,   10,  264,   21,  102,   11,
   89,   90,   47,  382,   12,   13,   14,   15,  212,   20,
  256,  257,   16,   14,   17,   18,   19,  235,  236,   16,
   51,   52,   53,   54,  119,  267,  120,  217,   51,   52,
   53,   54,   20,  283,  162,  163,  164,  233,  234,  146,
  144,   90,   90,   56,   51,   52,   53,   54,  104,  274,
  217,   56,   48,  281,  413,   20,  162,  163,  164,  282,
  230,   20,  119,  284,  120,  285,  250,   56,  119,  286,
  120,  292,  290,   21,  298,  291,    9,   10,  296,   21,
  314,   11,  104,  301,   20,  309,   12,   13,   14,   15,
   20,  156,  275,  310,   16,  317,   17,   18,   19,  318,
  381,   10,   21,  319,  322,   11,  328,  329,  217,  382,
   12,   13,   14,   15,    9,   10,  330,  315,   16,   11,
   17,   18,   19,   20,   12,   13,   14,   15,  331,   57,
   63,  332,   16,   66,   17,   18,   19,   20,  124,   83,
   84,  273,  343,  251,   11,  119,  104,  120,   63,   12,
  335,  336,   15,  337,  218,   21,  101,  340,  341,   17,
   18,   19,  346,  352,  128,   52,   53,   54,  353,  183,
   20,  354,   83,   84,   52,   53,   54,   11,  129,  130,
  131,  357,   12,  358,   20,   15,   47,   56,   21,  101,
  359,  360,   17,   18,   19,   83,   84,   14,  367,  368,
   11,   58,   21,   16,   57,   12,   59,  293,   15,  119,
  376,  120,  101,  377,  380,   17,   18,   19,  248,   58,
  409,  218,   57,  393,   59,   83,   84,  187,   58,  109,
   11,   57,   20,   59,  394,   12,  408,  395,   15,  397,
  398,  400,  216,  401,  382,   17,   18,   19,   83,   84,
   21,  404,  405,   11,  431,  432,  412,   58,   12,  424,
   57,   15,   59,  434,  438,  216,  442,  435,   17,   18,
   19,   83,   84,  440,  111,  218,   11,  157,   84,  443,
  444,   12,   11,   58,   15,  446,   57,   12,   59,  447,
   15,   17,   18,   19,  158,  448,  449,   17,   18,   19,
   83,   84,  235,  236,  237,   11,   83,   84,  455,  456,
   12,   11,   58,   15,  459,   57,   12,   59,  452,   15,
   17,   18,   19,  216,  460,  453,   17,   18,   19,  127,
  133,  132,  134,  235,  236,  243,  235,  236,  245,   83,
   84,   52,   53,   54,   11,   63,   66,   66,   66,   12,
  130,  126,   15,   83,   84,   28,  272,   64,   11,   17,
   18,   19,   99,   12,   94,  420,   15,  255,   85,  191,
    0,    0,    0,   17,   18,   19,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,   83,   84,    0,    0,
    0,   11,    0,    0,    0,    0,   12,    0,    0,   15,
   83,   84,    0,    0,    0,   11,   17,   18,   19,    0,
   12,    0,    0,   15,    0,   51,   52,   53,   54,    0,
   17,   18,   19,    0,    0,    0,   58,    0,   55,   57,
    0,   59,    0,   51,   52,   53,   54,    0,   56,    0,
    0,    0,   51,   52,   53,   54,    0,    0,   83,   84,
    0,    0,   58,   11,    0,   57,   56,   59,   12,    0,
  439,   15,  119,    0,  120,   56,    0,    0,   17,   18,
    0,   51,   52,   53,   54,    0,    0,    0,    0,  133,
  132,  134,    0,    0,   58,   58,   58,  454,   58,  119,
   58,  120,    0,    0,   56,    0,    0,   51,   52,   53,
   54,   58,   58,   58,   58,   58,  133,  132,  134,    0,
    0,    0,    0,  172,  172,  172,    0,  172,    0,  172,
   56,  164,  164,    0,    0,    0,  128,   52,   53,   54,
  172,  172,  172,  172,  172,    0,    0,  279,    0,    0,
  129,  130,  131,    0,  174,  174,  174,    0,  174,   56,
  174,  162,  162,    0,    0,   43,    0,   43,    0,   43,
    0,  174,  174,  174,  174,  174,   58,    0,   58,    0,
    0,    0,   43,   43,   43,   43,   43,  302,  303,  305,
  306,  167,    0,  167,    0,  167,  164,    0,  164,    0,
    0,    0,   44,    0,   44,  172,   44,  172,  167,  167,
  167,  167,  167,   45,    0,   45,    0,   45,    0,   44,
   44,   44,   44,   44,    0,    0,  162,  334,  162,    0,
   45,   45,   45,   45,   45,    0,  174,  342,  174,    0,
    0,    0,    0,    0,    0,    0,    0,   43,    0,   43,
  177,   52,   53,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  369,  370,  372,  373,
    0,    0,    0,  167,    0,  167,  179,   52,   53,   54,
    0,    0,    0,    0,   44,    0,   44,    0,    0,    0,
    0,    0,    0,    0,  403,   45,    0,   45,    0,  129,
  130,  131,    0,    0,    0,  417,    0,    0,    0,   58,
   58,    0,    0,    0,    0,   58,    0,    0,    0,    0,
    0,    0,   58,   58,   58,   58,  129,  130,  131,  164,
  164,    0,    0,    0,    0,  164,    0,    0,  172,  172,
    0,    0,  164,    0,  172,    0,    0,    0,    0,    0,
    0,  172,  172,  172,  172,    0,    0,    0,    0,  162,
  162,    0,    0,    0,    0,  162,    0,    0,    0,  174,
  174,    0,  162,    0,    0,  174,    0,    0,    0,    0,
   43,   43,  174,  174,  174,  174,   43,    0,    0,    0,
    0,    0,    0,   43,   43,   43,   43,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  167,  167,    0,    0,
    0,    0,  167,    0,    0,    0,    0,   44,   44,  167,
  167,  167,  167,   44,    0,    0,    0,    0,   45,   45,
   44,   44,   44,   44,   45,  349,    0,    0,    0,    0,
    0,   45,   45,   45,   45,    0,    0,    0,  349,  349,
  349,    0,  349,  349,    0,    0,  361,  362,  363,    0,
  365,  366,    0,    0,    0,  375,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  349,    0,    0,    0,  349,    0,    0,    0,  396,
    0,  407,    0,  399,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  349,  349,  349,
    0,  349,  349,    0,    0,  425,  426,  427,    0,  429,
  430,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  349,    0,    0,    0,    0,
    0,    0,    0,  445,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
   10,    3,    9,   71,   68,   15,    0,   58,   40,    0,
   41,   42,    0,    0,   45,   40,   47,   44,   40,   44,
   42,   23,   24,   45,   41,   47,   40,  123,   58,    0,
   58,   58,   59,   59,   58,  123,   58,   40,   43,   42,
   45,   41,   45,  125,   47,   55,   40,   58,   43,   41,
   45,   43,  125,   45,   59,    0,  125,  221,  125,   69,
  124,   59,  125,  125,   58,   59,   82,  135,  125,   40,
   44,  123,  125,  125,   84,   41,  123,  184,  185,  186,
  145,  260,  125,  123,   40,   59,  165,   58,  167,  216,
  217,   41,   41,   59,   41,   40,  356,  357,  358,  359,
   41,  198,  104,  113,  114,   59,   41,  204,   58,  256,
   59,  275,   59,   58,  277,   41,   44,   58,  128,    0,
  123,  268,   59,  125,   59,  123,  136,  274,   41,  139,
  146,  125,  123,   59,  125,  257,  143,  125,  125,   43,
   59,   45,  269,  208,   41,  272,  273,   44,   41,  228,
   59,   41,   44,  125,  125,  277,   60,   61,   62,   40,
  268,   58,  259,  423,   42,   58,  274,   59,   58,   47,
  256,  257,  268,  125,    0,  263,  257,   58,  274,  189,
  125,   43,  289,   40,  311,   42,   59,   41,   45,   40,
   47,  198,  199,  275,   40,   44,   42,  204,  256,   45,
    0,   47,  275,   41,  256,   58,  275,  123,  275,  262,
  263,  264,  275,  275,   40,  262,  218,  268,  275,  283,
  284,  264,  262,  274,  256,  256,  257,  258,  259,  257,
   41,  256,   58,  257,  256,  257,  258,  259,  264,  256,
   40,   40,  277,  268,  125,   44,  260,  277,  279,  274,
  277,  256,  259,  256,  257,  258,  259,  279,   58,  262,
  260,  256,  256,  257,  256,  256,  277,  261,  262,  263,
  264,  265,  266,  267,  268,  269,  279,  265,  265,  273,
  274,  275,  276,  277,  278,  256,  257,  294,  295,  296,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  125,
   44,  257,  273,  274,  275,  276,  277,  278,   40,  256,
  264,  256,  257,  269,  378,  379,  261,  324,   44,   44,
  265,  266,  267,  268,  269,  125,   58,  123,  256,  274,
  256,  276,  277,  278,   40,   59,   42,  347,  257,   45,
  268,   47,   40,  256,   42,  409,  274,   45,  257,   47,
  418,   44,   58,  355,  356,  357,  358,  359,   40,  256,
   42,   59,  123,   45,  125,   47,  270,  271,  272,  437,
  125,  268,  382,   44,  381,  256,  257,  274,  125,  125,
  261,  262,  263,  264,  265,  266,  267,  268,  269,  125,
   40,  123,  273,  274,  275,  276,  277,  278,  123,  256,
  257,  258,  259,  257,  257,  415,   40,  256,   58,   40,
  256,  257,  258,  259,   40,  269,  269,  125,  275,  268,
  125,  423,  279,   59,   59,  274,  256,  257,   40,  275,
  256,  257,   58,  279,   59,  261,  262,  263,  264,  265,
  266,  267,  268,  269,   58,   59,   58,  273,  274,  275,
  276,  277,  278,   40,  256,  257,  256,  257,  257,  258,
  259,  261,  257,  258,  259,  265,  266,  267,  268,  269,
  125,   58,   59,   59,  274,  125,  276,  277,  278,   41,
   42,  258,  259,   45,   59,   47,   40,  256,  257,   42,
  125,   43,   45,   45,   47,  256,  257,  275,   60,   61,
   62,  256,   59,   44,   58,   59,  257,   59,    1,   40,
    3,  109,  256,  257,  258,  259,  262,  263,  264,   41,
  256,  119,  120,   41,  256,  257,  275,   58,   59,  261,
   23,   24,  257,  265,  266,  267,  268,  269,  125,   40,
  256,  257,  274,  268,  276,  277,  278,  262,  263,  274,
  256,  257,  258,  259,   43,  275,   45,   58,  256,  257,
  258,  259,   40,  123,  257,  258,  259,  181,  182,  123,
   59,  262,  263,  279,  256,  257,  258,  259,   48,  125,
   58,  279,  123,   41,  125,   40,  257,  258,  259,   41,
   41,   40,   43,  123,   45,   59,   41,  279,   43,   59,
   45,   41,   59,   58,   41,   59,  256,  257,   58,   58,
  275,  261,   82,   59,   40,   59,  266,  267,  268,  269,
   40,  256,  123,   59,  274,  125,  276,  277,  278,   58,
  256,  257,   58,   44,   59,  261,   44,   59,   58,  265,
  266,  267,  268,  269,  256,  257,   59,  125,  274,  261,
  276,  277,  278,   40,  266,  267,  268,  269,   58,   45,
   41,   58,  274,   44,  276,  277,  278,   40,  123,  256,
  257,   58,  275,   41,  261,   43,  146,   45,   59,  266,
   58,   58,  269,   59,  154,   58,  273,   59,   59,  276,
  277,  278,  275,  256,  256,  257,  258,  259,  125,  125,
   40,  125,  256,  257,  257,  258,  259,  261,  270,  271,
  272,  123,  266,  123,   40,  269,  257,  279,   58,  273,
  123,  256,  276,  277,  278,  256,  257,  268,   59,   58,
  261,   42,   58,  274,   45,  266,   47,   41,  269,   43,
   59,   45,  273,   59,  264,  276,  277,  278,   41,   42,
  123,  221,   45,   59,   47,  256,  257,   41,   42,   43,
  261,   45,   40,   47,   59,  266,   41,   59,  269,   59,
   59,   58,  273,   58,  265,  276,  277,  278,  256,  257,
   58,   58,   58,  261,   41,  125,   59,   42,  266,   59,
   45,  269,   47,  125,   59,  273,   59,  125,  276,  277,
  278,  256,  257,  125,   59,  275,  261,  256,  257,   59,
   59,  266,  261,   42,  269,   59,   45,  266,   47,   59,
  269,  276,  277,  278,  273,   59,  264,  276,  277,  278,
  256,  257,  262,  263,  264,  261,  256,  257,   59,   59,
  266,  261,   42,  269,   59,   45,  266,   47,  264,  269,
  276,  277,  278,  273,   59,  264,  276,  277,  278,    0,
   60,   61,   62,  262,  263,  264,  262,  263,  264,  256,
  257,  257,  258,  259,  261,  256,  257,  258,  259,  266,
    0,    0,  269,  256,  257,   41,  273,   41,  261,  276,
  277,  278,   44,  266,   26,  383,  269,  199,   19,  138,
   -1,   -1,   -1,  276,  277,  278,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,  261,   -1,   -1,   -1,   -1,  266,   -1,   -1,  269,
  256,  257,   -1,   -1,   -1,  261,  276,  277,  278,   -1,
  266,   -1,   -1,  269,   -1,  256,  257,  258,  259,   -1,
  276,  277,  278,   -1,   -1,   -1,   42,   -1,  269,   45,
   -1,   47,   -1,  256,  257,  258,  259,   -1,  279,   -1,
   -1,   -1,  256,  257,  258,  259,   -1,   -1,  256,  257,
   -1,   -1,   42,  261,   -1,   45,  279,   47,  266,   -1,
   41,  269,   43,   -1,   45,  279,   -1,   -1,  276,  277,
   -1,  256,  257,  258,  259,   -1,   -1,   -1,   -1,   60,
   61,   62,   -1,   -1,   41,   42,   43,   41,   45,   43,
   47,   45,   -1,   -1,  279,   -1,   -1,  256,  257,  258,
  259,   58,   59,   60,   61,   62,   60,   61,   62,   -1,
   -1,   -1,   -1,   41,   42,   43,   -1,   45,   -1,   47,
  279,   58,   59,   -1,   -1,   -1,  256,  257,  258,  259,
   58,   59,   60,   61,   62,   -1,   -1,  224,   -1,   -1,
  270,  271,  272,   -1,   41,   42,   43,   -1,   45,  279,
   47,   58,   59,   -1,   -1,   41,   -1,   43,   -1,   45,
   -1,   58,   59,   60,   61,   62,  123,   -1,  125,   -1,
   -1,   -1,   58,   59,   60,   61,   62,  264,  265,  266,
  267,   41,   -1,   43,   -1,   45,  123,   -1,  125,   -1,
   -1,   -1,   41,   -1,   43,  123,   45,  125,   58,   59,
   60,   61,   62,   41,   -1,   43,   -1,   45,   -1,   58,
   59,   60,   61,   62,   -1,   -1,  123,  304,  125,   -1,
   58,   59,   60,   61,   62,   -1,  123,  314,  125,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,
  256,  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  343,  344,  345,  346,
   -1,   -1,   -1,  123,   -1,  125,  256,  257,  258,  259,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  371,  123,   -1,  125,   -1,  270,
  271,  272,   -1,   -1,   -1,  382,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  269,  270,  271,  272,  270,  271,  272,  256,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,  256,  257,
   -1,   -1,  269,   -1,  262,   -1,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,   -1,  256,
  257,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,  256,
  257,   -1,  269,   -1,   -1,  262,   -1,   -1,   -1,   -1,
  256,  257,  269,  270,  271,  272,  262,   -1,   -1,   -1,
   -1,   -1,   -1,  269,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,
   -1,   -1,  262,   -1,   -1,   -1,   -1,  256,  257,  269,
  270,  271,  272,  262,   -1,   -1,   -1,   -1,  256,  257,
  269,  270,  271,  272,  262,  318,   -1,   -1,   -1,   -1,
   -1,  269,  270,  271,  272,   -1,   -1,   -1,  331,  332,
  333,   -1,  335,  336,   -1,   -1,  331,  332,  333,   -1,
  335,  336,   -1,   -1,   -1,  348,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  364,   -1,   -1,   -1,  368,   -1,   -1,   -1,  364,
   -1,  374,   -1,  368,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,  400,  401,  402,
   -1,  404,  405,   -1,   -1,  400,  401,  402,   -1,  404,
  405,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  428,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  428,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$4 :",
"factor : '-' CTE_INT $$4",
"$$5 :",
"factor : '-' CTE_DBL $$5",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$6 :",
"seleccion : IF condicion $$6 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$7 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$7 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"$$8 :",
"invocacion_discard : DISCARD ID $$8 parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$9 :",
"expresion_dountil : DO $$9 cuerpo_dountil",
"$$10 :",
"expresion_dountil : etiqueta ':' DO $$10 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$11 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$11 asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$12 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$12 asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : ':' '(' asignacion ')' ';'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_asignacion_do_until : asignacion ';'",
"error_asignacion_do_until : ':' asignacion ')'",
"error_asignacion_do_until : ':' '(' ')'",
"error_asignacion_do_until : ':' '(' asignacion",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 515 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La funcion " + nombreLexema + " ya fue declarada en ese ambito.");
	}
}
					
					

	
	
					
					
					
//#line 987 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 13:
//#line 39 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													for(String lexema : lista_de_variables) /* por cada variable declarada*/
														incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
													lista_de_variables.clear();}
break;
case 15:
//#line 49 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 50 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 53 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 56 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 63 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;}
break;
case 23:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "nombre de funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 89 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);}
break;
case 33:
//#line 99 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));}
break;
case 34:
//#line 100 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
								Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 36:
//#line 105 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 41:
//#line 115 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 43:
//#line 119 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 44:
//#line 120 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 122 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 48:
//#line 128 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 49:
//#line 130 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 52:
//#line 136 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 53:
//#line 138 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 54:
//#line 140 "gramatica.y"
{verificarRango();}
break;
case 55:
//#line 140 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 56:
//#line 142 "gramatica.y"
{verificarRango();}
break;
case 57:
//#line 142 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 58:
//#line 144 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									Main.polaca.addElementPolaca("=:");
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");}
break;
case 60:
//#line 154 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(id);
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.erroresSintacticos.add("[Parser, " + this.analizadorLexico.linea + "] Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion.");
															}
															this.cantidad_parametros_reales = 0;}
break;
case 67:
//#line 178 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");}
break;
case 68:
//#line 184 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 69:
//#line 185 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 70:
//#line 188 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 71:
//#line 189 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 72:
//#line 190 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 73:
//#line 191 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 74:
//#line 192 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 75:
//#line 193 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 83:
//#line 207 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 84:
//#line 210 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(id);
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");}
break;
case 86:
//#line 219 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 89:
//#line 226 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 90:
//#line 228 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 93:
//#line 236 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 96:
//#line 245 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 98:
//#line 250 "gramatica.y"
{String id = val_peek(1).sval;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");}
break;
case 101:
//#line 257 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 103:
//#line 261 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 105:
//#line 262 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 108:
//#line 266 "gramatica.y"
{String id = val_peek(0).sval;
							if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
								Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : La variable " + id + " no fue declarada en ese ambito.");}
break;
case 109:
//#line 271 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 110:
//#line 274 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("BF");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 112:
//#line 283 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 113:
//#line 286 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
														if (Main.polaca.existeBreak()){ /*Hay un Break*/
															Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
														Main.polaca.addElementPolaca(Main.polaca.desapilar());
														Main.polaca.addElementPolaca("BF");
														Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 115:
//#line 296 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 117:
//#line 306 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 119:
//#line 311 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 121:
//#line 319 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 122:
//#line 323 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 124:
//#line 332 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 125:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 126:
//#line 336 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 127:
//#line 337 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 128:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 129:
//#line 339 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 130:
//#line 340 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 131:
//#line 341 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 132:
//#line 345 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 133:
//#line 346 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 134:
//#line 347 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 135:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 136:
//#line 352 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 137:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 138:
//#line 357 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 139:
//#line 358 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 140:
//#line 361 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 141:
//#line 362 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 142:
//#line 363 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 143:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 144:
//#line 365 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 145:
//#line 368 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 146:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 147:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 148:
//#line 371 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 149:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 150:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 151:
//#line 378 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta la llave de cierre");}
break;
case 152:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 153:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 154:
//#line 384 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 155:
//#line 388 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 156:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 157:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 158:
//#line 394 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 159:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 160:
//#line 396 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 161:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 162:
//#line 398 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 163:
//#line 399 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 164:
//#line 400 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 165:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 166:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 167:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 168:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 169:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 170:
//#line 408 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 171:
//#line 411 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 172:
//#line 412 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 173:
//#line 413 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 174:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 175:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 176:
//#line 420 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 177:
//#line 421 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 178:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 179:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 180:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 181:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 182:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 183:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 184:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 185:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el cuerpo de la seleccion");}
break;
case 186:
//#line 436 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 187:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 188:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 189:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 190:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 191:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 192:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 193:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 194:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 195:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 196:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 197:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 198:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 199:
//#line 451 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 200:
//#line 452 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 201:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 202:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 203:
//#line 457 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 204:
//#line 458 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 205:
//#line 459 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 206:
//#line 460 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la cadena en el mensaje por pantalla");}
break;
case 207:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 208:
//#line 466 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 209:
//#line 467 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la lista de parametros reales de la funcion discard");}
break;
case 210:
//#line 468 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 211:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 212:
//#line 472 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 213:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 214:
//#line 474 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 215:
//#line 478 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 216:
//#line 479 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 217:
//#line 480 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 218:
//#line 481 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 219:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 220:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 221:
//#line 486 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 222:
//#line 487 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 223:
//#line 488 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 224:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 225:
//#line 492 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 226:
//#line 493 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 227:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Error en la asignacion del do_until");}
break;
case 228:
//#line 495 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 229:
//#line 498 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 230:
//#line 499 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 231:
//#line 500 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 232:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 233:
//#line 504 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 234:
//#line 505 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 235:
//#line 506 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 236:
//#line 507 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 237:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 238:
//#line 509 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 239:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 240:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1935 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
