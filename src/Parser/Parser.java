//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
import java.util.ArrayList;
//#line 21 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    2,    0,    0,    1,    1,    4,    4,    4,    4,    8,
    8,    6,    6,    6,   10,   10,   11,   11,   11,   15,
    9,    9,   19,   14,   14,   17,   17,   17,   17,   21,
   22,   22,   18,   18,   18,   25,   25,   27,   27,   27,
   29,   29,   30,   30,   30,   30,   34,   34,   34,   34,
   36,   36,   36,   36,   36,   36,   36,   36,   38,   38,
   40,   40,   40,   40,   42,   43,   43,   43,   43,   43,
   32,   32,   32,   32,   32,   32,    7,    7,   45,   45,
   45,   45,   45,   52,   46,   48,   48,   55,   49,   49,
   54,   59,   54,   54,   58,   58,   57,   50,   50,   47,
   47,   63,   63,   67,   51,   70,   51,   51,   68,   74,
   66,   66,   77,   69,   69,   73,   73,   79,   79,   72,
   72,   72,   72,   76,   76,   76,    3,    3,    5,    5,
    5,    5,    5,    5,   12,   12,   12,   12,   12,   13,
   13,   16,   16,   20,   20,   20,   20,   20,   23,   23,
   23,   23,   24,   24,   26,   26,   28,   28,   31,   31,
   31,   31,   33,   33,   33,   33,   33,   33,   33,   35,
   35,   35,   37,   37,   37,   37,   39,   39,   39,   41,
   44,   44,   44,   44,   53,   53,   53,   53,   53,   56,
   56,   60,   60,   60,   60,   60,   60,   60,   60,   60,
   60,   60,   60,   61,   61,   61,   61,   61,   61,   62,
   62,   62,   62,   62,   62,   62,   64,   64,   65,   65,
   65,   65,   71,   71,   71,   75,   75,   75,   75,   75,
   78,   78,   78,   78,   78,   80,   80,   80,   80,   81,
   81,   81,   82,   82,   82,   82,   83,   83,   83,   83,
   83,   83,   83,   83,   83,
};
final static short yylen[] = {                            2,
    0,    3,    1,    3,    1,    2,    2,    1,    1,    2,
    1,    2,    3,    1,    1,    1,    1,    3,    1,    0,
    4,    1,    0,    8,    1,    3,    1,    0,    1,    1,
    2,    1,    3,    2,    1,    3,    1,    1,    3,    1,
    5,    1,    1,    3,    3,    1,    3,    3,    1,    1,
    1,    1,    2,    2,    1,    1,    4,    1,    4,    1,
    3,    1,    0,    1,    1,    1,    1,    1,    2,    2,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    0,    3,    4,    1,    0,    4,    1,
    6,    0,    6,    1,    6,    1,    1,    5,    1,    3,
    1,    4,    1,    0,    3,    0,    5,    1,    1,    0,
    7,    1,    0,    7,    1,    5,    1,    3,    1,    3,
    1,    2,    1,    5,    4,    1,    1,    1,    3,    1,
    1,    2,    2,    2,    2,    2,    3,    1,    2,    3,
    3,    2,    2,    6,    6,    6,    6,    6,    5,    2,
    2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
    2,    1,    4,    4,    5,    4,    4,    3,    3,    3,
    3,    3,    2,    3,    2,    3,    4,    4,    3,    4,
    5,    2,    2,    2,    3,    3,    3,    4,    2,    2,
    3,    4,    4,    4,    4,    5,    5,    5,    5,    5,
    5,    3,    4,    9,    9,    9,    9,    9,    9,    4,
    4,    4,    4,    4,    1,    2,    1,    2,    3,    4,
    3,    3,    9,   10,    2,    7,    7,    7,    7,    7,
    7,    7,    7,    7,    7,    2,    3,    3,    4,    2,
    2,    3,    1,    3,    2,    1,    4,    4,    4,    4,
    3,    3,    3,    3,    1,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  131,    0,  128,    3,    5,    0,    0,
    0,    0,    0,    0,   15,    0,   16,    0,  104,   84,
    0,    0,    0,    0,    0,    0,    0,    0,   14,   19,
   22,  217,   60,   77,   78,   79,   80,   81,   82,   83,
   87,   90,   99,  101,    0,  108,    0,  132,    0,  142,
    0,    0,    0,    0,    0,   51,   52,    0,    0,    0,
    0,    0,    0,    0,    0,   46,   49,   50,   56,   58,
  216,    0,    0,    0,    0,    0,    0,   42,  190,   94,
    0,    0,  143,   20,    0,  218,    0,    0,    0,    0,
  225,  129,    6,    7,   12,    0,   17,  139,    0,  136,
    0,    0,    0,    2,    4,    0,    0,    0,  243,   11,
    0,    0,  123,  140,  137,    0,  187,    0,    0,    0,
   53,   54,  173,  175,   66,   67,   68,    0,    0,    0,
    0,    0,   64,    0,    0,  186,    0,    0,    0,    0,
    0,    0,    0,   72,   71,   76,   73,   74,   75,    0,
    0,  191,    0,    0,    0,    0,    0,    0,  185,    0,
    0,  100,  103,    0,  105,    0,  112,   85,    0,   13,
  141,   18,    0,  106,  122,    0,    0,   10,    0,    0,
  188,   86,    0,  179,    0,   69,   70,  182,  180,   59,
    0,  184,  170,    0,  171,    0,  174,   47,  176,   48,
    0,    0,    0,    0,    0,    0,  202,   96,    0,  168,
    0,    0,    0,   89,    0,  211,  212,    0,  214,    0,
    0,    0,    0,   21,    0,   25,    0,    0,   29,   32,
    0,    0,    0,    0,    0,    0,  210,    0,    0,    0,
    0,  126,    0,  244,  120,    0,  177,  178,   57,    0,
    0,  194,    0,    0,  195,    0,    0,  203,    0,  193,
    0,  192,    0,  166,    0,  164,  163,   98,  153,  150,
    0,  154,   31,    0,    0,  152,    0,  221,    0,  219,
    0,    0,    0,    0,  109,    0,    0,    0,    0,    0,
    0,    0,  107,    0,  115,    0,    0,  198,  199,    0,
  200,    0,    0,    0,  197,  196,  165,   41,    0,    0,
    0,    0,  220,  102,    0,    0,    0,    0,    0,  253,
    0,  252,  251,    0,    0,    0,    0,    0,    0,    0,
    0,  181,   91,   93,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  110,    0,    0,  125,  249,    0,
  248,  247,    0,    0,    0,    0,    0,    0,    0,    0,
  119,    0,    0,    0,    0,    0,    0,    0,    0,  149,
    0,    0,    0,  117,    0,    0,    0,    0,    0,  124,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  223,
    0,    0,    0,   95,    0,    0,    0,  147,    0,   35,
   37,   23,  148,  146,  145,  144,    0,    0,  227,  236,
  228,  230,  111,  229,  226,    0,    0,    0,    0,  113,
    0,    0,    0,    0,    0,    0,    0,    0,  156,  158,
    0,    0,   38,    0,   40,    0,  155,   34,    0,  238,
    0,  237,  224,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  161,    0,   36,  159,   33,   24,
  239,    0,  232,  233,  235,  114,  234,  231,  206,  207,
  209,  208,  205,  204,   39,  116,
};
final static short yydgoto[] = {                          5,
    6,   47,    7,  397,    8,   24,  110,  140,   26,   27,
   28,   29,   30,  224,  158,   31,  225,  398,  439,  226,
  227,  228,  229,  230,  399,  400,  432,  401,   76,   77,
  435,  151,   78,   65,   66,   67,   68,   69,   70,  130,
   33,  131,  132,  133,   34,   35,   36,   37,   38,   39,
   40,   89,   41,   79,  153,   42,  141,  207,  302,   80,
  208,   43,  162,   44,  163,  165,   88,   45,  293,  243,
   46,  112,  372,  377,  167,  241,  447,  295,  373,  374,
  361,  113,  242,
};
final static short yysindex[] = {                       488,
  549,    0,  408,    0,    0,    0,    0,    0,  127,  392,
   18,  341,  -23,  196,    0,  946,    0,  278,    0,    0,
 -167, -175,   29,  549,  549,   66,  241,   53,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  -14,    0,  396,    0,   43,    0,
  622,  -79,  131,  173,  264,    0,    0,  903,   52,  305,
  249,  249,  139,  545,   62,    0,    0,    0,    0,    0,
    0,  173,  723,  869,  899,   78, 1088,    0,    0,    0,
  309,   -6,    0,    0,  585,    0,    2,  584,  907,  399,
    0,    0,    0,    0,    0,  367,    0,    0,   97,    0,
  282,  326,  188,    0,    0,  358,  392,  427,    0,    0,
  746,  426,    0,    0,    0,  -26,    0,   81,  946,  860,
    0,    0,    0,    0,    0,    0,    0,  343,  314,  -10,
  401,    0,    0,  971,  988,    0,  121,  244,  771,  869,
  -66,  430,  -32,    0,    0,    0,    0,    0,    0, 1088,
  946,    0,  -89,  946,  440,   73,  445,  168,    0,  135,
  552,    0,    0,  598,    0,  466,    0,    0,  553,    0,
    0,    0,  794,    0,    0,    5,  560,    0,  333,   62,
    0,    0,  676,    0,   10,    0,    0,    0,    0,    0,
  314,    0,    0,   62,    0,   62,    0,    0,    0,    0,
  306,  511,  498,  506,  578,  370,    0,    0,  550,    0,
   51,  895,  806,    0,  844,    0,    0,  595,    0,  398,
  -99,  379,  320,    0,  625,    0,  515,    0,    0,    0,
  626,  102,  611,  397, -111,  403,    0,  -22, -187,  808,
  548,    0,  657,    0,    0,  475,    0,    0,    0,  635,
  624,    0,  628,  -41,    0,  869,  869,    0,  639,    0,
  650,    0,  647,    0,  865,    0,    0,    0,    0,    0,
   59,    0,    0,  652,  -99,    0,  654,    0,  655,    0,
  475,  475,  433,  475,    0,  151,  661,  666,  142, -187,
  460,  697,    0,  613,    0,  683,  487,    0,    0,  692,
    0,  377,  631,  637,    0,    0,    0,    0,  -25,  292,
  292,  720,    0,    0,  707,  709,  437,  714,  724,    0,
  725,    0,    0,  374,  726,  728,  475,  513,  -80,  518,
  -92,    0,    0,    0,  -82,  531,  -86,  673,  680,  684,
  563,   94,   94,   94,    0,   94,   94,    0,    0,  749,
    0,    0,  762,  475,  475,  443,  475,  940,  946,  765,
    0,  832,  869,  769,  492,  318,  492,  492,  492,    0,
  -28,  777,  778,    0,  780,  783,   94,  784,  797,    0,
   94,  763,  775,  447,  805,  807,  996,  160,  160,    0,
  846,  743,  744,    0,  -17,  471,  605,    0,  -71,    0,
    0,    0,    0,    0,    0,    0,  -21,  836,    0,    0,
    0,    0,    0,    0,    0,  814,   94,   94,   94,    0,
   94,   94,  173,  160,  616,  -65,  617,  620,    0,    0,
  520,  833,    0,   60,    0,  768,    0,    0,  492,    0,
   72,    0,    0,  835,  838,  852,   94,  853,  856,  857,
  861,   24,  862,  863,    0, 1035,    0,    0,    0,    0,
    0,  866,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,    6,  919,    0,    0,    0,    0,    0,    0,  -19,
    8,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  924,   22,   30,  280,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  928,    0,
    0,    0,    0,   49, 1173,    0,    0,    0,    0,    0,
    0,    0,   77,    0, 1198,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  -61,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  888,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  349,    0,
    0,    0,    0,    0,    0,    0,   13,  -73,    0,    0,
  -69,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   40,    0,    0,    0,    0,    0,    0,    0,  538,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  891,    0,  117,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  -60,    0,    0, 1220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  148,    0,    0, 1231,    0, 1242,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1062,    0,    0,   79,    0,    0,
    0,  344,    0,    0,    0,    0,    0,  468,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -58,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  150,
    0,    0,    0,  383,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0, 1148,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  435,    0,    0,    0,  153,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  194,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  486,    0,    0,    0,    0,    0,    0,    0,    0,
  -57,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  -30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  179,  455,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  483,  484,    0,    0,    0,    0,    0,    0,
    0,  -64,    0,  366,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  385,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  892,    0,    0,  528,    0,    0,    4,  -13,    0,   -8,
  876,    0,    0,    0,    0,    0,  716,  774,    0,    0,
    0, -164,    0,    0,  546,    0,    0,    0, 1065,   16,
    0,  -74,    0,   14,    0,   84,    0,   -1,    0,  -44,
    0,    0,  -49,    0,  867,    0,    0,    0,    0,    0,
    0,    0,    0,  796,    0,    0,  -70,  629,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  508,    0,    0,
    0,   -2,  994,    0,    0, -165,    0,    0, -273,    0,
    0,    0,    0,
};
final static int YYTABLESIZE=1514;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         32,
   53,   32,  154,  142,   25,  127,   25,  215,  210,   61,
  116,  407,   60,  283,   62,   61,   82,  301,   60,  440,
   62,    8,   32,   32,   17,   64,   52,   25,   25,    9,
  190,   85,  337,   74,  157,  286,  365,  111,  109,   17,
  363,  160,  161,  103,  356,  129,  128,  215,  189,   32,
  249,  246,  134,  438,  135,  121,  270,  360,  206,  452,
  157,   88,  276,  244,  245,  215,  255,  254,  202,  285,
  109,   32,   32,  118,  111,  212,   71,  294,  213,  188,
   62,  192,  472,   65,   65,  166,   32,   32,  189,   91,
  150,  120,   90,  134,  250,  135,  101,  408,   62,  309,
  458,   91,  134,  137,  135,   51,  189,  429,  138,   32,
  312,  100,  462,  218,  178,  232,  310,   63,  213,  148,
  147,  149,   64,  134,   95,  135,  329,   51,    1,  180,
    1,  217,  215,  441,  183,  185,  213,   32,   32,  182,
  101,  250,  279,  178,  123,  124,    8,  194,  196,  223,
  111,  371,  222,   92,    9,  170,  220,   63,  211,  240,
  278,  235,   32,  282,  358,   60,  213,  105,   15,  215,
   52,   32,   73,  189,   17,   63,  359,  114,  129,  128,
  362,   15,  129,  128,  437,  303,  304,   17,  183,  115,
   61,  157,  222,  201,  355,  203,  204,  205,  451,  324,
   88,  246,  134,  213,  135,  121,  183,  222,   61,  320,
  222,  221,  223,  223,  245,  116,  255,  254,  223,  241,
  198,  200,  300,   72,   55,   56,   57,  265,  358,  240,
   55,   56,   57,  201,  285,  358,   81,  241,   32,   50,
  359,   32,   15,  178,  250,  189,   59,  359,   17,   51,
   15,  201,   59,  156,   32,   32,   17,  109,  125,  126,
  127,    1,  102,  215,  215,  248,  223,  215,  215,  215,
  215,  215,  215,  215,  215,  215,  215,  222,  240,  138,
  215,  215,  215,  215,  215,  215,    8,  471,   60,  109,
   32,  392,  393,   60,    9,   62,   65,   65,   65,   98,
  338,  339,  340,   63,  189,  189,  263,  119,  189,  189,
  189,  189,  189,  189,  189,  189,  189,  189,  201,  138,
  426,  189,  189,  189,  189,  189,  189,  461,  366,  144,
  145,  146,   63,  152,  213,  213,  181,  138,  213,  213,
  213,  213,  213,  213,  213,  213,  213,  213,  135,  155,
  358,  213,  213,  213,  213,  213,  213,   21,  128,  154,
   32,   32,  359,   32,   32,   32,   32,   32,   25,   25,
   25,   25,   25,  388,  389,   22,  197,   55,   56,   57,
   75,  212,   61,   50,   28,   60,   53,   62,  135,   32,
  231,  125,  126,  127,   15,  125,  126,  127,  285,   59,
   17,   28,  424,  183,  138,   61,  135,  285,  222,  222,
   52,  434,  222,  222,  222,  222,  222,  222,  222,  222,
  222,  222,  221,  220,  162,  222,  222,  222,  222,  222,
  222,   63,  349,   61,  241,   15,   60,   32,   62,  169,
  402,   17,   25,  160,  191,  128,  456,   21,  173,  201,
  201,   83,   84,  201,  201,  201,  201,  201,  201,  201,
  201,  201,  201,   74,  174,   22,  201,  201,  201,  201,
  201,  201,   75,  135,   61,  151,   75,   60,   61,   62,
   51,   60,   75,   62,   61,  175,   75,   60,   61,   62,
  162,   60,  151,   62,  344,  240,   96,   97,  216,  199,
   55,   56,   57,  219,  419,   55,   56,   57,   27,  160,
  431,   30,   61,  240,   75,   60,   61,   62,    3,   60,
    4,   62,   59,  242,  118,   27,   26,   59,   23,  430,
   49,   21,   48,   86,   87,  138,  138,  171,  172,  138,
  138,  242,  118,   26,  138,  138,  138,  138,  138,   22,
  179,   93,   94,  138,  209,  138,  138,  138,  275,   15,
  455,   61,  121,  122,   60,   17,   62,  203,  204,  251,
  125,  126,  127,  395,   10,  272,  273,   11,   12,  148,
  147,  149,  396,   13,   14,   15,   16,  134,   21,  135,
  236,   17,  233,   18,   19,   20,   72,   55,   56,   57,
  186,  187,   73,  136,  135,  135,   22,  246,  135,  135,
    3,  237,    4,  135,  135,  135,  135,  135,  245,   59,
  256,  162,  135,   21,  135,  135,  135,  134,  257,  135,
  285,  203,  204,  259,  220,  254,  258,   21,  203,  204,
  160,   22,  109,  159,   92,   92,   15,   54,   55,   56,
   57,    1,   17,  268,  269,   22,  109,  125,  126,  127,
   58,   21,   97,    9,   10,  274,  277,   11,   12,  280,
   59,  281,  291,   13,   14,   15,   16,  284,  297,   22,
  109,   17,  298,   18,   19,   20,  299,  307,   72,   55,
   56,   57,   72,   55,   56,   57,   21,  305,   72,   55,
   56,   57,   72,   55,   56,   57,  164,  317,  306,  311,
  240,   59,  313,  314,  239,   59,  247,  384,  134,  322,
  135,   59,  234,   30,  323,   59,   72,   55,   56,   57,
   72,   55,   56,   57,  327,   30,   21,  330,  242,  118,
  331,   30,  332,    1,    2,  287,  288,  395,   10,   59,
  333,   11,   12,   59,  239,  335,  396,   13,   14,   15,
   16,  336,   21,  341,  342,   17,  343,   18,   19,   20,
  220,  346,  203,  204,  253,  143,   55,   56,   57,  292,
   22,  347,   15,  348,  351,   21,  352,  354,   17,  144,
  145,  146,  357,  321,  364,  367,  325,  326,   59,   97,
   97,   97,  368,   22,    9,   10,  369,  380,   11,   12,
   21,  203,  204,  261,   13,   14,   15,   16,  370,  381,
  417,  328,   17,  390,   18,   19,   20,  394,   22,  252,
  255,  350,  418,   21,  260,  409,  410,  262,  411,  106,
  107,  412,  414,   11,   12,  139,  266,   21,  134,   13,
  135,  239,   16,  106,  107,  415,  108,   11,   12,   18,
   19,   20,  421,   13,  422,  290,   16,  427,  428,  396,
  108,   21,  443,   18,   19,   20,  442,  106,  107,  450,
  453,   11,   12,  454,  267,   21,  134,   13,  135,   22,
   16,  457,  459,  463,  108,  201,  464,   18,   19,   20,
  184,   61,   99,   22,   60,  308,   62,  134,   21,  135,
  465,  467,  106,  107,  468,  469,   11,   12,  130,  470,
  473,  474,   13,  133,  476,   16,   22,  134,   63,  238,
  334,   28,   18,   19,   20,  264,   61,  271,  104,   60,
   61,   62,  436,   60,   61,   62,   21,   60,  214,   62,
    0,    0,  106,  107,  391,  168,   11,   12,  148,  147,
  149,  117,   13,    0,   22,   16,    0,    0,    0,  238,
  425,    0,   18,   19,   20,    0,    0,    0,  106,  107,
    0,   61,   11,   12,   60,    0,   62,   61,   13,    0,
   60,   16,   62,    0,    0,    0,    0,    0,   18,   19,
   20,  176,  107,    0,    0,   11,   12,    0,    0,    0,
    0,   13,   61,    0,   16,   60,    0,   62,  177,    0,
    0,   18,   19,   20,    0,    0,  106,  107,    0,   61,
   11,   12,   60,    0,   62,    0,   13,   61,    0,   16,
   60,    0,   62,    0,    0,    0,   18,   19,   20,  106,
  107,    0,    0,   11,   12,    0,    0,    0,    0,   13,
    0,    0,   16,  106,  107,    0,  238,   11,   12,   18,
   19,   20,    0,   13,    0,  475,   16,  134,    0,  135,
  289,    0,    0,   18,   19,   20,    0,  106,  107,    0,
    0,   11,   12,    0,  148,  147,  149,   13,    0,    0,
   16,  106,  107,    0,    0,   11,   12,   18,   19,   20,
    0,   13,    0,    0,   16,   72,   55,   56,   57,  169,
  169,   18,   19,   20,  106,  107,    0,    0,   11,   12,
  134,    0,  135,    0,   13,    0,    0,   16,   59,  403,
  404,  405,  406,    0,   18,   19,   20,  148,  147,  149,
   72,   55,   56,   57,  143,   55,   56,   57,   72,   55,
   56,   57,  106,  107,    0,    0,   11,   12,  144,  145,
  146,    0,   13,   59,    0,   16,    0,   59,    0,    0,
    0,   59,   18,   19,  169,    0,  169,    0,    0,    0,
    0,    0,    0,    0,    0,   72,   55,   56,   57,    0,
    0,   72,   55,   56,   57,  167,  167,    0,  387,    0,
    0,    0,  460,   55,   55,   55,    0,   55,   59,   55,
    0,    0,    0,    0,   59,    0,  193,   55,   56,   57,
   55,   55,   55,   55,   55,    0,    0,    0,   43,    0,
   43,    0,   43,  195,   55,   56,   57,    0,    0,   59,
    0,  423,   55,   56,   57,   43,   43,   43,   43,   43,
  172,    0,  172,    0,  172,    0,   59,    0,    0,    0,
  167,   44,  167,   44,   59,   44,    0,  172,  172,  172,
  172,  172,   45,    0,   45,    0,   45,    0,   44,   44,
   44,   44,   44,    0,    0,   55,    0,   55,    0,   45,
   45,   45,   45,   45,  144,  145,  146,    0,    0,    0,
  296,    0,    0,    0,    0,    0,    0,  169,  169,    0,
   43,    0,   43,  169,    0,    0,    0,    0,    0,    0,
  169,    0,    0,    0,    0,    0,  375,  376,    0,  378,
  379,    0,  172,    0,  172,  315,  316,  318,  319,    0,
    0,    0,    0,   44,    0,   44,    0,  144,  145,  146,
    0,    0,    0,    0,   45,    0,   45,    0,    0,    0,
  413,    0,    0,    0,  416,    0,    0,    0,    0,    0,
    0,  345,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  353,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  167,  167,    0,    0,    0,    0,  167,
  444,  445,  446,    0,  448,  449,  167,    0,  382,  383,
  385,  386,    0,    0,    0,    0,    0,    0,   55,   55,
    0,    0,    0,    0,   55,    0,    0,    0,    0,    0,
  466,   55,   55,   55,   55,    0,    0,    0,  420,    0,
    0,    0,    0,   43,   43,    0,    0,    0,    0,   43,
  433,    0,    0,    0,    0,    0,   43,   43,   43,   43,
    0,    0,    0,    0,    0,  172,  172,    0,    0,    0,
    0,  172,    0,    0,    0,    0,   44,   44,  172,  172,
  172,  172,   44,    0,    0,    0,    0,   45,   45,   44,
   44,   44,   44,   45,    0,    0,    0,    0,    0,    0,
   45,   45,   45,   45,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                          1,
    9,    3,   77,   74,    1,    0,    3,    0,   41,   42,
   43,   40,   45,  125,   47,   42,   40,   59,   45,   41,
   47,    0,   24,   25,   44,   10,   44,   24,   25,    0,
   41,   16,   58,  123,   41,   58,  123,   51,   58,   59,
  123,   40,   87,   58,  125,   44,   45,   40,    0,   51,
   41,  125,   43,  125,   45,  125,  221,  331,  125,  125,
  125,  123,  227,   59,  125,   58,  125,  125,  139,  257,
   58,   73,   74,   58,   88,  150,   59,  243,    0,  129,
   41,  131,   59,   44,   45,   88,   88,   89,   40,  277,
   75,   40,  260,   43,  125,   45,   44,  371,   59,   41,
   41,  277,   43,   42,   45,  123,   58,  125,   47,  111,
  275,   59,   41,   41,  111,  160,   58,   41,   40,   60,
   61,   62,  107,   43,   59,   45,  292,  123,  123,  116,
  125,   59,  125,  407,  119,  120,   58,  139,  140,   59,
   44,  191,   41,  140,   61,   62,  125,  134,  135,  158,
  164,   58,    0,  125,  125,   59,  256,   41,  143,  173,
   59,  164,  164,  275,  257,   45,  151,  125,  268,  154,
   44,  173,  262,  125,  274,   59,  269,  257,   44,   45,
  263,  268,   44,   45,  256,  256,  257,  274,   41,   59,
   41,  256,   40,    0,  275,  262,  263,  264,  264,   58,
  262,  275,   43,  125,   45,  275,   59,   40,   59,   59,
   58,   44,  221,  222,  275,   43,  275,  275,  227,   41,
  137,  138,  264,  256,  257,  258,  259,  212,  257,  243,
  257,  258,  259,   40,  257,  257,  260,   59,  240,  257,
  269,  243,  268,  240,  275,  256,  279,  269,  274,  123,
  268,   58,  279,  260,  256,  257,  274,  277,  257,  258,
  259,  256,  277,  256,  257,  256,  275,  260,  261,  262,
  263,  264,  265,  266,  267,  268,  269,  125,  292,    0,
  273,  274,  275,  276,  277,  278,  265,  264,   45,  277,
  292,  362,  363,   45,  265,  256,  257,  258,  259,   59,
  309,  310,  311,   40,  256,  257,  256,  256,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,  125,   40,
  391,  273,  274,  275,  276,  277,  278,  256,  337,  270,
  271,  272,  256,  256,  256,  257,  256,   58,  260,  261,
  262,  263,  264,  265,  266,  267,  268,  269,    0,   41,
  257,  273,  274,  275,  276,  277,  278,   40,   45,  434,
  362,  363,  269,  365,  366,  367,  368,  369,  365,  366,
  367,  368,  369,  358,  359,   58,  256,  257,  258,  259,
   40,  456,   42,  257,   41,   45,  395,   47,   40,  391,
  256,  257,  258,  259,  268,  257,  258,  259,  257,  279,
  274,   58,  387,  256,  125,  256,   58,  257,  256,  257,
   44,  396,  260,  261,  262,  263,  264,  265,  266,  267,
  268,  269,   44,  256,   59,  273,  274,  275,  276,  277,
  278,   40,   59,   42,  256,  268,   45,  439,   47,   41,
  123,  274,  439,   59,   44,   45,  431,   40,  123,  256,
  257,  256,  257,  260,  261,  262,  263,  264,  265,  266,
  267,  268,  269,  123,  277,   58,  273,  274,  275,  276,
  277,  278,   40,  125,   42,   41,   40,   45,   42,   47,
  123,   45,   40,   47,   42,   59,   40,   45,   42,   47,
  125,   45,   58,   47,   58,   41,  256,  257,   59,  256,
  257,  258,  259,   59,   58,  257,  258,  259,   41,  125,
   40,   44,   42,   59,   40,   45,   42,   47,  123,   45,
  125,   47,  279,   41,   41,   58,   41,  279,    1,   59,
    3,   40,  125,  256,  257,  256,  257,  256,  257,  260,
  261,   59,   59,   58,  265,  266,  267,  268,  269,   58,
  125,   24,   25,  274,  125,  276,  277,  278,   44,  268,
   41,   42,  258,  259,   45,  274,   47,  262,  263,  264,
  257,  258,  259,  256,  257,  256,  257,  260,  261,   60,
   61,   62,  265,  266,  267,  268,  269,   43,   40,   45,
  125,  274,   41,  276,  277,  278,  256,  257,  258,  259,
  258,  259,  262,   59,  256,  257,   58,  275,  260,  261,
  123,   59,  125,  265,  266,  267,  268,  269,   59,  279,
  123,  256,  274,   40,  276,  277,  278,   43,  123,   45,
  257,  262,  263,  264,  256,  125,   59,   40,  262,  263,
  256,   58,   59,   59,  262,  263,  268,  256,  257,  258,
  259,  256,  274,   59,  257,   58,   59,  257,  258,  259,
  269,   40,  125,  256,  257,   41,   41,  260,  261,   59,
  279,  275,  125,  266,  267,  268,  269,  275,   44,   58,
   59,  274,   59,  276,  277,  278,   59,   41,  256,  257,
  258,  259,  256,  257,  258,  259,   40,   59,  256,  257,
  258,  259,  256,  257,  258,  259,  123,  275,   59,   58,
  256,  279,   59,   59,   58,  279,   41,  275,   43,   59,
   45,  279,  125,  256,   59,  279,  256,  257,  258,  259,
  256,  257,  258,  259,  275,  268,   40,  125,  256,  256,
   58,  274,  256,  256,  257,  238,  239,  256,  257,  279,
   59,  260,  261,  279,   58,  125,  265,  266,  267,  268,
  269,  125,   40,   44,   58,  274,   58,  276,  277,  278,
  256,   58,  262,  263,  264,  256,  257,  258,  259,  123,
   58,   58,  268,   59,   59,   40,   59,  275,  274,  270,
  271,  272,  275,  286,  264,  123,  289,  290,  279,  262,
  263,  264,  123,   58,  256,  257,  123,   59,  260,  261,
   40,  262,  263,  264,  266,  267,  268,  269,  256,   58,
   58,  125,  274,   59,  276,  277,  278,   59,   58,  201,
  202,  324,   58,   40,  206,   59,   59,  209,   59,  256,
  257,   59,   59,  260,  261,  123,   41,   40,   43,  266,
   45,   58,  269,  256,  257,   59,  273,  260,  261,  276,
  277,  278,   58,  266,   58,   58,  269,  125,  125,  265,
  273,   40,   59,  276,  277,  278,   41,  256,  257,  264,
  264,  260,  261,  264,   41,   40,   43,  266,   45,   58,
  269,   59,  125,   59,  273,  125,   59,  276,  277,  278,
   41,   42,   27,   58,   45,   41,   47,   43,   40,   45,
   59,   59,  256,  257,   59,   59,  260,  261,    0,   59,
   59,   59,  266,    0,   59,  269,   58,    0,   41,  273,
  302,   41,  276,  277,  278,   41,   42,  222,   47,   45,
   42,   47,  397,   45,   42,   47,   40,   45,  153,   47,
   -1,   -1,  256,  257,  123,   89,  260,  261,   60,   61,
   62,   59,  266,   -1,   58,  269,   -1,   -1,   -1,  273,
  125,   -1,  276,  277,  278,   -1,   -1,   -1,  256,  257,
   -1,   42,  260,  261,   45,   -1,   47,   42,  266,   -1,
   45,  269,   47,   -1,   -1,   -1,   -1,   -1,  276,  277,
  278,  256,  257,   -1,   -1,  260,  261,   -1,   -1,   -1,
   -1,  266,   42,   -1,  269,   45,   -1,   47,  273,   -1,
   -1,  276,  277,  278,   -1,   -1,  256,  257,   -1,   42,
  260,  261,   45,   -1,   47,   -1,  266,   42,   -1,  269,
   45,   -1,   47,   -1,   -1,   -1,  276,  277,  278,  256,
  257,   -1,   -1,  260,  261,   -1,   -1,   -1,   -1,  266,
   -1,   -1,  269,  256,  257,   -1,  273,  260,  261,  276,
  277,  278,   -1,  266,   -1,   41,  269,   43,   -1,   45,
  273,   -1,   -1,  276,  277,  278,   -1,  256,  257,   -1,
   -1,  260,  261,   -1,   60,   61,   62,  266,   -1,   -1,
  269,  256,  257,   -1,   -1,  260,  261,  276,  277,  278,
   -1,  266,   -1,   -1,  269,  256,  257,  258,  259,   58,
   59,  276,  277,  278,  256,  257,   -1,   -1,  260,  261,
   43,   -1,   45,   -1,  266,   -1,   -1,  269,  279,  366,
  367,  368,  369,   -1,  276,  277,  278,   60,   61,   62,
  256,  257,  258,  259,  256,  257,  258,  259,  256,  257,
  258,  259,  256,  257,   -1,   -1,  260,  261,  270,  271,
  272,   -1,  266,  279,   -1,  269,   -1,  279,   -1,   -1,
   -1,  279,  276,  277,  123,   -1,  125,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,  256,  257,  258,  259,   -1,
   -1,  256,  257,  258,  259,   58,   59,   -1,  269,   -1,
   -1,   -1,  439,   41,   42,   43,   -1,   45,  279,   47,
   -1,   -1,   -1,   -1,  279,   -1,  256,  257,  258,  259,
   58,   59,   60,   61,   62,   -1,   -1,   -1,   41,   -1,
   43,   -1,   45,  256,  257,  258,  259,   -1,   -1,  279,
   -1,  256,  257,  258,  259,   58,   59,   60,   61,   62,
   41,   -1,   43,   -1,   45,   -1,  279,   -1,   -1,   -1,
  123,   41,  125,   43,  279,   45,   -1,   58,   59,   60,
   61,   62,   41,   -1,   43,   -1,   45,   -1,   58,   59,
   60,   61,   62,   -1,   -1,  123,   -1,  125,   -1,   58,
   59,   60,   61,   62,  270,  271,  272,   -1,   -1,   -1,
  246,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,
  123,   -1,  125,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  269,   -1,   -1,   -1,   -1,   -1,  343,  344,   -1,  346,
  347,   -1,  123,   -1,  125,  281,  282,  283,  284,   -1,
   -1,   -1,   -1,  123,   -1,  125,   -1,  270,  271,  272,
   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,   -1,   -1,
  377,   -1,   -1,   -1,  381,   -1,   -1,   -1,   -1,   -1,
   -1,  317,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,  327,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,
  417,  418,  419,   -1,  421,  422,  269,   -1,  354,  355,
  356,  357,   -1,   -1,   -1,   -1,   -1,   -1,  256,  257,
   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,   -1,
  447,  269,  270,  271,  272,   -1,   -1,   -1,  384,   -1,
   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,   -1,  262,
  396,   -1,   -1,   -1,   -1,   -1,  269,  270,  271,  272,
   -1,   -1,   -1,   -1,   -1,  256,  257,   -1,   -1,   -1,
   -1,  262,   -1,   -1,   -1,   -1,  256,  257,  269,  270,
  271,  272,  262,   -1,   -1,   -1,   -1,  256,  257,  269,
  270,  271,  272,  262,   -1,   -1,   -1,   -1,   -1,   -1,
  269,  270,  271,  272,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"$$1 :",
"programa : ID $$1 conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativa sentencias",
"sentencias : ejecutable sentencias",
"sentencias : declarativa",
"sentencias : ejecutable",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"$$2 :",
"funcion : FUN ID $$2 funcion_parametros",
"funcion : error_funcion",
"$$3 :",
"funcion_parametros : '(' lista_parametros ')' ':' tipo '{' $$3 cuerpo_funcion",
"funcion_parametros : error_funcion_parametros",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno '}'",
"cuerpo_funcion : retorno '}'",
"cuerpo_funcion : error_cuerpo_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : error_expresion",
"termino : termino '*' factor",
"termino : termino '/' factor",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"factor : '-' CTE_INT",
"factor : '-' CTE_DBL",
"factor : ID",
"factor : invocacion",
"factor : TOF64 '(' expresion ')'",
"factor : error_factor",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"parametro_real : '-' CTE_INT",
"parametro_real : '-' CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : expresion_dountil",
"$$4 :",
"ejecutable_defer : DEFER $$4 ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$5 :",
"seleccion : IF condicion $$5 cuerpo_seleccion",
"seleccion : error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$6 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$6 cuerpo_else",
"cuerpo_seleccion : error_cuerpo_seleccion",
"cuerpo_else : ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"cuerpo_else : error_cuerpo_else",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID parametros_discard",
"invocacion_discard : error_invocacion_discard",
"parametros_discard : '(' lista_parametros_reales ')' ';'",
"parametros_discard : error_parametros_discard",
"$$7 :",
"expresion_dountil : DO $$7 cuerpo_dountil",
"$$8 :",
"expresion_dountil : etiqueta ':' DO $$8 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"etiqueta : ID",
"$$9 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$9 cuerpo_asignacion_do_until",
"cuerpo_dountil : error_cuerpo_dountil",
"$$10 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$10 cuerpo_asignacion_do_until",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"cuerpo_asignacion_do_until : ':' '(' asignacion_do_until ')' ';'",
"cuerpo_asignacion_do_until : error_cuerpo_asignacion_do_until",
"asignacion_do_until : ID ASSIGN expresion",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_declarativa : tipo ';'",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : error ID",
"error_funcion : FUN error",
"error_funcion_parametros : lista_parametros ')' ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ':' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' tipo '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' '{' cuerpo_funcion",
"error_funcion_parametros : '(' lista_parametros ')' ':' tipo cuerpo_funcion",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_cuerpo_funcion : retorno error",
"error_cuerpo_funcion : error '}'",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_retorno_expresion : expresion",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_termino : '*' factor",
"error_termino : termino '*' error",
"error_termino : '/' factor",
"error_termino : termino '/' error",
"error_factor : TOF64 error expresion ')'",
"error_factor : TOF64 '(' expresion error",
"error_factor : TOF64 '(' ')'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_asignacion : ID error",
"error_seleccion : IF cuerpo_seleccion",
"error_seleccion : IF condicion error",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' '}' cuerpo_else",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' '}' END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables cuerpo_else",
"error_cuerpo_seleccion : THEN bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_cuerpo_else : THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : OUT '(' ')' ';'",
"error_mensaje_pantalla : CADENA",
"error_mensaje_pantalla : CADENA ';'",
"error_invocacion_discard : invocacion",
"error_invocacion_discard : DISCARD error",
"error_parametros_discard : lista_parametros_reales ')' ';'",
"error_parametros_discard : '(' error ')' ';'",
"error_parametros_discard : '(' lista_parametros_reales ';'",
"error_parametros_discard : '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' cuerpo_asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : asignacion_do_until ';'",
"error_cuerpo_asignacion_do_until : ':' asignacion_do_until ')'",
"error_cuerpo_asignacion_do_until : ':' '(' ')'",
"error_cuerpo_asignacion_do_until : ':' '(' asignacion_do_until error",
"error_asignacion_do_until : ASSIGN expresion",
"error_asignacion_do_until : ID expresion",
"error_asignacion_do_until : ID ASSIGN error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables",
};

//#line 615 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
private ArrayList<String> lista_de_variables;
public static int cantidad_parametros = 0;
public static int cantidad_parametros_reales = 0;
public static String nombre_funcion;
public static String ambito;
public static boolean existeDefer = false;
public static boolean agregoCteDbl = false;
public static String nombre_funcion_invocacion = "";
public static ArrayList<String> parametros_declaracion_funcion;

public Parser(AnalizadorLexico analizadorLexico)
{
	this.analizadorLexico = analizadorLexico;
	this.lista_de_variables = new ArrayList<String>();
	this.parametros_declaracion_funcion = new ArrayList<String>();
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser]. " + s);
}


public void actualizarRango() {
	String lexema = yylval.sval;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	String tipo = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "tipo");
	if (tipo.equals(this.analizadorLexico.CTE_INT_TYPE)){ //Pasar valor desde analizador lexico
		int nro = Integer.parseInt(lexema); //SOLO SE PERMITEN NUMEROS POSITIVOS
		analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
		Main.polaca.addElementPolaca(nro);
		Main.estructurasSintacticas.add("[Parser: linea " + analizadorLexico.linea + "]. Se actualiza la constante i16 al valor: " + nro);
		Main.erroresSintacticos.add("[Parser: linea " + analizadorLexico.linea + "]. Error sintactico: constante i16 fuera de rango");
	}
	else if (tipo.equals(this.analizadorLexico.CTE_DBL_TYPE)) {
		String flotante = "-" + lexema;
		if (this.agregoCteDbl){
			analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, flotante);
		}
		else {
			if (this.analizadorLexico.tablaSimbolos.obtenerClave(flotante) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
				this.analizadorLexico.tablaSimbolos.agregarSimbolo(flotante);
				clave = this.analizadorLexico.tablaSimbolos.obtenerClave(flotante);
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", this.analizadorLexico.CTE_DBL_TYPE);
			}
			Parser.agregoCteDbl = false;
		}
		Main.polaca.addElementPolaca(flotante);
	}
	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");
}

public void incorporarInformacionSemantica(String nombreLexema, String tipoLexema, String usoLexema, String ambitoLexema){
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema); //se obtiene la clave
	if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si esta declarada
		if (usoLexema != "etiqueta")
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
	}
	else{
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
		if(clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ // si no esta declarada
			this.analizadorLexico.tablaSimbolos.agregarSimbolo(nombreLexema + "." + ambitoLexema);	// se actualiza el nombre de la variable en la tabla de simbolos
			clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreLexema + "." + ambitoLexema); //se obtiene la clave
			if (usoLexema != "etiqueta")
				this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", tipoLexema); // se agrega el tipo a la tabla de simbolos
			this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", usoLexema); // se agrega el uso a la tabla de simbolos
		}
		else
			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico " + nombreLexema + ", ya fue declarada en ese ambito.");
	}
}

public String ambitoReal(String nombre, String ambito){
	String lexema = nombre + "." + ambito;
	int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
	int posicion = lexema.lastIndexOf('.');
	while ((clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) && (posicion != -1)){
		lexema = lexema.substring(0, posicion);
		clave = this.analizadorLexico.tablaSimbolos.obtenerClave(lexema);
		posicion = lexema.lastIndexOf('.');
	}
	return lexema;
}

public void agregarInvocacionFuncion(int clave_funcion_invocada, String funcion_invocada){
	if (clave_funcion_invocada != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
		if (this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave_funcion_invocada, "uso").equals("funcion")){
			String aux = this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave_funcion_invocada, "funciones_invocadas");
			if (aux.equals("")){
				this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave_funcion_invocada, funcion_invocada);
			}
			else
				this.analizadorLexico.tablaSimbolos.actulizarSimbolo(clave_funcion_invocada, aux + "." + funcion_invocada);
		}
	}
}
					
					

	
	
					
					
					
//#line 1059 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 1:
//#line 15 "gramatica.y"
{String nombre_programa = val_peek(0).sval;
							int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombre_programa); /*se obtiene la clave*/
							if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO) /* si esta declarada*/
								this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "nombre de programa"); /* se agrega el uso a la tabla de simbolos*/
								this.ambito = nombre_programa;}
break;
case 4:
//#line 24 "gramatica.y"
{if (this.existeDefer){
												this.existeDefer = false;
												Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 13:
//#line 41 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");
													String tipoVar = val_peek(2).sval;
													lista_de_variables = (ArrayList<String>)val_peek(1).obj;
													if(lista_de_variables!=null){
														for(String lexema : lista_de_variables) /* por cada variable declarada*/
															incorporarInformacionSemantica(lexema, tipoVar, "variable", ambito);
														lista_de_variables.clear();
													}}
break;
case 15:
//#line 53 "gramatica.y"
{yyval = new ParserVal("ui16"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 16:
//#line 54 "gramatica.y"
{yyval = new ParserVal("f64"); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 17:
//#line 57 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);
							lista_de_variables.add(val_peek(0).sval);
                            yyval = new ParserVal(lista_de_variables);}
break;
case 18:
//#line 60 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);
					                            lista_de_variables = (ArrayList<String>)val_peek(2).obj;
												lista_de_variables.add(val_peek(0).sval);
												yyval = new ParserVal(lista_de_variables);}
break;
case 20:
//#line 67 "gramatica.y"
{this.nombre_funcion = val_peek(0).sval;
								Main.polaca.addElementPolaca(this.nombre_funcion + "." + this.ambito);
								Main.polaca.addElementPolaca("#FUN");}
break;
case 23:
//#line 74 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");
																String nombreFunc = this.nombre_funcion;
																String tipoFunc = val_peek(4).sval;
																incorporarInformacionSemantica(nombreFunc, tipoFunc, "funcion", ambito);
																int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(nombreFunc + "." + ambito); /*se obtiene la clave*/
																if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "cantidad de parametros", Integer.toString(this.cantidad_parametros)); /* se agrega la cantidad de parametros a la tabla de simbolos*/
																	this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "funciones_invocadas", "");
																	for (int i = 1; i <= parametros_declaracion_funcion.size(); i++)
																		this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "parametro_" + i, this.parametros_declaracion_funcion.get(i-1));
																}
																this.parametros_declaracion_funcion.clear();
																this.cantidad_parametros = 0;
																this.ambito = this.ambito + "." + nombreFunc;}
break;
case 31:
//#line 100 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
								String nombreFunc = this.nombre_funcion;
								String tipoParam = val_peek(1).sval;
								String nombreParam = val_peek(0).sval;
								String ambito_actual = ambito + "." + nombreFunc;
								this.cantidad_parametros++;
								incorporarInformacionSemantica(nombreParam, tipoParam, "nombre de parametro", ambito_actual);
								this.parametros_declaracion_funcion.add(ambitoReal(nombreParam, ambito_actual));}
break;
case 33:
//#line 111 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf("."));
												Main.polaca.addElementPolaca("#RET");
												if (this.existeDefer){
													this.existeDefer = false;
													Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 34:
//#line 116 "gramatica.y"
{this.ambito = this.ambito.substring(0,ambito.lastIndexOf(".")); 
									Main.polaca.addElementPolaca("#RET");
									Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning: funcion vacia");
									if (this.existeDefer){
										this.existeDefer = false;
										Main.polaca.addElementPolaca("#EJECDEFER");}}
break;
case 36:
//#line 125 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un retorno de funcion");}
break;
case 41:
//#line 135 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 44:
//#line 140 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 45:
//#line 142 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 47:
//#line 147 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 48:
//#line 149 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 51:
//#line 155 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte); 
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 52:
//#line 160 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + val_peek(0).sval);
									String cte = val_peek(0).sval;
									Main.polaca.addElementPolaca(cte);
									int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
									this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 53:
//#line 165 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
									actualizarRango();}
break;
case 54:
//#line 167 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
									actualizarRango();}
break;
case 55:
//#line 169 "gramatica.y"
{Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo el identificador:  " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 57:
//#line 176 "gramatica.y"
{Main.polaca.addElementPolaca("#TOF64");}
break;
case 59:
//#line 181 "gramatica.y"
{String id = val_peek(3).sval;
															Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
															Main.polaca.addElementPolaca("#CALL");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. se realizo una invocacion a funcion");
															int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
															if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
																Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la funcion " + id + ", no fue declarada en ese ambito");
															}
															else{
																if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
																	Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
															}
															this.cantidad_parametros_reales = 0;
															/*agregarInvocacionFuncion(clave, id);*/}
break;
case 66:
//#line 207 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									String id = val_peek(0).sval;
									Main.polaca.addElementPolaca(id);
									this.cantidad_parametros_reales++;
									if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
										Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 67:
//#line 213 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 68:
//#line 219 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
										String cte = val_peek(0).sval;
										Main.polaca.addElementPolaca(cte);
										this.cantidad_parametros_reales++;
										int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cte);
										this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "uso", "constante");}
break;
case 69:
//#line 225 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante entera: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 70:
//#line 228 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(0).sval); Main.estructurasSintacticas.add("[Lexico: linea " + this.analizadorLexico.linea + "]. se leyo la constante doble: " + yyval.sval);
											this.cantidad_parametros_reales++;
											actualizarRango();}
break;
case 71:
//#line 233 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 72:
//#line 234 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 73:
//#line 235 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 74:
//#line 236 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 75:
//#line 237 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 76:
//#line 238 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 84:
//#line 252 "gramatica.y"
{this.existeDefer = true;
								Main.polaca.addElementPolaca("#DEFER");}
break;
case 85:
//#line 254 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una sentencia ejecutable con defer"); 
											Main.polaca.addElementPolaca("#FINDEFER");}
break;
case 86:
//#line 258 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion");
												String id = val_peek(3).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 88:
//#line 267 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("#BF");}
break;
case 91:
//#line 274 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF");}
break;
case 92:
//#line 277 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("#BI");
																Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 95:
//#line 286 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																	Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
																	Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un IF-ELSE");}
break;
case 98:
//#line 296 "gramatica.y"
{String cadena = val_peek(2).sval;
												Main.polaca.addElementPolaca(cadena);
												Main.polaca.addElementPolaca("#OUT");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un mensaje por pantalla");
												int clave = this.analizadorLexico.tablaSimbolos.obtenerClave(cadena); /*se obtiene la clave*/
												if(clave != this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){ /* si esta declarada*/
													this.analizadorLexico.tablaSimbolos.agregarAtributo(clave, "tipo", "cadena");}}
break;
case 100:
//#line 306 "gramatica.y"
{String id = val_peek(1).sval;
														Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
														Main.polaca.addElementPolaca("#DISCARD");
														int clave = this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito); /*se obtiene la clave*/
														if (clave == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO){
															Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");
														}
														else{
														if (Integer.parseInt(this.analizadorLexico.tablaSimbolos.obtenerAtributo(clave, "cantidad de parametros")) != this.cantidad_parametros_reales)
															Main.warnings.add("[Parser: linea " + this.analizadorLexico.linea + "]. Warning sintactico : El numero de parametros de la funcion " + id + ", no coincide con su declaracion");
														}
														this.cantidad_parametros_reales = 0;
														/*agregarInvocacionFuncion(clave, id);*/}
break;
case 102:
//#line 322 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una invocacion a un DISCARD");}
break;
case 104:
//#line 326 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
						Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));}
break;
case 106:
//#line 328 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
										Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
										String nombre_etiqueta = val_peek(2).sval;
										incorporarInformacionSemantica(nombre_etiqueta, "", "etiqueta", this.ambito);}
break;
case 110:
//#line 339 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("#BT");}
break;
case 111:
//#line 342 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until");}
break;
case 113:
//#line 352 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("#BT");}
break;
case 114:
//#line 355 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
												if (Main.polaca.existeBreak()){ /*Hay un Break*/
													Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
												Main.polaca.addElementPolaca(Main.polaca.desapilar());
												Main.polaca.addElementPolaca("#BI");
												Main.polaca.addElementPolaca(":L" + String.valueOf(Main.polaca.getSize()));
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un do-until con etiqueta");}
break;
case 118:
//#line 370 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una asignacion en la sentencia do-until");
												String id = val_peek(2).sval;
												Main.polaca.addElementPolaca(ambitoReal(id, this.ambito));
												Main.polaca.addElementPolaca("=:");
												if (this.analizadorLexico.tablaSimbolos.obtenerClaveAmbito(id + "." + this.ambito) == this.analizadorLexico.tablaSimbolos.NO_ENCONTRADO)
													Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la variable " + id + ", no fue declarada en ese ambito");}
break;
case 120:
//#line 379 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("#BI");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 122:
//#line 385 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("#BI");
												Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break");}
break;
case 124:
//#line 394 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("#BI");
																					String nombre_etiqueta = val_peek(1).sval;
																					if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																						Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																					Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 125:
//#line 403 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("#BI");
																		String nombre_etiqueta = val_peek(1).sval;
																		if (!(this.analizadorLexico.tablaSimbolos.existeEtiqueta(nombre_etiqueta + "." + this.ambito)))
																			Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, la etiqueta " + nombre_etiqueta + " no se corresponde con la etiqueta del do-until");
																		Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto un break con etiqueta");}
break;
case 127:
//#line 416 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de programa junto con sus llaves");}
break;
case 128:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre del programa");}
break;
case 129:
//#line 420 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de apertura");}
break;
case 130:
//#line 421 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de cierre");}
break;
case 131:
//#line 422 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencia/s y la llave de apertura");}
break;
case 132:
//#line 423 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n sentencia/s dentro de las '{' '}'");}
break;
case 133:
//#line 424 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre");}
break;
case 134:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, se detecto un bloque sin llave de cierre");}
break;
case 135:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ; para terminar la declaracion");}
break;
case 136:
//#line 430 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de las variables");}
break;
case 137:
//#line 431 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta/n la/s variable/s");}
break;
case 138:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta ; al terminar la declaracion de la funcion");}
break;
case 139:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable en la declaracion");}
break;
case 140:
//#line 437 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador antes de la ','");}
break;
case 141:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta un identificador luego de la ','");}
break;
case 142:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 143:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion");}
break;
case 144:
//#line 446 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura para los parametros");}
break;
case 145:
//#line 447 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre para los parametros");}
break;
case 146:
//#line 448 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de los parametros");}
break;
case 147:
//#line 449 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el tipo de retorno de la funcion");}
break;
case 148:
//#line 450 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura del cuerpo de la funcion");}
break;
case 149:
//#line 453 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, no se puede tener mas de dos parametros");}
break;
case 150:
//#line 454 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro antes de la ','");}
break;
case 151:
//#line 455 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta un parametro luego de la ','");}
break;
case 152:
//#line 456 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros, falta la ',' separando los parametros");}
break;
case 153:
//#line 459 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el tipo del parametro");}
break;
case 154:
//#line 460 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion del parametro, falta el identificador del parametro");}
break;
case 155:
//#line 463 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta la llave de cierre");}
break;
case 156:
//#line 464 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el cuerpo de la funcion, falta el retorno");}
break;
case 157:
//#line 468 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta el ';'");}
break;
case 158:
//#line 469 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en el retorno de la funcion, falta la sentencia de retorno");}
break;
case 159:
//#line 473 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion de retorno");}
break;
case 160:
//#line 474 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion de retorno");}
break;
case 161:
//#line 475 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se puede retornar vacio en la expresion de retorno");}
break;
case 162:
//#line 476 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura y cierre de la expresion de retorno");}
break;
case 163:
//#line 480 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la condicion");}
break;
case 164:
//#line 481 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la primera expresion en la condicion");}
break;
case 165:
//#line 482 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el comparador en la condicion");}
break;
case 166:
//#line 483 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la segunda expresion en la condicion");}
break;
case 167:
//#line 484 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la condicion");}
break;
case 168:
//#line 485 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, no se permite la condicion vacia");}
break;
case 169:
//#line 486 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la condicion");}
break;
case 170:
//#line 489 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la suma");}
break;
case 171:
//#line 490 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el segundo termino de la resta");}
break;
case 172:
//#line 491 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "].Error sintactico, falta el primer termino de la suma");}
break;
case 173:
//#line 494 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la multiplicacion");}
break;
case 174:
//#line 495 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la multiplicacion");}
break;
case 175:
//#line 496 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el primer factor de la division");}
break;
case 176:
//#line 497 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el segundo factor de la division");}
break;
case 177:
//#line 500 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de la expresion en la conversion tof64");}
break;
case 178:
//#line 501 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de la expresion en la conversion tof64");}
break;
case 179:
//#line 502 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan los parentesis de la expresion en la conversion tof64");}
break;
case 180:
//#line 505 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 181:
//#line 508 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 182:
//#line 509 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 183:
//#line 510 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 184:
//#line 511 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 185:
//#line 514 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar");}
break;
case 186:
//#line 515 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion");}
break;
case 187:
//#line 516 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar");}
break;
case 188:
//#line 517 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' en la sentencia de asignacion");}
break;
case 189:
//#line 518 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, solo se define el identificador de la asignacion");}
break;
case 190:
//#line 521 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion en la sentencia de seleccion");}
break;
case 191:
//#line 522 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el cuerpo de la seleccion");}
break;
case 192:
//#line 525 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 193:
//#line 526 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 194:
//#line 527 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 195:
//#line 528 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 196:
//#line 529 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el then en la sentencia de seleccion");}
break;
case 197:
//#line 530 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 198:
//#line 531 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 199:
//#line 532 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 200:
//#line 533 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 201:
//#line 534 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 202:
//#line 535 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 203:
//#line 536 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, faltan las llaves de apertura y cierre en la sentencia de seleccion");}
break;
case 204:
//#line 539 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 205:
//#line 540 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 206:
//#line 541 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias luego del else");}
break;
case 207:
//#line 542 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 208:
//#line 543 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el end_if de la seleccion");}
break;
case 209:
//#line 544 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de seleccion");}
break;
case 210:
//#line 547 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out en la sentencia de mensaje por pantalla");}
break;
case 211:
//#line 548 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 212:
//#line 549 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 213:
//#line 550 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 214:
//#line 551 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la cadena en el mensaje por pantalla");}
break;
case 215:
//#line 552 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out y los parentesis en la sentencia de mensaje por pantalla");}
break;
case 216:
//#line 553 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el out, los parentesis y el punto y coma de cierre en la sentencia de mensaje por pantalla");}
break;
case 217:
//#line 556 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el discard antes de la invocacion a la funcion");}
break;
case 218:
//#line 557 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el nombre de la funcion discard");}
break;
case 219:
//#line 560 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 220:
//#line 561 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la lista de parametros reales de la funcion discard");}
break;
case 221:
//#line 562 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 222:
//#line 563 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' al final de la funcion discard");}
break;
case 223:
//#line 566 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el do en la sentencia do_until");}
break;
case 224:
//#line 567 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 225:
//#line 568 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 226:
//#line 572 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 227:
//#line 573 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 228:
//#line 574 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 229:
//#line 575 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 230:
//#line 576 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until");}
break;
case 231:
//#line 579 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 232:
//#line 580 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 233:
//#line 581 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 234:
//#line 582 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 235:
//#line 583 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 236:
//#line 586 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 237:
//#line 587 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de apertura en la asignacion del do_until");}
break;
case 238:
//#line 588 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, error en la asignacion del do_until");}
break;
case 239:
//#line 589 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el parentesis de cierre en la asignacion del do_until");}
break;
case 240:
//#line 592 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el identificador de la variable a asignar en la sentencia do-until");}
break;
case 241:
//#line 593 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el signo de asignacion en la sentencia do-until");}
break;
case 242:
//#line 594 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la expresion a asignar en la sentencia do-until");}
break;
case 243:
//#line 597 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 244:
//#line 598 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia ejecutable");}
break;
case 245:
//#line 599 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 246:
//#line 600 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego del break");}
break;
case 247:
//#line 603 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break luego de la sentencia");}
break;
case 248:
//#line 604 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 249:
//#line 605 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 250:
//#line 606 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 251:
//#line 607 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break antes del ':'");}
break;
case 252:
//#line 608 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ':' luego del break");}
break;
case 253:
//#line 609 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta la etiqueta luego del ':'");}
break;
case 254:
//#line 610 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el ';' luego de la etiqueta");}
break;
case 255:
//#line 611 "gramatica.y"
{Main.erroresSintacticos.add("[Parser: linea " + this.analizadorLexico.linea + "]. Error sintactico, falta el break con etiqueta en el cuerpo del do-until con etiqueta");}
break;
//#line 2133 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
