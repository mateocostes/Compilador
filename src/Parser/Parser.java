//### This file created by BYACC 1.8(/Java extension  1.15)
//### Java capabilities added 7 Jan 97, Bob Jamison
//### Updated : 27 Nov 97  -- Bob Jamison, Joe Nieten
//###           01 Jan 98  -- Bob Jamison -- fixed generic semantic constructor
//###           01 Jun 99  -- Bob Jamison -- added Runnable support
//###           06 Aug 00  -- Bob Jamison -- made state variables class-global
//###           03 Jan 01  -- Bob Jamison -- improved flags, tracing
//###           16 May 01  -- Bob Jamison -- added custom stack sizing
//###           04 Mar 02  -- Yuval Oren  -- improved java performance, added options
//###           14 Mar 02  -- Tomas Hurka -- -d support, static initializer workaround
//### Please send bug reports to tom@hukatronic.cz
//### static char yysccsid[] = "@(#)yaccpar	1.8 (Berkeley) 01/20/90";






//#line 2 "gramatica.y"
package Parser;
import AnalizadorLexico.*;
//#line 20 "Parser.java"




public class Parser
{

boolean yydebug;        //do I want debug output?
int yynerrs;            //number of errors so far
int yyerrflag;          //was there an error?
int yychar;             //the current working character

//########## MESSAGES ##########
//###############################################################
// method: debug
//###############################################################
void debug(String msg)
{
  if (yydebug)
    System.out.println(msg);
}

//########## STATE STACK ##########
final static int YYSTACKSIZE = 500;  //maximum stack size
int statestk[] = new int[YYSTACKSIZE]; //state stack
int stateptr;
int stateptrmax;                     //highest index of stackptr
int statemax;                        //state when highest index reached
//###############################################################
// methods: state stack push,pop,drop,peek
//###############################################################
final void state_push(int state)
{
  try {
		stateptr++;
		statestk[stateptr]=state;
	 }
	 catch (ArrayIndexOutOfBoundsException e) {
     int oldsize = statestk.length;
     int newsize = oldsize * 2;
     int[] newstack = new int[newsize];
     System.arraycopy(statestk,0,newstack,0,oldsize);
     statestk = newstack;
     statestk[stateptr]=state;
  }
}
final int state_pop()
{
  return statestk[stateptr--];
}
final void state_drop(int cnt)
{
  stateptr -= cnt; 
}
final int state_peek(int relative)
{
  return statestk[stateptr-relative];
}
//###############################################################
// method: init_stacks : allocate and prepare stacks
//###############################################################
final boolean init_stacks()
{
  stateptr = -1;
  val_init();
  return true;
}
//###############################################################
// method: dump_stacks : show n levels of the stacks
//###############################################################
void dump_stacks(int count)
{
int i;
  System.out.println("=index==state====value=     s:"+stateptr+"  v:"+valptr);
  for (i=0;i<count;i++)
    System.out.println(" "+i+"    "+statestk[i]+"      "+valstk[i]);
  System.out.println("======================");
}


//########## SEMANTIC VALUES ##########
//public class ParserVal is defined in ParserVal.java


String   yytext;//user variable to return contextual strings
ParserVal yyval; //used to return semantic vals from action routines
ParserVal yylval;//the 'lval' (result) I got from yylex()
ParserVal valstk[];
int valptr;
//###############################################################
// methods: value stack push,pop,drop,peek.
//###############################################################
void val_init()
{
  valstk=new ParserVal[YYSTACKSIZE];
  yyval=new ParserVal();
  yylval=new ParserVal();
  valptr=-1;
}
void val_push(ParserVal val)
{
  if (valptr>=YYSTACKSIZE)
    return;
  valstk[++valptr]=val;
}
ParserVal val_pop()
{
  if (valptr<0)
    return new ParserVal();
  return valstk[valptr--];
}
void val_drop(int cnt)
{
int ptr;
  ptr=valptr-cnt;
  if (ptr<0)
    return;
  valptr = ptr;
}
ParserVal val_peek(int relative)
{
int ptr;
  ptr=valptr-relative;
  if (ptr<0)
    return new ParserVal();
  return valstk[ptr];
}
final ParserVal dup_yyval(ParserVal val)
{
  ParserVal dup = new ParserVal();
  dup.ival = val.ival;
  dup.dval = val.dval;
  dup.sval = val.sval;
  dup.obj = val.obj;
  return dup;
}
//#### end semantic value section ####
public final static short ID=257;
public final static short CTE_INT=258;
public final static short CTE_DBL=259;
public final static short CADENA=260;
public final static short IF=261;
public final static short THEN=262;
public final static short ELSE=263;
public final static short END_IF=264;
public final static short RETURN=265;
public final static short OUT=266;
public final static short FUN=267;
public final static short UI16=268;
public final static short ASSIGN=269;
public final static short MAYOR_IGUAL=270;
public final static short MENOR_IGUAL=271;
public final static short DISTINTO=272;
public final static short BREAK=273;
public final static short F64=274;
public final static short UNTIL=275;
public final static short DISCARD=276;
public final static short DO=277;
public final static short DEFER=278;
public final static short TOF64=279;
public final static short YYERRCODE=256;
final static short yylhs[] = {                           -1,
    0,    0,    1,    1,    3,    3,    3,    3,    5,    5,
    6,    6,    7,    7,    7,   10,   10,   11,   11,   11,
    9,    9,   14,   14,   14,   14,   17,   18,   18,   15,
   15,   15,   21,   21,   23,   23,   23,   25,   25,   26,
   26,   26,   26,   26,   30,   30,   30,   30,   32,   32,
   34,   32,   35,   32,   32,   32,   36,   36,   37,   37,
   37,   37,   39,   40,   40,   40,   28,   28,   28,   28,
   28,   28,    8,    8,   42,   42,   42,   42,   42,   43,
   44,   44,   51,   45,   50,   54,   50,   53,   46,   46,
   46,   47,   47,   58,   48,   61,   48,   48,   64,   57,
   57,   59,   68,   60,   60,   65,   65,   63,   63,   63,
   63,   67,   67,   67,    2,    2,    4,    4,    4,    4,
    4,    4,   12,   12,   12,   12,   13,   13,   16,   16,
   16,   16,   16,   16,   16,   16,   16,   19,   19,   19,
   19,   20,   20,   22,   24,   24,   27,   27,   27,   29,
   29,   29,   29,   29,   29,   29,   31,   31,   31,   31,
   31,   31,   33,   33,   33,   33,   38,   41,   41,   41,
   41,   49,   49,   49,   49,   52,   52,   52,   52,   52,
   52,   52,   52,   52,   52,   52,   52,   52,   52,   52,
   52,   52,   52,   55,   55,   55,   55,   55,   55,   55,
   55,   56,   56,   56,   56,   62,   62,   62,   66,   66,
   66,   66,   66,   66,   69,   69,   69,   69,   69,   69,
   70,   70,   70,   70,   70,   71,   71,   71,   71,   72,
   72,   72,   72,   72,   72,   72,   72,
};
final static short yylen[] = {                            2,
    2,    1,    3,    1,    2,    2,    1,    1,    2,    1,
    2,    1,    2,    3,    1,    1,    1,    1,    3,    1,
   10,    1,    3,    1,    0,    1,    1,    2,    1,    2,
    1,    1,    3,    1,    1,    3,    1,    5,    1,    1,
    3,    3,    4,    1,    5,    5,    1,    1,    1,    1,
    0,    3,    0,    3,    1,    1,    4,    1,    3,    1,
    0,    1,    1,    1,    1,    1,    1,    1,    1,    1,
    1,    1,    1,    1,    1,    1,    1,    1,    1,    2,
    4,    1,    0,    5,    6,    0,   11,    1,    5,    4,
    1,    6,    1,    0,    3,    0,    5,    1,    0,    9,
    1,    1,    0,    9,    1,    5,    1,    3,    1,    2,
    1,    5,    4,    1,    1,    1,    2,    1,    1,    2,
    2,    3,    2,    2,    3,    1,    3,    3,    9,    9,
    9,    9,    9,    9,    9,    9,   10,    5,    2,    2,
    2,    2,    2,    1,    2,    2,    2,    2,    2,    4,
    4,    5,    4,    4,    3,    3,    3,    3,    3,    4,
    4,    3,    2,    2,    2,    2,    4,    5,    2,    2,
    2,    3,    3,    3,    4,   11,   11,   11,   11,   11,
   11,   11,   11,   11,   11,   11,    7,    7,    7,    7,
    7,    7,    7,    4,    4,    4,    4,    3,    3,    3,
    3,    5,    5,    5,    5,    9,   10,    2,    7,    7,
    7,    7,    7,    8,    7,    7,    7,    7,    7,    8,
    4,    4,    4,    4,    5,    1,    3,    2,    1,    4,
    4,    4,    4,    3,    3,    3,    3,
};
final static short yydefred[] = {                         0,
    0,    0,    0,  119,    0,  116,    2,    4,    0,    0,
    0,    0,    0,   16,    0,   17,    0,   94,    0,    0,
    0,    0,    0,    0,   10,   12,    0,    0,    0,   15,
   20,   22,   73,   74,   75,   76,   77,   78,   79,   82,
   91,   93,    0,   98,    1,  120,    0,    0,    0,    0,
    0,    0,   49,   50,    0,    0,    0,    0,    0,    0,
    0,    0,   44,   47,   48,   56,   58,    0,   83,    0,
   39,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   80,    0,    0,  208,  122,    0,    9,    0,
   11,   13,    0,   18,    0,  124,    0,    0,    0,    3,
    0,  226,    0,    0,  111,  127,  125,    0,    0,  174,
    0,    0,    0,   51,   53,  163,  165,    0,    0,    0,
    0,    0,    0,   26,   29,    0,    0,  173,    0,    0,
    0,   68,   67,   72,   69,   70,   71,    0,    0,    0,
    0,    0,    0,  200,    0,  199,    0,    0,    0,  172,
   64,   65,   66,    0,    0,    0,    0,    0,   62,    0,
    0,   95,    0,  101,    0,  198,    0,    0,   14,  128,
   19,    0,   96,  110,    0,    0,    0,    0,    0,  175,
   81,    0,  162,    0,   52,   54,  142,  139,  143,   28,
    0,    0,  141,  157,    0,  158,    0,    0,    0,  155,
    0,    0,    0,    0,    0,    0,  195,  196,    0,   90,
    0,    0,    0,  169,    0,    0,    0,  171,    0,    0,
    0,    0,  194,    0,    0,    0,    0,  114,    0,  227,
  108,    0,  167,   57,  160,  161,   43,    0,    0,    0,
    0,    0,  153,    0,  151,    0,    0,   84,  150,   89,
    0,    0,    0,    0,  204,    0,  203,    0,  202,    0,
    0,    0,    0,  102,    0,    0,    0,    0,    0,    0,
    0,   97,    0,  105,    0,    0,    0,   45,   46,  152,
   38,    0,    0,    0,    0,    0,    0,    0,    0,    0,
   92,    0,    0,    0,    0,    0,    0,  236,    0,  235,
  234,    0,    0,    0,    0,    0,    0,    0,    0,    0,
  138,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  168,    0,    0,    0,    0,    0,    0,  113,  232,
    0,  231,  230,    0,    0,    0,    0,    0,    0,    0,
    0,  107,    0,    0,    0,    0,   31,   32,   34,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  112,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  206,
  146,    0,    0,   35,    0,   37,   30,  129,   85,    0,
    0,    0,    0,    0,    0,  134,  136,    0,  135,  133,
  132,  131,  130,  210,  211,  213,    0,    0,  212,  209,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  149,    0,   33,  147,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  137,   21,  214,
    0,  207,    0,    0,    0,    0,    0,    0,    0,  221,
  224,    0,  223,  222,   36,    0,    0,  187,    0,  190,
    0,  191,    0,  193,    0,  192,    0,  189,    0,  188,
  100,  216,  217,  219,    0,    0,  218,  215,  225,  106,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  220,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  104,   87,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,  176,  179,  180,  183,  184,  186,  185,
  182,  181,  178,  177,
};
final static short yydgoto[] = {                          5,
    6,    7,  345,    8,   23,  282,   25,   26,   27,   28,
   29,   30,   31,  121,  346,   32,  122,  123,  124,  125,
  347,  348,  383,  349,   69,   70,  386,  139,   71,   62,
   63,   64,   65,  185,  186,   66,  156,   67,  157,  158,
  159,   33,   34,   35,   36,   37,   38,   39,   40,  205,
  140,  248,  283,  351,   41,   42,  162,   80,   43,  272,
  229,   44,  104,  367,  341,  164,  227,  447,  274,  342,
  105,  228,
};
final static short yysindex[] = {                       -24,
  424,  -72,  400,    0,    0,    0,    0,    0,  167,  -34,
  218,   -8,   -9,    0,  889,    0,    7,    0,  783,  -32,
 -221,  -59,  424,  424,    0,    0,   11,  246,   52,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  -51,    0,    0,    0,  -52,  497, -150,   57,
  105,  115,    0,    0,  859,  -22,  268,  343,  343,  199,
  469,  439,    0,    0,    0,    0,    0,  832,    0,  963,
    0,  125,   -7,  110,  176,  199,  479,   69,  251,  448,
   54,  805,    0,  146,  130,    0,    0,  727,    0,  222,
    0,    0,  154,    0,   61,    0,  277,  281,  189,    0,
  348,    0,  582,  359,    0,    0,    0,   41,  251,    0,
  109,  889,  666,    0,    0,    0,    0,  247, -181,  316,
  446,  224,    0,    0,    0,  996, 1000,    0,  475,  481,
  159,    0,    0,    0,    0,    0,    0,  963,  889,  261,
  889,  476,   30,    0,  480,    0,  199,  507,  509,    0,
    0,    0,    0,  212,  251,  513,  288,    0,    0,  522,
  471,    0,  442,    0,  517,    0,   92,  537,    0,    0,
    0,  588,    0,    0,   -4,  525,  317,  439,   13,    0,
    0,  450,    0,   -6,    0,    0,    0,    0,    0,    0,
  530, -181,    0,    0,  439,    0,  439,  343,  343,    0,
  120,  753,  521,  472,  345,  564,    0,    0,  551,    0,
   85,  553,  562,    0,   59,  579,  212,    0,  583,  369,
  -85,  380,    0,  -39, -197,  612,  534,    0,  535,    0,
    0,  218,    0,    0,    0,    0,    0, -110,  616,  624,
  632,  634,    0,  596,    0,  727,  141,    0,    0,    0,
   88, -110, -110, -110,    0,  623,    0,  642,    0,  218,
  218,   50,  218,    0,  -36,  628,  629,  -28, -197,  408,
  559,    0,  570,    0,  631,  576,  447,    0,    0,    0,
    0,  727,  581,  587,  -80,  -77,  592,  606,  611,  613,
    0,  463,  681,  684,  -20,  688,  697,    0,  701,    0,
    0,   79,  705,  706,  218,  482,  -81,  484,   37,  275,
    0,  504,  727,  639,  727,  275,  313,  275,  275,  275,
  275,    0,   37,   37,   37,  515,   37,   37,    0,    0,
  710,    0,    0,  714,  218,  218,  168,  218,  508,  139,
  717,    0,  167,  172,  519,  653,    0,    0,    0,  734,
  536,  677,  672,  678,  685,  689,  347,  692,  704,  709,
  715,  728,  750,  767,  771,   37,  773,  797,  803,    0,
   37,  784,  809,  204,  812,  813,  889,  865,  889,    0,
    0,  392,  804,    0,  690,    0,    0,    0,    0,  749,
  295,  334,  -84,  355,  363,    0,    0,  -60,    0,    0,
    0,    0,    0,    0,    0,    0,  816,   37,    0,    0,
  821,   37,   37,   37,  620,   37,   37,  602,  777,  675,
  700,    0,  745,    0,    0,  727,  759,  824,  761,  827,
  764,  838,  390,  768,  839,  776,  843,    0,    0,    0,
  844,    0,  850,  852,  854,   37,  856,  860,  862,    0,
    0,   67,    0,    0,    0,  802,  727,    0,  727,    0,
  727,    0,  698,    0,  727,    0,  727,    0,  727,    0,
    0,    0,    0,    0,  871,   37,    0,    0,    0,    0,
  668,  810,  814,  815,  721,  818,  819,  822,  826,    0,
  878,  883,  682,  693,  694,  699,  254,  702,  707,  708,
  716,    0,    0,  893,  894,  897,  906,  909,   32,  910,
  911,  914,  920,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yyrindex[] = {                         0,
    0,  981,  985,    0,    0,    0,    0,    0,    0,  -30,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  986,   15,   16,    0,    0,   36,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,  989,    0,    0,    0,
    0, 1034,    0,    0,    0,    0,    0,    0,    0,  950,
    0, 1117,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  950,  950,    0,  951,  951,    0,
    0,  -37,    0,    0,    0,    0,    0,   17,    0,   26,
    0,    0,    0,    0,  145,    0,    0,    0,    0,    0,
  -68,    0,  -66,    0,    0,    0,    0,    0,  103,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,   89,    0,    0,    0,    0,    0, 1067, 1094,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,   10,    0,  118,    0,    0,    0,
    0,    0,    0,    0,   65,    0,    0,  524,    0,    0,
    0,    0,    0,    0,    0,    0,    0,  398,    0,    0,
    0,    0,    0,    0,    0,  102,    0, 1122,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  407,    0,    0, 1144,    0, 1166,    0,    0,    0,
    0,    0,    0,    0,    0,  571,    0,    0,   74,    0,
    0,    0,    0,    0,    0,    0,  108,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  427,    0,
    0,    0,    0,  664,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  117,    0,  119,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  236,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  219,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,  731,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,  937,    0,    0,    0,    0,
  230,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  245,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  264,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  942,    0,    0,    0,    0,    0,
    0,    0,   68,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,
};
final static short yygindex[] = {                         0,
  999,    0,  136,    0,  978,    1,   25,  -21,    0,    3,
  979,    0,    0,    9,  315,    0,    0,  -58,    0,    0,
  669,    0,    0,    0, 1135,  -10,    0,  -69,    0,   45,
    0,  387,    0,    0,    0,    0,   19,    0,    0,  302,
    0,  994,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  817,    0,    0,    0,    0,    0,  292,    0,
    0,    0,  -38,    0, 1047,    0, -167,    0,    0,    0,
    0,    0,
};
final static int YYTABLESIZE=1523;
static short yytable[];
static { yytable();}
static void yytable(){
yytable = new short[]{                         61,
  141,   24,   91,   24,   77,   60,   99,   58,   85,  201,
   57,   50,   59,   18,    7,    8,    5,  113,  265,   68,
  102,   58,  298,   88,   57,    6,   59,  102,   18,  302,
   76,   73,   74,  145,  237,  126,  126,  325,  127,  262,
  433,  163,  315,  337,  111,  316,   79,   89,  103,  201,
    3,  144,    4,  234,  230,   86,  229,  138,  109,  264,
  188,  273,  120,  193,  439,   87,   91,  201,  202,   92,
  209,   61,  100,  197,  118,  126,  340,  120,  120,   86,
  103,   91,   58,  148,  149,   57,   14,   59,  208,   68,
  520,   58,   16,  126,   57,   97,   59,  160,    3,  256,
    4,  182,  184,  307,   97,   61,  106,  480,  155,  126,
   96,  127,  154,  197,   89,  107,  205,  255,   48,  169,
  201,  120,  221,   61,  120,  251,  148,  179,  203,   24,
  206,  197,   27,  239,  201,   49,   22,  330,   47,    7,
    8,    5,  252,   61,  123,  286,   24,  108,  170,  120,
    6,  126,  178,  127,  109,  211,  205,   14,   25,   59,
  126,  103,  126,   16,  127,  142,  170,  181,  146,   50,
  195,  197,  226,  215,  205,   25,   48,   59,  431,  432,
   68,  314,   58,    1,  123,   57,  165,   59,  166,  261,
   14,  244,  148,  336,  120,  438,   16,   49,  197,  200,
   58,  108,  123,   57,   91,   59,  229,   68,  109,   58,
   49,  382,   57,   58,   59,  147,   57,  264,   59,  119,
  264,   51,   52,   53,   54,   98,  228,   84,  264,  226,
  381,    1,    2,  112,   55,   51,   52,   53,   54,  102,
  276,  205,  119,   68,   56,   58,  102,   75,   57,  236,
   59,   72,  143,  287,  288,  289,  290,   68,   56,   58,
   91,  414,   57,   78,   59,  201,  201,  192,  233,  123,
  201,  226,  201,  201,  201,  201,  201,  201,  201,    7,
    8,    5,  201,  201,  201,  201,  201,  201,  317,   48,
    6,  126,  126,  339,  154,  519,  126,   52,   53,   54,
  126,  126,  126,  126,  126,   51,   52,   53,   54,  126,
   24,  126,  126,  126,   20,  141,   24,   24,   24,   24,
   24,   24,  479,  148,  295,  151,  152,  153,   56,  197,
  197,  217,   21,  385,  197,  264,  197,  197,  197,  197,
  197,  197,  197,  237,   27,   50,  197,  197,  197,  197,
  197,  197,   20,  202,  233,   14,   27,   24,   61,   14,
   88,   16,   27,  170,  180,   16,  418,  420,  421,  144,
   21,  423,  205,  205,   59,  242,  228,  205,  509,  205,
  205,  205,  205,  205,  205,  205,   20,   57,  145,  205,
  205,  205,  205,  205,  205,  378,   51,   52,   53,   54,
  123,  123,  284,  172,   21,  123,  174,  379,  452,  123,
  123,  123,  123,  123,   51,   52,   53,   54,  123,   56,
  123,  123,  123,   51,   52,   53,   54,   51,   52,   53,
   54,  118,  422,   58,   14,  357,   57,   56,   59,   20,
   16,   18,  374,   14,  116,  117,   56,  140,  466,   16,
   56,  136,  135,  137,  118,  214,   18,   21,  218,   51,
   52,   53,   54,   20,  140,  173,   14,   23,  151,  152,
  153,  397,   16,   51,   52,   53,   54,  167,  168,  118,
  129,   21,   56,  177,   23,  130,  191,   20,   13,   14,
  235,   14,  126,  237,  127,   16,   56,   16,   88,   88,
  144,   93,   94,  187,  233,   21,  102,  151,  152,  153,
   20,  126,  465,  127,  198,  266,  267,  508,  258,  145,
  199,  126,  204,  127,   46,  114,  115,  128,   21,  102,
  343,   10,  170,  171,  207,   11,   20,  150,  210,  344,
   12,   13,   14,   15,  151,  152,  153,  212,   16,  213,
   17,   18,   19,  216,   21,  102,  299,  427,  428,  303,
  304,  245,  219,  126,   60,  127,  222,   63,  343,   10,
  161,  189,  190,   11,   20,  223,   60,  344,   12,   13,
   14,   15,   60,  231,  240,  241,   16,  238,   17,   18,
   19,  232,  225,  331,  246,  220,  429,  430,   20,   52,
   53,   54,  343,   10,  249,  247,  126,   11,  127,  250,
  253,  344,   12,   13,   14,   15,  225,  434,  435,  254,
   16,   20,   17,   18,   19,  436,  437,   20,  156,  156,
  356,  358,  359,  360,  361,  362,  281,  257,  126,   21,
  127,  259,  450,  260,  126,  225,  127,  131,   52,   53,
   54,   20,  463,  464,  263,    9,   10,  271,  270,  277,
   11,  132,  133,  134,  278,   12,   13,   14,   15,  269,
   56,  398,  279,   16,  280,   17,   18,   19,   20,    9,
   10,  291,  305,  306,   11,  292,  300,  301,  309,   12,
   13,   14,   15,  156,  308,  156,   21,   16,  310,   17,
   18,   19,  311,   81,   82,  312,  183,   58,   11,  313,
   57,   20,   59,   12,  318,  453,   15,  126,  322,  127,
  101,  154,  154,   17,   18,   19,   81,   82,  319,   21,
  425,   11,  126,  320,  127,  321,   12,   20,  323,   15,
  454,  324,  126,  101,  127,  327,   17,   18,   19,  136,
  135,  137,   81,   82,  328,   21,  335,   11,  338,  329,
   20,  353,   12,  332,  333,   15,   20,  350,  370,  101,
  366,  371,   17,   18,   19,  380,  377,  388,   21,   60,
   63,   63,   63,  344,   21,  455,  154,  126,  154,  127,
   81,   82,  389,  243,   58,   11,  392,   57,  390,   59,
   12,  391,  394,   15,  136,  135,  137,  224,  404,  395,
   17,   18,   19,  396,   81,   82,  399,  451,   58,   11,
  485,   57,   20,   59,   12,  405,  156,   15,  400,  406,
  408,  224,  156,  401,   17,   18,   19,  175,   82,  402,
   21,  412,   11,   81,   82,  496,   58,   12,   11,   57,
   15,   59,  403,   12,  176,  409,   15,   17,   18,   19,
  224,  410,  424,   17,   18,   19,  413,   81,   82,  416,
  417,  426,   11,   58,  440,  446,   57,   12,   59,  442,
   15,  457,  458,  459,  268,  460,  461,   17,   18,   19,
  467,  136,  135,  137,   81,   82,  462,  468,  469,   11,
   58,  470,  471,   57,   12,   59,   58,   15,  472,   57,
  473,   59,  474,  476,   17,   18,   19,  110,  477,  154,
  478,   51,   52,   53,   54,  154,  481,   81,   82,  490,
   58,  492,   11,   57,  493,   59,  502,   12,  494,  495,
   15,  503,  498,  499,   56,  504,  500,   17,   18,   19,
  501,  514,  515,   81,   82,  516,  505,  506,   11,  132,
  133,  134,  507,   12,  517,  510,   15,  518,  521,  522,
  511,  512,  523,   17,   18,   19,   81,   82,  524,  513,
  115,   11,   81,   82,  118,  121,   12,   11,  117,   15,
   25,   61,   12,   86,   99,   15,   17,   18,   19,  103,
   45,   90,   17,   18,   19,  126,   95,  127,   51,   52,
   53,   54,   83,  387,  132,  133,  134,    0,    0,    0,
    0,    0,  136,  135,  137,    0,    0,    0,    0,    0,
    0,   56,   51,   52,   53,   54,    0,   58,   81,   82,
   57,   58,   59,   11,   57,    0,   59,    0,   12,    0,
    0,   15,    0,    0,    0,   56,    0,    0,   17,   18,
   51,   52,   53,   54,    0,    0,    0,    0,    0,    0,
    0,    0,    0,   55,   55,   55,   55,    0,   55,    0,
   55,    0,    0,   56,    0,    0,    0,  131,   52,   53,
   54,   55,   55,   55,   55,   55,    0,    0,    0,    0,
    0,  132,  133,  134,    0,    0,    0,  164,  164,  164,
   56,  164,    0,  164,   51,   52,   53,   54,    0,    0,
   51,   52,   53,   54,  164,  164,  164,  164,  164,  352,
  354,  355,    0,  419,  166,  166,  166,   56,  166,    0,
  166,    0,    0,   56,   51,   52,   53,   54,    0,    0,
    0,  166,  166,  166,  166,  166,   55,   40,   55,   40,
    0,   40,  159,    0,  159,    0,  159,   56,    0,  393,
    0,    0,    0,    0,   40,   40,   40,   40,   40,  159,
  159,  159,  159,  159,   41,    0,   41,    0,   41,  164,
    0,  164,    0,    0,    0,    0,    0,    0,    0,    0,
    0,   41,   41,   41,   41,   41,   42,    0,   42,    0,
   42,    0,    0,    0,    0,    0,  166,    0,  166,    0,
    0,    0,    0,   42,   42,   42,   42,   42,    0,    0,
    0,    0,  132,  133,  134,    0,    0,    0,    0,   40,
    0,   40,  456,    0,  159,    0,  159,    0,    0,    0,
    0,  194,   52,   53,   54,  196,   52,   53,   54,    0,
    0,    0,    0,    0,    0,    0,   41,    0,   41,    0,
    0,    0,    0,  482,    0,  483,    0,  484,    0,  486,
    0,  487,    0,  488,    0,  489,    0,    0,   42,   55,
   42,    0,    0,    0,    0,   55,    0,    0,    0,    0,
    0,  497,    0,   55,   55,   55,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  164,    0,    0,    0,    0,    0,  164,    0,
    0,    0,    0,    0,    0,    0,  164,  164,  164,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,  166,
    0,    0,    0,    0,    0,  166,    0,    0,    0,    0,
    0,    0,    0,  166,  166,  166,  275,    0,    0,  363,
  364,  365,   40,  368,  369,    0,    0,  159,   40,    0,
    0,  285,    0,  159,    0,    0,   40,   40,   40,    0,
    0,  159,  159,  159,  293,  294,  296,  297,    0,   41,
    0,    0,    0,    0,    0,   41,    0,    0,    0,    0,
    0,    0,  407,   41,   41,   41,    0,  411,    0,    0,
    0,   42,    0,    0,    0,    0,    0,   42,    0,  326,
    0,    0,    0,    0,    0,   42,   42,   42,    0,  334,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,  441,    0,    0,    0,  443,  444,
  445,    0,  448,  449,    0,    0,    0,    0,    0,  372,
  373,  375,  376,    0,    0,    0,    0,    0,  384,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  475,    0,    0,    0,    0,    0,    0,    0,
    0,    0,    0,    0,    0,    0,    0,    0,  415,    0,
    0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
    0,    0,  491,
};
}
static short yycheck[];
static { yycheck(); }
static void yycheck() {
yycheck = new short[] {                         10,
   70,    1,   24,    3,   15,   40,   58,   42,   41,    0,
   45,    9,   47,   44,    0,    0,    0,   40,   58,   40,
   58,   42,   59,   23,   45,    0,   47,   58,   59,   58,
   40,   40,   41,   41,   41,    0,   43,   58,   45,  125,
  125,   80,  123,  125,   55,  123,   40,   23,   48,   40,
  123,   59,  125,   41,   59,  277,  125,   68,  125,  257,
  119,  229,   60,  122,  125,  125,   88,   58,  138,   59,
   41,   82,  125,    0,  256,   40,   40,   75,   76,  277,
   80,  103,   42,   75,   76,   45,  268,   47,   59,   40,
   59,   42,  274,   58,   45,   44,   47,   79,  123,   41,
  125,  112,  113,  271,   44,   41,  257,   41,   40,   43,
   59,   45,   44,   40,   90,   59,    0,   59,  123,   59,
  131,  119,  161,   59,  122,   41,   59,  109,  139,   41,
  141,   58,   44,  192,  125,   44,    1,   59,    3,  125,
  125,  125,   58,   41,    0,   58,   58,   43,   41,  147,
  125,   43,  108,   45,   40,  147,   40,  268,   41,   41,
  125,  161,   43,  274,   45,   41,   59,   59,   59,  167,
  126,  127,  172,  155,   58,   58,  123,   59,  263,  264,
   40,  262,   42,  256,   40,   45,   41,   47,   59,  275,
  268,  202,  125,  275,  192,  256,  274,   44,  125,   41,
   42,   43,   58,   45,  226,   47,  275,   40,  275,   42,
   44,   40,   45,   42,   47,   40,   45,  257,   47,   44,
  257,  256,  257,  258,  259,  277,  125,  260,  257,  229,
   59,  256,  257,  256,  269,  256,  257,  258,  259,  277,
  238,  125,   44,   40,  279,   42,  277,  257,   45,  256,
   47,  260,  260,  251,  252,  253,  254,   40,  279,   42,
  282,   58,   45,  257,   47,  256,  257,   44,  256,  125,
  261,  271,  263,  264,  265,  266,  267,  268,  269,  265,
  265,  265,  273,  274,  275,  276,  277,  278,  286,  123,
  265,  256,  257,  257,   44,  264,  261,  257,  258,  259,
  265,  266,  267,  268,  269,  256,  257,  258,  259,  274,
  310,  276,  277,  278,   40,  385,  316,  317,  318,  319,
  320,  321,  256,  256,  275,  257,  258,  259,  279,  256,
  257,   44,   58,  344,  261,  257,  263,  264,  265,  266,
  267,  268,  269,  125,  256,  343,  273,  274,  275,  276,
  277,  278,   40,  423,  125,  268,  268,  357,  256,  268,
  125,  274,  274,  256,  256,  274,  377,  378,  379,  125,
   58,  382,  256,  257,  256,  256,  275,  261,  125,  263,
  264,  265,  266,  267,  268,  269,   40,   45,  125,  273,
  274,  275,  276,  277,  278,  257,  256,  257,  258,  259,
  256,  257,  262,  123,   58,  261,   59,  269,  419,  265,
  266,  267,  268,  269,  256,  257,  258,  259,  274,  279,
  276,  277,  278,  256,  257,  258,  259,  256,  257,  258,
  259,  256,   41,   42,  268,  123,   45,  279,   47,   40,
  274,   44,  275,  268,   58,   59,  279,   41,   59,  274,
  279,   60,   61,   62,  256,  154,   59,   58,  157,  256,
  257,  258,  259,   40,   58,  277,  268,   41,  257,  258,
  259,  125,  274,  256,  257,  258,  259,  256,  257,  256,
   42,   58,  279,  125,   58,   47,   41,   40,  267,  268,
   41,  268,   43,  275,   45,  274,  279,  274,  263,  264,
  256,  256,  257,  257,  275,   58,   59,  257,  258,  259,
   40,   43,  123,   45,   40,  224,  225,  264,  217,  256,
   40,   43,  262,   45,  125,  258,  259,   59,   58,   59,
  256,  257,  256,  257,   59,  261,   40,   59,   59,  265,
  266,  267,  268,  269,  257,  258,  259,   41,  274,   41,
  276,  277,  278,   41,   58,   59,  265,  263,  264,  268,
  269,   41,   41,   43,   41,   45,  125,   44,  256,  257,
  123,  256,  257,  261,   40,   59,   40,  265,  266,  267,
  268,  269,   59,   59,  198,  199,  274,   58,  276,  277,
  278,  275,   58,  302,  123,  125,  263,  264,   40,  257,
  258,  259,  256,  257,   41,  261,   43,  261,   45,   59,
   58,  265,  266,  267,  268,  269,   58,  263,  264,   58,
  274,   40,  276,  277,  278,  263,  264,   40,   58,   59,
  316,  317,  318,  319,  320,  321,   41,   59,   43,   58,
   45,   59,   41,  275,   43,   58,   45,  256,  257,  258,
  259,   40,  263,  264,  275,  256,  257,  123,  125,   44,
  261,  270,  271,  272,   41,  266,  267,  268,  269,   58,
  279,  357,   41,  274,   41,  276,  277,  278,   40,  256,
  257,   59,  275,  125,  261,   44,   59,   59,   58,  266,
  267,  268,  269,  123,  125,  125,   58,  274,  123,  276,
  277,  278,  256,  256,  257,  125,   41,   42,  261,  123,
   45,   40,   47,  266,  123,   41,  269,   43,  256,   45,
  273,   58,   59,  276,  277,  278,  256,  257,  123,   58,
   41,  261,   43,  123,   45,  123,  266,   40,   58,  269,
   41,   58,   43,  273,   45,   58,  276,  277,  278,   60,
   61,   62,  256,  257,   58,   58,  275,  261,  275,   59,
   40,  123,  266,   59,   59,  269,   40,  264,   59,  273,
  256,   58,  276,  277,  278,   59,  269,  125,   58,  256,
  257,  258,  259,  265,   58,   41,  123,   43,  125,   45,
  256,  257,   59,   41,   42,  261,  125,   45,  263,   47,
  266,  125,  125,  269,   60,   61,   62,  273,   59,  125,
  276,  277,  278,  125,  256,  257,  125,   41,   42,  261,
  123,   45,   40,   47,  266,   59,  256,  269,  125,   59,
   58,  273,  262,  125,  276,  277,  278,  256,  257,  125,
   58,   58,  261,  256,  257,  125,   42,  266,  261,   45,
  269,   47,  125,  266,  273,   59,  269,  276,  277,  278,
  273,   59,   59,  276,  277,  278,   58,  256,  257,   58,
   58,  123,  261,   42,   59,  256,   45,  266,   47,   59,
  269,  123,   59,  123,  273,   59,  123,  276,  277,  278,
  123,   60,   61,   62,  256,  257,   59,   59,  123,  261,
   42,   59,   59,   45,  266,   47,   42,  269,   59,   45,
   59,   47,   59,   58,  276,  277,  278,   59,   59,  256,
   59,  256,  257,  258,  259,  262,  125,  256,  257,   59,
   42,  264,  261,   45,  125,   47,   59,  266,  125,  125,
  269,   59,  125,  125,  279,  264,  125,  276,  277,  278,
  125,   59,   59,  256,  257,   59,  264,  264,  261,  270,
  271,  272,  264,  266,   59,  264,  269,   59,   59,   59,
  264,  264,   59,  276,  277,  278,  256,  257,   59,  264,
    0,  261,  256,  257,    0,    0,  266,  261,    0,  269,
   41,   41,  266,  263,   58,  269,  276,  277,  278,   58,
    2,   24,  276,  277,  278,   43,   28,   45,  256,  257,
  258,  259,   19,  345,  270,  271,  272,   -1,   -1,   -1,
   -1,   -1,   60,   61,   62,   -1,   -1,   -1,   -1,   -1,
   -1,  279,  256,  257,  258,  259,   -1,   42,  256,  257,
   45,   42,   47,  261,   45,   -1,   47,   -1,  266,   -1,
   -1,  269,   -1,   -1,   -1,  279,   -1,   -1,  276,  277,
  256,  257,  258,  259,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  269,   41,   42,   43,   -1,   45,   -1,
   47,   -1,   -1,  279,   -1,   -1,   -1,  256,  257,  258,
  259,   58,   59,   60,   61,   62,   -1,   -1,   -1,   -1,
   -1,  270,  271,  272,   -1,   -1,   -1,   41,   42,   43,
  279,   45,   -1,   47,  256,  257,  258,  259,   -1,   -1,
  256,  257,  258,  259,   58,   59,   60,   61,   62,  313,
  314,  315,   -1,  269,   41,   42,   43,  279,   45,   -1,
   47,   -1,   -1,  279,  256,  257,  258,  259,   -1,   -1,
   -1,   58,   59,   60,   61,   62,  123,   41,  125,   43,
   -1,   45,   41,   -1,   43,   -1,   45,  279,   -1,  353,
   -1,   -1,   -1,   -1,   58,   59,   60,   61,   62,   58,
   59,   60,   61,   62,   41,   -1,   43,   -1,   45,  123,
   -1,  125,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   58,   59,   60,   61,   62,   41,   -1,   43,   -1,
   45,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,   58,   59,   60,   61,   62,   -1,   -1,
   -1,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,  123,
   -1,  125,  426,   -1,  123,   -1,  125,   -1,   -1,   -1,
   -1,  256,  257,  258,  259,  256,  257,  258,  259,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  123,   -1,  125,   -1,
   -1,   -1,   -1,  457,   -1,  459,   -1,  461,   -1,  463,
   -1,  465,   -1,  467,   -1,  469,   -1,   -1,  123,  256,
  125,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,  485,   -1,  270,  271,  272,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,  270,  271,  272,  232,   -1,   -1,  323,
  324,  325,  256,  327,  328,   -1,   -1,  256,  262,   -1,
   -1,  247,   -1,  262,   -1,   -1,  270,  271,  272,   -1,
   -1,  270,  271,  272,  260,  261,  262,  263,   -1,  256,
   -1,   -1,   -1,   -1,   -1,  262,   -1,   -1,   -1,   -1,
   -1,   -1,  366,  270,  271,  272,   -1,  371,   -1,   -1,
   -1,  256,   -1,   -1,   -1,   -1,   -1,  262,   -1,  295,
   -1,   -1,   -1,   -1,   -1,  270,  271,  272,   -1,  305,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,  408,   -1,   -1,   -1,  412,  413,
  414,   -1,  416,  417,   -1,   -1,   -1,   -1,   -1,  335,
  336,  337,  338,   -1,   -1,   -1,   -1,   -1,  344,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  446,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,  374,   -1,
   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,   -1,
   -1,   -1,  476,
};
}
final static short YYFINAL=5;
final static short YYMAXTOKEN=279;
final static String yyname[] = {
"end-of-file",null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,"'('","')'","'*'","'+'","','",
"'-'",null,"'/'",null,null,null,null,null,null,null,null,null,null,"':'","';'",
"'<'","'='","'>'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
"'{'",null,"'}'",null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,
null,null,null,null,null,null,null,"ID","CTE_INT","CTE_DBL","CADENA","IF",
"THEN","ELSE","END_IF","RETURN","OUT","FUN","UI16","ASSIGN","MAYOR_IGUAL",
"MENOR_IGUAL","DISTINTO","BREAK","F64","UNTIL","DISCARD","DO","DEFER","TOF64",
};
final static String yyrule[] = {
"$accept : programa",
"programa : ID conjunto_sentencias",
"programa : error_programa",
"conjunto_sentencias : '{' sentencias '}'",
"conjunto_sentencias : error_conjunto_sentencias",
"sentencias : declarativas ejecutables",
"sentencias : ejecutables declarativas",
"sentencias : declarativas",
"sentencias : ejecutables",
"declarativas : declarativas declarativa",
"declarativas : declarativa",
"ejecutables : ejecutables ejecutable",
"ejecutables : ejecutable",
"declarativa : funcion ';'",
"declarativa : tipo lista_de_variables ';'",
"declarativa : error_declarativa",
"tipo : UI16",
"tipo : F64",
"lista_de_variables : ID",
"lista_de_variables : lista_de_variables ',' ID",
"lista_de_variables : error_lista_de_variables",
"funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"funcion : error_funcion",
"lista_parametros : parametros ',' parametro",
"lista_parametros : parametro",
"lista_parametros :",
"lista_parametros : error_lista_parametros",
"parametros : parametro",
"parametro : tipo ID",
"parametro : error_parametro",
"cuerpo_funcion : sentencias retorno",
"cuerpo_funcion : retorno",
"cuerpo_funcion : error_bloque_funcion",
"retorno : RETURN ejecucion_retorno ';'",
"retorno : error_retorno",
"ejecucion_retorno : condicion",
"ejecucion_retorno : '(' expresion ')'",
"ejecucion_retorno : error_retorno_expresion",
"condicion : '(' expresion comparador expresion ')'",
"condicion : error_condicion",
"expresion : termino",
"expresion : expresion '+' termino",
"expresion : expresion '-' termino",
"expresion : TOF64 '(' expresion ')'",
"expresion : error_expresion",
"termino : termino '*' '(' factor ')'",
"termino : termino '/' '(' factor ')'",
"termino : factor",
"termino : error_termino",
"factor : CTE_INT",
"factor : CTE_DBL",
"$$1 :",
"factor : '-' CTE_INT $$1",
"$$2 :",
"factor : '-' CTE_DBL $$2",
"factor : ID",
"factor : invocacion",
"invocacion : ID '(' lista_parametros_reales ')'",
"invocacion : error_invocacion",
"lista_parametros_reales : parametros_reales ',' parametro_real",
"lista_parametros_reales : parametro_real",
"lista_parametros_reales :",
"lista_parametros_reales : error_lista_parametros_reales",
"parametros_reales : parametro_real",
"parametro_real : ID",
"parametro_real : CTE_INT",
"parametro_real : CTE_DBL",
"comparador : MENOR_IGUAL",
"comparador : MAYOR_IGUAL",
"comparador : '='",
"comparador : '<'",
"comparador : '>'",
"comparador : DISTINTO",
"ejecutable : ejecutable_comun",
"ejecutable : ejecutable_defer",
"ejecutable_comun : asignacion",
"ejecutable_comun : seleccion",
"ejecutable_comun : mensaje_pantalla",
"ejecutable_comun : invocacion_discard",
"ejecutable_comun : expresion_dountil",
"ejecutable_defer : DEFER ejecutable_comun",
"asignacion : ID ASSIGN expresion ';'",
"asignacion : error_asignacion",
"$$3 :",
"seleccion : IF condicion $$3 cuerpo_seleccion error_seleccion",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"$$4 :",
"cuerpo_seleccion : THEN '{' bloque_de_sent_ejecutables '}' $$4 ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"bloque_de_sent_ejecutables : ejecutables",
"mensaje_pantalla : OUT '(' CADENA ')' ';'",
"mensaje_pantalla : OUT '(' ')' ';'",
"mensaje_pantalla : error_mensaje_pantalla",
"invocacion_discard : DISCARD ID '(' lista_parametros_reales ')' ';'",
"invocacion_discard : error_invocacion_discard",
"$$5 :",
"expresion_dountil : DO $$5 cuerpo_dountil",
"$$6 :",
"expresion_dountil : etiqueta ':' DO $$6 cuerpo_dountil_etiqueta",
"expresion_dountil : error_dountil",
"$$7 :",
"cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion $$7 ':' asignacion_do_until ';'",
"cuerpo_dountil : error_cuerpo_dountil",
"etiqueta : ID",
"$$8 :",
"cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion $$8 ':' asignacion_do_until ';'",
"cuerpo_dountil_etiqueta : error_cuerpo_dountil_etiqueta",
"asignacion_do_until : '(' ID ASSIGN expresion ')'",
"asignacion_do_until : error_asignacion_do_until",
"bloque_de_sentencias_ejecutables : ejecutables BREAK ';'",
"bloque_de_sentencias_ejecutables : ejecutables",
"bloque_de_sentencias_ejecutables : BREAK ';'",
"bloque_de_sentencias_ejecutables : error_bloque_sent_ejecutables",
"bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta ';'",
"bloque_de_sentencias_ejecutables_etiqueta : error_bloque_de_sentencias_ejecutables_etiqueta",
"error_programa : ID",
"error_programa : conjunto_sentencias",
"error_conjunto_sentencias : '{' sentencias",
"error_conjunto_sentencias : '{'",
"error_conjunto_sentencias : '}'",
"error_conjunto_sentencias : '{' '}'",
"error_conjunto_sentencias : error sentencias",
"error_conjunto_sentencias : error sentencias '}'",
"error_declarativa : tipo lista_de_variables",
"error_declarativa : lista_de_variables ';'",
"error_declarativa : error tipo ';'",
"error_declarativa : funcion",
"error_lista_de_variables : error ',' ID",
"error_lista_de_variables : lista_de_variables ',' error",
"error_funcion : ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID lista_parametros ')' ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ':' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' tipo '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' '{' cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo cuerpo_funcion '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' '}'",
"error_funcion : FUN ID '(' lista_parametros ')' ':' tipo '{' cuerpo_funcion error",
"error_lista_parametros : parametros ',' parametro ',' error",
"error_lista_parametros : ',' parametro",
"error_lista_parametros : parametros ','",
"error_lista_parametros : parametros parametro",
"error_parametro : error ID",
"error_parametro : tipo error",
"error_bloque_funcion : error",
"error_retorno : RETURN ejecucion_retorno",
"error_retorno : RETURN ';'",
"error_retorno_expresion : expresion ')'",
"error_retorno_expresion : '(' expresion",
"error_retorno_expresion : '(' ')'",
"error_condicion : expresion comparador expresion ')'",
"error_condicion : '(' comparador expresion ')'",
"error_condicion : '(' error expresion error ')'",
"error_condicion : '(' expresion comparador ')'",
"error_condicion : '(' expresion comparador expresion",
"error_condicion : '(' error ')'",
"error_condicion : expresion comparador expresion",
"error_expresion : expresion '+' error",
"error_expresion : expresion '-' error",
"error_expresion : error '+' termino",
"error_expresion : TOF64 error expresion ')'",
"error_expresion : TOF64 '(' expresion error",
"error_expresion : TOF64 '(' ')'",
"error_termino : '*' factor",
"error_termino : termino '*'",
"error_termino : '/' factor",
"error_termino : termino '/'",
"error_invocacion : ID '(' lista_parametros_reales error",
"error_lista_parametros_reales : parametros_reales ',' parametro_real ',' error",
"error_lista_parametros_reales : ',' parametro_real",
"error_lista_parametros_reales : parametros_reales ','",
"error_lista_parametros_reales : parametros_reales parametro_real",
"error_asignacion : ASSIGN expresion ';'",
"error_asignacion : ID expresion ';'",
"error_asignacion : ID ASSIGN ';'",
"error_asignacion : ID ASSIGN expresion error",
"error_seleccion : IF THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables ELSE '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ELSE '{' bloque_de_sent_ejecutables '}' END_IF",
"error_seleccion : IF THEN '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion '{' bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN bloque_de_sent_ejecutables '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' '}' END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables END_IF ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' ';'",
"error_seleccion : IF condicion THEN '{' bloque_de_sent_ejecutables '}' END_IF",
"error_mensaje_pantalla : '(' CADENA ')' ';'",
"error_mensaje_pantalla : OUT CADENA ')' ';'",
"error_mensaje_pantalla : OUT '(' CADENA ';'",
"error_mensaje_pantalla : OUT '(' CADENA ')'",
"error_mensaje_pantalla : '(' ')' ';'",
"error_mensaje_pantalla : OUT ')' ';'",
"error_mensaje_pantalla : OUT '(' ';'",
"error_mensaje_pantalla : OUT '(' ')'",
"error_invocacion_discard : DISCARD '(' lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID lista_parametros_reales ')' ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ';'",
"error_invocacion_discard : DISCARD ID '(' lista_parametros_reales ')'",
"error_dountil : error '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : etiqueta DO '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_dountil : ':' DO",
"error_cuerpo_dountil : bloque_de_sentencias_ejecutables '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil : '{' bloque_de_sentencias_ejecutables '}' UNTIL condicion error asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' '}' UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta UNTIL condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' condicion ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL ':' asignacion_do_until ';'",
"error_cuerpo_dountil_etiqueta : '{' bloque_de_sentencias_ejecutables_etiqueta '}' UNTIL condicion error asignacion_do_until ';'",
"error_asignacion_do_until : ID ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ASSIGN expresion ')'",
"error_asignacion_do_until : '(' ID expresion ')'",
"error_asignacion_do_until : '(' ID ASSIGN ')'",
"error_asignacion_do_until : '(' ID ASSIGN expresion error",
"error_bloque_sent_ejecutables : ';'",
"error_bloque_sent_ejecutables : ejecutables error ';'",
"error_bloque_sent_ejecutables : ejecutables BREAK",
"error_bloque_sent_ejecutables : BREAK",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : ejecutables BREAK ':' etiqueta",
"error_bloque_de_sentencias_ejecutables_etiqueta : ':' etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK etiqueta ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' ';'",
"error_bloque_de_sentencias_ejecutables_etiqueta : BREAK ':' etiqueta",
};

//#line 449 "gramatica.y"
 
private AnalizadorLexico analizadorLexico;
public Parser(AnalizadorLexico analizadorLexico)
{
  this.analizadorLexico = analizadorLexico;
}

public int yylex(){
	Token token = this.analizadorLexico.getToken();
	if(token != null ){
		int val =token.getId();
		yylval = new ParserVal(token.getLexema());
		return val;
	}
   return 0;
}

public void yyerror(String s){
    Main.erroresSintacticos.add("[Parser] " + s);
}


public void verificarRango() {
  String lexema = yylval.sval;
  int clave = TablaSimbolos.obtenerClave(lexema);
  int id = Integer.parseInt(TablaSimbolos.obtenerAtributo(clave, "tipo"));
  if (id == AnalizadorLexico.CTE_INT) {
	  int nro = 1; //SOLO SE PERMITEN NUMEROS POSITIVOS
	  analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(nro));
      Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante i16 al valor: " + nro);
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante i16 fuera de rango");
  }
  else if (id == analizadorLexico.CTE_DBL) {
    Float flotante = -1*Float.parseFloat(lexema.replace('D', 'e'));
    if (((flotante >= AnalizadorLexico.MINDOUBLEPOS && flotante <= AnalizadorLexico.MAXDOUBLEPOS)) || ((flotante >= AnalizadorLexico.MINDOUBLENEG) && (flotante <= AnalizadorLexico.MAXDOUBLENEG)) || (flotante == 0)) {
    	analizadorLexico.tablaSimbolos.actulizarSimbolo(clave, String.valueOf(flotante));
		Main.estructurasSintacticas.add("[ Parser, " + analizadorLexico.linea + "] Se actualiza la constante f64: " + flotante);
    }
    else {
      Main.erroresSintacticos.add("[ Parser, " + analizadorLexico.linea + "] Error sintactico: constante f64 fuera de rango");
    }
  }
}
					
					

	
	
					
					
					
//#line 985 "Parser.java"
//###############################################################
// method: yylexdebug : check lexer state
//###############################################################
void yylexdebug(int state,int ch)
{
String s=null;
  if (ch < 0) ch=0;
  if (ch <= YYMAXTOKEN) //check index bounds
     s = yyname[ch];    //now get it
  if (s==null)
    s = "illegal-symbol";
  debug("state "+state+", reading "+ch+" ("+s+")");
}





//The following are now global, to aid in error reporting
int yyn;       //next next thing to do
int yym;       //
int yystate;   //current parsing state from state table
String yys;    //current token string


//###############################################################
// method: yyparse : parse input and execute indicated items
//###############################################################
int yyparse()
{
boolean doaction;
  init_stacks();
  yynerrs = 0;
  yyerrflag = 0;
  yychar = -1;          //impossible char forces a read
  yystate=0;            //initial state
  state_push(yystate);  //save it
  val_push(yylval);     //save empty value
  while (true) //until parsing is done, either correctly, or w/error
    {
    doaction=true;
    if (yydebug) debug("loop"); 
    //#### NEXT ACTION (from reduction table)
    for (yyn=yydefred[yystate];yyn==0;yyn=yydefred[yystate])
      {
      if (yydebug) debug("yyn:"+yyn+"  state:"+yystate+"  yychar:"+yychar);
      if (yychar < 0)      //we want a char?
        {
        yychar = yylex();  //get next token
        if (yydebug) debug(" next yychar:"+yychar);
        //#### ERROR CHECK ####
        if (yychar < 0)    //it it didn't work/error
          {
          yychar = 0;      //change it to default string (no -1!)
          if (yydebug)
            yylexdebug(yystate,yychar);
          }
        }//yychar<0
      yyn = yysindex[yystate];  //get amount to shift by (shift index)
      if ((yyn != 0) && (yyn += yychar) >= 0 &&
          yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
        {
        if (yydebug)
          debug("state "+yystate+", shifting to state "+yytable[yyn]);
        //#### NEXT STATE ####
        yystate = yytable[yyn];//we are in a new state
        state_push(yystate);   //save it
        val_push(yylval);      //push our lval as the input for next rule
        yychar = -1;           //since we have 'eaten' a token, say we need another
        if (yyerrflag > 0)     //have we recovered an error?
           --yyerrflag;        //give ourselves credit
        doaction=false;        //but don't process yet
        break;   //quit the yyn=0 loop
        }

    yyn = yyrindex[yystate];  //reduce
    if ((yyn !=0 ) && (yyn += yychar) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yychar)
      {   //we reduced!
      if (yydebug) debug("reduce");
      yyn = yytable[yyn];
      doaction=true; //get ready to execute
      break;         //drop down to actions
      }
    else //ERROR RECOVERY
      {
      if (yyerrflag==0)
        {
        yyerror("syntax error");
        yynerrs++;
        }
      if (yyerrflag < 3) //low error count?
        {
        yyerrflag = 3;
        while (true)   //do until break
          {
          if (stateptr<0)   //check for under & overflow here
            {
            yyerror("stack underflow. aborting...");  //note lower case 's'
            return 1;
            }
          yyn = yysindex[state_peek(0)];
          if ((yyn != 0) && (yyn += YYERRCODE) >= 0 &&
                    yyn <= YYTABLESIZE && yycheck[yyn] == YYERRCODE)
            {
            if (yydebug)
              debug("state "+state_peek(0)+", error recovery shifting to state "+yytable[yyn]+" ");
            yystate = yytable[yyn];
            state_push(yystate);
            val_push(yylval);
            doaction=false;
            break;
            }
          else
            {
            if (yydebug)
              debug("error recovery discarding state "+state_peek(0)+" ");
            if (stateptr<0)   //check for under & overflow here
              {
              yyerror("Stack underflow. aborting...");  //capital 'S'
              return 1;
              }
            state_pop();
            val_pop();
            }
          }
        }
      else            //discard this token
        {
        if (yychar == 0)
          return 1; //yyabort
        if (yydebug)
          {
          yys = null;
          if (yychar <= YYMAXTOKEN) yys = yyname[yychar];
          if (yys == null) yys = "illegal-symbol";
          debug("state "+yystate+", error recovery discards token "+yychar+" ("+yys+")");
          }
        yychar = -1;  //read another
        }
      }//end error recovery
    }//yyn=0 loop
    if (!doaction)   //any reason not to proceed?
      continue;      //skip action
    yym = yylen[yyn];          //get count of terminals on rhs
    if (yydebug)
      debug("state "+yystate+", reducing "+yym+" by rule "+yyn+" ("+yyrule[yyn]+")");
    if (yym>0)                 //if count of rhs not 'nil'
      yyval = val_peek(yym-1); //get current semantic value
    yyval = dup_yyval(yyval); //duplicate yyval if ParserVal is used as semantic value
    switch(yyn)
      {
//########## USER-SUPPLIED ACTIONS ##########
case 14:
//#line 37 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de variables");}
break;
case 16:
//#line 41 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'UI16'");}
break;
case 17:
//#line 42 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el tipo 'F64'");}
break;
case 18:
//#line 45 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador -> " + val_peek(0).sval);}
break;
case 19:
//#line 46 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el identificador (dentro de una lista de variables) -> " +  val_peek(0).sval);}
break;
case 21:
//#line 50 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se detecto una declaracion de una funcion");}
break;
case 28:
//#line 63 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);}
break;
case 31:
//#line 68 "gramatica.y"
{Main.estructurasSintacticas.add("[ Parser, " + this.analizadorLexico.linea + "] Warning: funcion vacia");}
break;
case 33:
//#line 72 "gramatica.y"
{Main.estructurasSintacticas.add("Parser: linea " + this.analizadorLexico.linea + ". Se detecto un retorno de funcion");}
break;
case 38:
//#line 82 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(2).sval);}
break;
case 40:
//#line 86 "gramatica.y"
{ Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una conversion explicita");}
break;
case 41:
//#line 87 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una suma");
								Main.polaca.addElementPolaca("+");}
break;
case 42:
//#line 89 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una resta");
								Main.polaca.addElementPolaca("-");}
break;
case 45:
//#line 95 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una multiplicacion");
							Main.polaca.addElementPolaca("*");}
break;
case 46:
//#line 97 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una division");
							Main.polaca.addElementPolaca("/");}
break;
case 49:
//#line 103 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 50:
//#line 105 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 51:
//#line 107 "gramatica.y"
{verificarRango();}
break;
case 52:
//#line 107 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante entera: " + yyval.sval);
									 Main.polaca.addElementPolaca(yyval.sval);}
break;
case 53:
//#line 109 "gramatica.y"
{verificarRango();}
break;
case 54:
//#line 109 "gramatica.y"
{yyval = new ParserVal("-"+val_peek(1).sval); Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo la constante doble: " + yyval.sval);
									Main.polaca.addElementPolaca(yyval.sval);}
break;
case 55:
//#line 111 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se leyo el identificador:  " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 57:
//#line 117 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se realizo una invocacion a funcion");}
break;
case 64:
//#line 130 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "]. Se leyo el parametro -> " + val_peek(0).sval);
									Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 65:
//#line 132 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 66:
//#line 133 "gramatica.y"
{Main.polaca.addElementPolaca(val_peek(0).sval);}
break;
case 67:
//#line 136 "gramatica.y"
{yyval = new ParserVal("<=");}
break;
case 68:
//#line 137 "gramatica.y"
{yyval = new ParserVal(">=");}
break;
case 69:
//#line 138 "gramatica.y"
{yyval = new ParserVal("=");}
break;
case 70:
//#line 139 "gramatica.y"
{yyval = new ParserVal("<");}
break;
case 71:
//#line 140 "gramatica.y"
{yyval = new ParserVal(">");}
break;
case 72:
//#line 141 "gramatica.y"
{yyval = new ParserVal("=!");}
break;
case 80:
//#line 155 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una sentencia ejecutable con defer");}
break;
case 81:
//#line 158 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion");
												Main.polaca.addElementPolaca(val_peek(3).sval);
												Main.polaca.addElementPolaca("=:");}
break;
case 83:
//#line 164 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize()); 
														Main.polaca.addElementPolaca(""); 
														Main.polaca.addElementPolaca("BF");}
break;
case 85:
//#line 171 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF");}
break;
case 86:
//#line 173 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
																Main.polaca.apilar(Main.polaca.getSize());
																Main.polaca.addElementPolaca("");
																Main.polaca.addElementPolaca("BI");}
break;
case 87:
//#line 177 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize(), Main.polaca.desapilar());
																			Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un IF-ELSE");}
break;
case 89:
//#line 186 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla");}
break;
case 90:
//#line 187 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un mensaje por pantalla vacio");}
break;
case 92:
//#line 191 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una invocacion a un DISCARD");}
break;
case 94:
//#line 195 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 96:
//#line 196 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());}
break;
case 99:
//#line 200 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																				Main.polaca.addElementPolaca("");
																				Main.polaca.addElementPolaca("BI");}
break;
case 100:
//#line 203 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
													if (Main.polaca.existeBreak()){ /*Hay un Break*/
														System.out.println("ENTRO");
														Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
													Main.polaca.addElementPolaca(Main.polaca.desapilar());
													Main.polaca.addElementPolaca("BF");
													Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until");}
break;
case 103:
//#line 216 "gramatica.y"
{Main.polaca.apilar(Main.polaca.getSize());
																								Main.polaca.addElementPolaca("");
																								Main.polaca.addElementPolaca("BI");}
break;
case 104:
//#line 219 "gramatica.y"
{Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());
															if (Main.polaca.existeBreak()){ /*Hay un Break*/
																Main.polaca.replaceElementIndex(Main.polaca.getSize() + 2, Main.polaca.desapilar());}
															Main.polaca.addElementPolaca(Main.polaca.desapilar());
															Main.polaca.addElementPolaca("BF");
															Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto un do-until con etiqueta");}
break;
case 106:
//#line 230 "gramatica.y"
{Main.estructurasSintacticas.add("[Parser: linea " + this.analizadorLexico.linea + "] se detecto una asignacion do until");}
break;
case 108:
//#line 234 "gramatica.y"
{Main.polaca.contieneBreak();
															Main.polaca.apilar(Main.polaca.getSize());
															Main.polaca.addElementPolaca("");
															Main.polaca.addElementPolaca("BI");}
break;
case 110:
//#line 239 "gramatica.y"
{Main.polaca.contieneBreak();
												Main.polaca.apilar(Main.polaca.getSize());
												Main.polaca.addElementPolaca("");
												Main.polaca.addElementPolaca("BI");}
break;
case 112:
//#line 247 "gramatica.y"
{Main.polaca.contieneBreak();
																					Main.polaca.apilar(Main.polaca.getSize());
																					Main.polaca.addElementPolaca("");
																					Main.polaca.addElementPolaca("BI");}
break;
case 113:
//#line 251 "gramatica.y"
{Main.polaca.contieneBreak();
																		Main.polaca.apilar(Main.polaca.getSize());
																		Main.polaca.addElementPolaca("");
																		Main.polaca.addElementPolaca("BI");}
break;
case 115:
//#line 260 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: falta el bloque de programa junto con sus llaves");}
break;
case 116:
//#line 261 "gramatica.y"
{Main.erroresSintacticos.add("Error sintactico: Falta el nombre del programa");}
break;
case 117:
//#line 264 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de cierre");}
break;
case 118:
//#line 265 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de cierre");}
break;
case 119:
//#line 266 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el bloque de sentencia/s y la llave de apertura");}
break;
case 120:
//#line 267 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta/n sentencia/s dentro del '{' '}'");}
break;
case 121:
//#line 268 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Faltan las llaves de apertura y cierre");}
break;
case 122:
//#line 269 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Se detecto un bloque sin llave de apertura");}
break;
case 123:
//#line 273 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Eror: falta el ; para terminar la declaracion");}
break;
case 124:
//#line 274 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Falta el tipo de las variables");}
break;
case 125:
//#line 275 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta/n la/s variable/s");}
break;
case 126:
//#line 276 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: falta ; al terminar la declaracion de la funcion");}
break;
case 127:
//#line 280 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador antes de la ','");}
break;
case 128:
//#line 281 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta un identificador luego de la ','");}
break;
case 129:
//#line 285 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la palabra reservada fun al principio de la declaracion de la funcion");}
break;
case 130:
//#line 286 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el nombre de la funcion");}
break;
case 131:
//#line 287 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura para los parametros");}
break;
case 132:
//#line 288 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de cierre para los parametros");}
break;
case 133:
//#line 289 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el ':' luego de los parametros");}
break;
case 134:
//#line 290 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el tipo de retorno de la funcion");}
break;
case 135:
//#line 291 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de apertura del cuerpo de la funcion");}
break;
case 136:
//#line 292 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el cuerpo de la funcion");}
break;
case 137:
//#line 293 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta la llave de cierre del cuerpo de la funcion");}
break;
case 138:
//#line 296 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: No se puede tener mas de dos parametros");}
break;
case 139:
//#line 297 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro antes de la ','");}
break;
case 140:
//#line 298 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta un parametro luego de la ','");}
break;
case 141:
//#line 299 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros: Falta la ',' separando los parametros");}
break;
case 142:
//#line 302 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el tipo del parametro");}
break;
case 143:
//#line 303 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion del parametro: Falta el identificador del parametro");}
break;
case 144:
//#line 306 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el cuerpo de la funcion: falta el retorno");}
break;
case 145:
//#line 310 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta el ';'");}
break;
case 146:
//#line 311 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en el retorno de la funcion: falta la sentencia de retorno");}
break;
case 147:
//#line 315 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 148:
//#line 316 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 149:
//#line 317 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se puede retornar vacio");}
break;
case 150:
//#line 321 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico: Falta el parentesis de apertura de la condicion");}
break;
case 151:
//#line 322 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la primera expresion en la condicion");}
break;
case 152:
//#line 323 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el comparador en la condicion");}
break;
case 153:
//#line 324 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la segunda expresion en la condicion");}
break;
case 154:
//#line 325 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la condicion");}
break;
case 155:
//#line 326 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : No se permite la condicion vacia");}
break;
case 156:
//#line 327 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la condicion");}
break;
case 157:
//#line 330 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la suma");}
break;
case 158:
//#line 331 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo termino de la resta");}
break;
case 159:
//#line 332 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer termino de la suma");}
break;
case 160:
//#line 333 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de la expresion");}
break;
case 161:
//#line 334 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de la expresion");}
break;
case 162:
//#line 335 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Faltan los parentesis de la expresion");}
break;
case 163:
//#line 338 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la multiplicacion");}
break;
case 164:
//#line 339 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la multiplicacion");}
break;
case 165:
//#line 340 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el primer factor de la division");}
break;
case 166:
//#line 341 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el segundo factor de la division");}
break;
case 167:
//#line 344 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en los parametros de la funcion invocada");}
break;
case 168:
//#line 347 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: No se puede tener mas de dos parametros reales");}
break;
case 169:
//#line 348 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro antes de la ','");}
break;
case 170:
//#line 349 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta un parametro luego de la ','");}
break;
case 171:
//#line 350 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico en la declaracion de los parametros en la invocacion de la funcion: Falta la ',' separando los parametros");}
break;
case 172:
//#line 353 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador de la variable a asignar");}
break;
case 173:
//#line 354 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el signo de asignacion");}
break;
case 174:
//#line 355 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion a asignar");}
break;
case 175:
//#line 356 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' en la sentencia de asignacion");}
break;
case 176:
//#line 359 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 177:
//#line 360 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 178:
//#line 361 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 179:
//#line 362 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 180:
//#line 363 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 181:
//#line 364 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el else luego del primer bloque de sentencias de la seleccion");}
break;
case 182:
//#line 365 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias luego del else");}
break;
case 183:
//#line 366 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias luego del else");}
break;
case 184:
//#line 367 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias luego del else");}
break;
case 185:
//#line 368 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 186:
//#line 369 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 187:
//#line 370 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion en la sentencia de seleccion");}
break;
case 188:
//#line 371 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el then en la sentencia de seleccion");}
break;
case 189:
//#line 372 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de apertura antes del bloque de sentencias de la seleccion");}
break;
case 190:
//#line 373 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias en la sentencia de seleccion");}
break;
case 191:
//#line 374 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave de cierre del bloque de sentencias en la sentencia de seleccion");}
break;
case 192:
//#line 375 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el end_if de la seleccion");}
break;
case 193:
//#line 376 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de seleccion");}
break;
case 194:
//#line 379 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 195:
//#line 380 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 196:
//#line 381 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 197:
//#line 382 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 198:
//#line 383 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el out en la sentencia de mensaje por pantalla");}
break;
case 199:
//#line 384 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la sentencia de mensaje por pantalla");}
break;
case 200:
//#line 385 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la sentencia de mensaje por pantalla");}
break;
case 201:
//#line 386 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la sentencia de mensaje por pantalla");}
break;
case 202:
//#line 389 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el nombre de la funcion discard");}
break;
case 203:
//#line 390 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura de los parametros de la funcion discard");}
break;
case 204:
//#line 391 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre de los parametros de la funcion discard");}
break;
case 205:
//#line 392 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' al final de la funcion discard");}
break;
case 206:
//#line 395 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el do en la sentencia do_until");}
break;
case 207:
//#line 396 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la etiqueta en la sentencia do_until");}
break;
case 208:
//#line 397 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta antes de los ':' en la sentencia do_until");}
break;
case 209:
//#line 402 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 210:
//#line 403 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 211:
//#line 404 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 212:
//#line 405 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until");}
break;
case 213:
//#line 406 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until");}
break;
case 214:
//#line 407 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until");}
break;
case 215:
//#line 414 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '{' de apertura del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 216:
//#line 415 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el bloque de sentencias ejecutables en la sentencia do_until");}
break;
case 217:
//#line 416 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la llave '}' de cierre del bloque de sentencias ejecutables en la sentencia do_until con etiqueta");}
break;
case 218:
//#line 417 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el until luego del bloque de sentencias en la sentencia do_until con etiqueta");}
break;
case 219:
//#line 418 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la condicion luego del until en la sentencia do_until con etiqueta");}
break;
case 220:
//#line 419 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego de la condicion en la sentencia do_until con etiqueta");}
break;
case 221:
//#line 425 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de apertura en la asignacion del do_until");}
break;
case 222:
//#line 426 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el identificador a la izquierda de la asignacion del do_until");}
break;
case 223:
//#line 427 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el '=:' en la asignacion del do_until");}
break;
case 224:
//#line 428 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la expresion en la asignacion del do_until");}
break;
case 225:
//#line 429 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el parentesis de cierre en la asignacion del do_until");}
break;
case 226:
//#line 432 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta al menos una sentencia ejecutable dentro del bloque de sentencias");}
break;
case 227:
//#line 433 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia ejecutable");}
break;
case 228:
//#line 434 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 229:
//#line 435 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego del break");}
break;
case 230:
//#line 438 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break luego de la sentencia");}
break;
case 231:
//#line 439 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 232:
//#line 440 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 233:
//#line 441 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
case 234:
//#line 442 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el break antes del ':'");}
break;
case 235:
//#line 443 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ':' luego del break");}
break;
case 236:
//#line 444 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta la etiqueta luego del ':'");}
break;
case 237:
//#line 445 "gramatica.y"
{Main.erroresSintacticos.add("[ Parser, " + this.analizadorLexico.linea + "] Error sintactico : Falta el ';' luego de la etiqueta");}
break;
//#line 1880 "Parser.java"
//########## END OF USER-SUPPLIED ACTIONS ##########
    }//switch
    //#### Now let's reduce... ####
    if (yydebug) debug("reduce");
    state_drop(yym);             //we just reduced yylen states
    yystate = state_peek(0);     //get new state
    val_drop(yym);               //corresponding value drop
    yym = yylhs[yyn];            //select next TERMINAL(on lhs)
    if (yystate == 0 && yym == 0)//done? 'rest' state and at first TERMINAL
      {
      if (yydebug) debug("After reduction, shifting from state 0 to state "+YYFINAL+"");
      yystate = YYFINAL;         //explicitly say we're done
      state_push(YYFINAL);       //and save it
      val_push(yyval);           //also save the semantic value of parsing
      if (yychar < 0)            //we want another character?
        {
        yychar = yylex();        //get next character
        if (yychar<0) yychar=0;  //clean, if necessary
        if (yydebug)
          yylexdebug(yystate,yychar);
        }
      if (yychar == 0)          //Good exit (if lex returns 0 ;-)
         break;                 //quit the loop--all DONE
      }//if yystate
    else                        //else not done yet
      {                         //get next state and push, for next yydefred[]
      yyn = yygindex[yym];      //find out where to go
      if ((yyn != 0) && (yyn += yystate) >= 0 &&
            yyn <= YYTABLESIZE && yycheck[yyn] == yystate)
        yystate = yytable[yyn]; //get new state
      else
        yystate = yydgoto[yym]; //else go to new defred
      if (yydebug) debug("after reduction, shifting from state "+state_peek(0)+" to state "+yystate+"");
      state_push(yystate);     //going again, so push state & val...
      val_push(yyval);         //for next action
      }
    }//main loop
  return 0;//yyaccept!!
}
//## end of method parse() ######################################



//## run() --- for Thread #######################################
/**
 * A default run method, used for operating this parser
 * object in the background.  It is intended for extending Thread
 * or implementing Runnable.  Turn off with -Jnorun .
 */
public void run()
{
  yyparse();
}
//## end of method run() ########################################



//## Constructors ###############################################
/**
 * Default constructor.  Turn off with -Jnoconstruct .

 */
public Parser()
{
  //nothing to do
}


/**
 * Create a parser, setting the debug to true or false.
 * @param debugMe true for debugging, false for no debug.
 */
public Parser(boolean debugMe)
{
  yydebug=debugMe;
}
//###############################################################



}
//################### END OF CLASS ##############################
