prueba_nombre_programa {
	ui16 var1;
	fun funcion1(ui16 var2) : ui16 {
		out('entro a funcion1');
		var1 =: var2 + 1;
		if (var1 = 3) then{
			out('var1 es 3');}
		else{
			out('var1 no es 3');
		}end_if;
		return (var1);
	};
	out('llamo a funcion1');
	var1 =: funcion1(2);
}

prueba_nombre_programa {
	ui16 var1;
	fun funcion1(ui16 var2) : ui16 {
		out('entro a funcion1');
		var1 =: var2 + 1;
		if (var1 = 3) then{
			out('var1 es 3');}
		else{
			out('var1 no es 3');
		}end_if;
		return (var1);
	};
	out('llamo a funcion1');
	discard funcion1(2);
}


prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	do { 
		var2 =: var1 + 1;
		out('entro');
	}
	until (var1 > 5) : (var1 =: var1 + 1);
}

prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	etiqueta1: do { 
		var2 =: var1 + 1;
		out('entro');
		break :etiqueta1;
	}
	until (var1 > 5) : (var1 =: var1 + 1);
}



prueba_nombre_programa {
	ui16 var1;
	f64 var2;
	var1 =: 1;
	var2 =: 2.0 + tof64(var1);
	if (var2 = 3.0) then{
		out('entro if');}
	else{
		out('entro else');
	}end_if;
}


prueba_nombre_programa {
	ui16 var1;
	f64 var2;
	var1 =: 1;
	var2 =: 2.0 + tof64(var1);
	if (var2 = 3.0) then{
		out('entro if');}
	else{
		out('entro else');
	}end_if;
}