prueba_nombre_programa {
	ui16 var1;
	fun funcion1(ui16 var2) : ui16 {
		out('entro a funcion1');
		var1 =: var2 + 1;
		if (var1 = 3) then{
			out('var1 es 3');}
		else{
			out('var1 no es 3');
		}end_if;
		return (var1);
	};
	out('llamo a funcion1');
	var1 =: funcion1(2);
}

prueba_nombre_programa {
	ui16 var1;
	fun funcion1(ui16 var2) : ui16 {
		out('entro a funcion1');
		var1 =: var2 + 1;
		if (var1 = 3) then{
			out('var1 es 3');}
		else{
			out('var1 no es 3');
		}end_if;
		return (var1);
	};
	out('llamo a funcion1');
	discard funcion1(2);
}


prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	do { 
		var2 =: var1 + 1;
		out('entro');
	}
	until (var1 > 5) : (var1 =: var1 + 1);
}

prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	etiqueta1: do { 
		var2 =: var1 + 1;
		out('entro');
		break :etiqueta1;
	}
	until (var1 > 5) : (var1 =: var1 + 1);
}



prueba_nombre_programa {
	ui16 var1;
	f64 var2;
	var1 =: 1;
	var2 =: 2.0 + tof64(var1);
	if (var2 = 3.0) then{
		out('entro if');}
	else{
		out('entro else');
	}end_if;
}


prueba_nombre_programa {
	ui16 var1;
	f64 var2;
	var1 =: 1;
	var2 =: 2.0 + tof64(var1);
	if (var2 = 3.0) then{
		out('entro if');}
	else{
		out('entro else');
	}end_if;
}

prueba_nombre_programa {
	ui16 var1;
	f64 var2;
	var1 =: 1;
	var2 =: var1;
}

prueba_nombre_programa {
	ui16 var1;
	fun funcion1(ui16 var2) : ui16 {
		ui16 var1;
		var1 =: 4;
		var2 =: var2 + var1 + 1;
		return (var2);
	};
	var1 =: 5;
	var1 =: var1 + funcion1(2);
	if (var1 < 11) then{
		out('es menor a 11');}
	else{
		out('es mayor o igual a 11');
	}end_if;
}

//error variable var1 no declarada
prueba_nombre_programa {
	var1 =: 1;
	fun funcion1(ui16 var2) : ui16 {
		var2 =: var2 + 1;
		return (var2);
	};
	discard funcion1(var1);
	if (var1 = 1) then{
		out('es igual a 1');}
	else{
		out('es distinto a 1');
	}end_if;
}

// error no coincidencia en etiquetas
prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	etiqueta : do { 
		var2 =: var1 + 1;
		out('entro');
		break :etiqueta1;
	}
	until (var1 > 5) : (var1 =: var1 + 1);
}

//error variable var2 no alcanzada
prueba_nombre_programa {
	ui16 var1;
	var1 =: 1;
	fun funcion1(ui16 var2) : ui16 {
		var2 =: var2 + 1;
		return (var2);
	};
	discard funcion1(var1);
	var2 =: 3;
	if (var1 = 1) then{
		out('es igual a 1');}
	else{
		out('es distinto a 1');
	}end_if;
}

// anidamiento
prueba_nombre_programa {
	ui16 var1, var2;
	fun funcion1(ui16 var2) : ui16 {
		var2 =: var2 + 1;
		if (var2 < 6) then{
			out('es menor a 6');
			do { 
				var2 =: var2 + 1;
				out('entro al do');
			}
			until (var2 > 6) : (var2 =: var2 + 1);
		}
		else{
			out('es mayor o igual a 6');
			do { 
				var2 =: var2 - 1;
				out('entro');
			}
			until (var2 < 6) : (var2 =: var2 - 1);
		}end_if;
		return (var2);
	};
	var1 =: funcion1(0);
	if (var1 = 8) then{
		out('es igual a 8');}
	else{
		out('es distinto a 8');
	}end_if;
	var2 =: funcion1(10);
	if (var2 = 4) then{
		out('es igual a 4');}
	else{
		out('es distinto a 4');
	}end_if;
}

// error resultado negativo en restas de enteros sin signo
prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	var2 =: var1 - 2;
}

//error division por cero
prueba_nombre_programa {
	ui16 var1, var2;
	var1 =: 1;
	var2 =: var1 - 1;
	var1 =: var1 / var2;
}